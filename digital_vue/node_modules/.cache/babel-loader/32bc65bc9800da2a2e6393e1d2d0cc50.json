{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CardIcons from '@/components/shared/CardIcons';\nimport axios from 'axios';\nexport default {\n  name: 'TargetDeviceCard',\n  components: {\n    CardIcons\n  },\n  data() {\n    return {\n      target_country: '',\n      headerRow: [],\n      headers: [],\n      items: [],\n      itemLabels: [],\n      budgetValues: [],\n      locked: true,\n      valid: false,\n      rules: {\n        required: v => !!v || \"Required\",\n        notEmpty: v => v.toString().length > 0 || \"Budget should be between 0 and 10,000,000\",\n        inRange: v => Number.isInteger(Number(v)) && v >= 0 && v <= 10000000 || \"Budget should be between 0 and 10,000,000\"\n      }\n    };\n  },\n  computed: {\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    },\n    storedTargetCountries: {\n      get() {\n        return this.$store.state.storedTargetCountries;\n      }\n    },\n    storedTargetChannels: {\n      get() {\n        return this.$store.state.storedTargetChannels;\n      }\n    },\n    storedTargetDevices: {\n      get() {\n        return this.$store.state.storedTargetDevices;\n      }\n    },\n    storedCountries: {\n      get() {\n        return this.$store.state.storedCountries;\n      }\n    },\n    storedChannels: {\n      get() {\n        return this.$store.state.storedChannels;\n      }\n    },\n    storedDevices: {\n      get() {\n        return this.$store.state.storedDevices;\n      }\n    },\n    targetChannelsLastEdited: {\n      get() {\n        if (this.storedTargetChannels.length > 0) {\n          let lastEditDate = new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified)))).toLocaleDateString('en-GB');\n          let lastEditTime = new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified)))).toLocaleTimeString('en-GB');\n          return `${lastEditDate} ${lastEditTime}`;\n        } else {\n          return 'N/A';\n        }\n      }\n    }\n  },\n  watch: {\n    // async selectedStrategy(newValue) {\n    //     console.log('TargetDeviceCard: watch: selectedStrategy', newValue)\n    //     await this.createHeaders()\n    //     await this.createItems()\n    // },\n    // async storedTargetCountries(newValue) {\n    //     console.log('TargetChannelCard: watch: storedTargetCountries', newValue)\n    //     await this.createHeaders()\n    //     await this.createItems()\n    // },\n    async storedTargetChannels(newValue) {\n      console.log('TargetDeviceCard: watch: storedTargetChannels', this.storedTargetChannels);\n      await this.createHeaders();\n      await this.createItems();\n    }\n  },\n  mounted() {\n    this.createItems();\n    this.createHeaders();\n  },\n  methods: {\n    async getTargetCountry(id) {\n      var response = '';\n      try {\n        response = await axios.get(`api/v1/targetcountries/${id}`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.target_country = response.data;\n    },\n    createItems() {\n      this.items = [];\n      this.storedDevices.forEach(dev => {\n        let item = {\n          ...dev\n        };\n        item.target_channels = [];\n        console.log('TargetDeviceCard: createItems: dev:', this.storedDevices);\n        this.storedTargetChannels.forEach(tch => {\n          // console.log('TargetDeviceCard: createItems: tch:', tch)\n          let found_target_device = this.storedTargetDevices.find(tdev => tdev.device === dev.id && tdev.target_channel === tch.id);\n          if (found_target_device) {\n            // console.log('TargetDeviceCard: createItems: found tdev:', found_target_device)\n            item.target_channels.push({\n              target_channel_id: tch.id,\n              auto_allocate: found_target_device.auto_allocate,\n              budget: found_target_device.budget\n            });\n          } else {\n            // console.log('TargetDeviceCard: createItems: did not find dev/tch:', dev, tch)\n            item.target_channels.push({\n              target_channel_id: tch.id,\n              auto_allocate: false,\n              budget: ''\n            });\n          }\n        });\n        this.items.push(item);\n      });\n      console.log('TargetDeviceCard: createItems: items:', this.items);\n    },\n    async createHeaders() {\n      this.headerRow = [];\n      let device = {\n        text: 'Device',\n        align: 'start',\n        sortable: false,\n        value: 'code',\n        class: \"black--text text-subtitle-1\",\n        width: \"50px\"\n      };\n      this.headerRow.push(device);\n      if (this.storedTargetChannels.length > 0) {\n        for (const target_channel of this.storedTargetChannels) {\n          // Get the country details to display\n          await this.getTargetCountry(target_channel.target_country);\n\n          // Create a header for each country - where we'll place a checkbox \n          var channel = {\n            text: this.target_country.code + '/' + target_channel.code,\n            align: 'start',\n            sortable: false,\n            value: \"auto_allocate\",\n            class: \"black--text text-subtitle-1\",\n            width: \"50px\"\n          };\n          this.headerRow.push(channel);\n\n          // Create a header for each channel budget - where we'll place a budget field\n          var budget = {\n            text: 'Budget',\n            align: 'center',\n            sortable: false,\n            value: \"budget\",\n            class: \"black--text text-subtitle-1\",\n            width: \"150px\"\n          };\n          this.headerRow.push(budget);\n        }\n      } else {\n        // Create a header indicating no channels have been selected\n        var no_countries_channels_selected = {\n          text: 'No Target Countries/Channels Selected',\n          align: 'start',\n          sortable: false,\n          value: \"auto_allocate\",\n          class: \"black--text text-subtitle-1\",\n          width: \"50px\"\n        };\n        this.headerRow.push(no_countries_channels_selected);\n      }\n    },\n    save() {\n      let newTargetDeviceObjects = [];\n      this.items.map(i => {\n        // console.log(i)\n        i.target_channels.map(tch => {\n          if (tch.auto_allocate) {\n            let obj = {\n              device: i.id,\n              target_channel: tch.target_channel_id,\n              code: i.code,\n              name: i.name,\n              auto_allocate: tch.auto_allocate,\n              budget: tch.budget,\n              budget_allocated: 0\n            };\n            newTargetDeviceObjects.push(obj);\n          }\n        });\n      });\n      // console.log('newTargetDeviceObjects:', newTargetDeviceObjects)\n\n      // Which countries has the user deleted?\n      var deleteTargetDeviceIds = this.diffArray(newTargetDeviceObjects);\n      // console.log('deleteTargetDeviceIds:', deleteTargetDeviceIds)\n      this.$emit('update-target-devices', newTargetDeviceObjects, deleteTargetDeviceIds);\n      this.locked = true;\n    },\n    diffArray(newTargetDeviceObjects) {\n      function diff(newTargetDeviceObjects, current_tdev) {\n        for (let newItem of newTargetDeviceObjects) {\n          if (newItem.target_channel_id === current_tdev.target_channel_id && newItem.device === current_tdev.device) {\n            return true;\n          }\n        }\n        return false;\n      }\n      let deleteTargetDeviceIds = [];\n      this.storedTargetDevices.forEach(current_tdev => {\n        if (!diff(newTargetDeviceObjects, current_tdev)) {\n          deleteTargetDeviceIds.push(current_tdev);\n        }\n      });\n      return deleteTargetDeviceIds;\n    },\n    cancel() {\n      this.locked = true;\n      this.createItems();\n    },\n    includeChange(item, itemIndex, country, countryIndex) {\n      !country.auto_allocate ? country.budget = '' : null;\n    }\n  }\n};","map":{"version":3,"mappings":";AAsIA;AACA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;MACA;IACA;IACAK;MACAL;QACA;MACA;IACA;IACAM;MACAN;QACA;MACA;IACA;IACAO;MACAP;QACA;MACA;IACA;IACAQ;MACAR;QACA;UACA;UACA;UACA;QACA;UACA;QACA;MACA;IACA;EACA;EACAS;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACAC;MACA;MACA;IACA;EACA;EACAC;IACA;IACA;EACA;EACAC;IACA;MACA;MACA;QACAC;MACA,EACA;QACAH;MACA;MACA;IACA;IACAI;MACA;MACA;QACA;UAAA;QAAA;QACAC;QACAL;QACA;UACA;UACA;UACA;YACA;YACAK;cACAC;cACAC;cACAC;YACA;UACA;YACA;YACAH;cACAC;cACAC;cACAC;YACA;UACA;QACA;QACA;MACA;MACAR;IACA;IACA;MACA;MACA;QACAS;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACA;MACA;QACA;UACA;UACA;;UAEA;UACA;YACAL;YACAC;YACAC;YACAC;YACAC;YACAC;UACA;UACA;;UAEA;UACA;YACAL;YACAC;YACAC;YACAC;YACAC;YACAC;UACA;UACA;QACA;MACA;QACA;QACA;UACAL;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACA;MACA;IACA;IACAC;MACA;MACA;QACA;QACAC;UACA;YACA;cACAC;cACAC;cACAC;cACA/C;cACAmC;cACAC;cACAY;YACA;YACAC;UACA;QACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;QACA;UACA;YACA;UACA;QACA;QACA;MACA;MACA;MACA;QACA;UACAC;QACA;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","components","CardIcons","data","target_country","headerRow","headers","items","itemLabels","budgetValues","locked","valid","rules","required","notEmpty","inRange","computed","selectedPhase","get","selectedStrategy","storedTargetCountries","storedTargetChannels","storedTargetDevices","storedCountries","storedChannels","storedDevices","targetChannelsLastEdited","watch","console","mounted","methods","response","createItems","item","target_channel_id","auto_allocate","budget","text","align","sortable","value","class","width","save","i","device","target_channel","code","budget_allocated","newTargetDeviceObjects","diffArray","deleteTargetDeviceIds","cancel","includeChange"],"sourceRoot":"src/components/targetdevice","sources":["TargetDeviceCard.vue"],"sourcesContent":["<template>\r\n    <v-form\r\n        ref=\"form\"\r\n        v-model=\"valid\">\r\n        <v-card class=\"mt-3 mx-3\">\r\n            <v-card-title class=\"py-0\">\r\n                Select Devices and Set Budgets for Target Country/Channels\r\n                <v-spacer></v-spacer>\r\n                <CardIcons\r\n                    :showEditIcon=\"true\"\r\n                    :showHideIcon=\"true\"\r\n                    @edit=\"(locked = !locked)\"\r\n                    @hide=\"$emit('hide')\"\r\n                    cardType=\"Linked Devices\" />\r\n            </v-card-title>\r\n            <v-divider></v-divider>\r\n            <!-- <v-card-text>\r\n                <v-row class=\"text--disabled\">\r\n                    <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">Phase Budget:</v-col>\r\n                    <v-col cols=\"auto\" class=\"d-flex align-center\">\r\n                        <v-text-field\r\n                            :value=\"selectedPhase.budget\"\r\n                            label=\"Budget\"\r\n                            outlined\r\n                            dense\r\n                            disabled\r\n                            hide-details>\r\n                        </v-text-field>\r\n                        <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">\r\n                            <v-text-field\r\n                                :value=\"selectedPhase.auto_allocate ? 'Yes' : 'No'\"\r\n                                label=\"Budget Autoallocated?\"\r\n                                outlined\r\n                                dense\r\n                                disabled\r\n                                hide-details>\r\n                            </v-text-field>\r\n                        </v-col>\r\n                    </v-col>\r\n                    <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">Strategy Budget:</v-col>\r\n                    <v-col cols=\"auto\" class=\"d-flex align-center\">\r\n                        <v-text-field\r\n                            :value=\"selectedStrategy.budget\"\r\n                            label=\"Budget\"\r\n                            outlined\r\n                            dense\r\n                            disabled\r\n                            hide-details>\r\n                        </v-text-field>\r\n                        <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">\r\n                            <v-text-field\r\n                                :value=\"selectedStrategy.auto_allocate ? 'Yes' : 'No'\"\r\n                                label=\"Budget Autoallocated?\"\r\n                                outlined\r\n                                dense\r\n                                disabled\r\n                                hide-details>\r\n                            </v-text-field>\r\n                        </v-col>\r\n                    </v-col>\r\n                </v-row>\r\n            </v-card-text> -->\r\n\r\n            <v-card-text>\r\n                <v-sheet\r\n                    class=\"mb-3 grey\"\r\n                    tile\r\n                    outlined>\r\n                    <v-data-table\r\n                        :headers=\"headerRow\"\r\n                        :items=\"items\"\r\n                        hide-default-footer\r\n                        class=\"pb-3\">\r\n\r\n                        <template v-slot:body=\"{ items }\">\r\n                            <tbody>\r\n                                <tr v-for=\"(item, itemIndex) in items\">\r\n                                    <td>{{ item.name }}</td>\r\n                                    <template v-for=\"(target_channel, targetChannelIndex) in item.target_channels\">\r\n                                        <td>\r\n                                            <v-checkbox\r\n                                                v-model=\"target_channel.auto_allocate\"\r\n                                                color=\"secondary\"\r\n                                                :readonly=\"locked\"\r\n                                                dense\r\n                                                hide-details\r\n                                                @change=\"includeChange(item, itemIndex, target_channel, targetChannelIndex)\"></v-checkbox>\r\n                                            </v-checkbox>\r\n                                        </td>\r\n                                        <td>\r\n                                            <v-text-field\r\n                                                v-model=\"target_channel.budget\"\r\n                                                :readonly=\"locked\"\r\n                                                :disabled=\"!target_channel.auto_allocate\"\r\n                                                :rules=\"target_channel.auto_allocate ? [rules.notEmpty, rules.inRange] : []\"\r\n                                                label=\"Budget\"\r\n                                                type=\"number\"\r\n                                                dense\r\n                                                hide-details\r\n                                                class=\"shrink rounded-0\"\r\n                                                outlined>\r\n                                            </v-text-field>\r\n                                        </td>\r\n                                    </template>\r\n                                </tr>\r\n                            </tbody>\r\n                        </template>\r\n                    </v-data-table>\r\n                </v-sheet>\r\n                <div class=\"caption text--disabled\">\r\n                    <span>Last edit: {{ targetChannelsLastEdited }}</span>\r\n                </div>\r\n            </v-card-text>\r\n            <v-card-actions v-if=\"!locked\">\r\n                <v-spacer></v-spacer>\r\n                <v-btn\r\n                    class=\"grey lighten-1 mr-3 rounded-0 text-capitalize\"\r\n                    light\r\n                    depressed\r\n                    @click=\"cancel\">\r\n                    Cancel\r\n                </v-btn>\r\n                <v-btn\r\n                    class=\"mr-3 success rounded-0 text-capitalize\"\r\n                    depressed\r\n                    :disabled=\"(!valid)\"\r\n                    @click=\"save\">\r\n                    Save\r\n                </v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n    </v-form>\r\n</template>\r\n<script>\r\nimport CardIcons from '@/components/shared/CardIcons'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'TargetDeviceCard',\r\n    components: {\r\n        CardIcons,\r\n    },\r\n    data() {\r\n        return {\r\n            target_country: '',\r\n            headerRow: [],\r\n            headers: [],\r\n            items: [],\r\n            itemLabels: [],\r\n            budgetValues: [],\r\n            locked: true,\r\n            valid: false,\r\n            rules: {\r\n                required: (v => !!v || \"Required\"),\r\n                notEmpty: (v => (v.toString().length > 0) || \"Budget should be between 0 and 10,000,000\"),\r\n                inRange: (v => (Number.isInteger(Number(v)) && v >= 0 && v <= 10000000) || \"Budget should be between 0 and 10,000,000\"),\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedStrategy: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.strategy\r\n            }\r\n        },\r\n        storedTargetCountries: {\r\n            get() {\r\n                return this.$store.state.storedTargetCountries\r\n            }\r\n        },\r\n        storedTargetChannels: {\r\n            get() {\r\n                return this.$store.state.storedTargetChannels\r\n            }\r\n        },\r\n        storedTargetDevices: {\r\n            get() {\r\n                return this.$store.state.storedTargetDevices\r\n            }\r\n        },\r\n        storedCountries: {\r\n            get() {\r\n                return this.$store.state.storedCountries\r\n            }\r\n        },\r\n        storedChannels: {\r\n            get() {\r\n                return this.$store.state.storedChannels\r\n            }\r\n        },\r\n        storedDevices: {\r\n            get() {\r\n                return this.$store.state.storedDevices\r\n            }\r\n        },\r\n        targetChannelsLastEdited: {\r\n            get() {\r\n                if (this.storedTargetChannels.length > 0) {\r\n                    let lastEditDate = new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified)))).toLocaleDateString('en-GB');\r\n                    let lastEditTime = new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified)))).toLocaleTimeString('en-GB');\r\n                    return `${lastEditDate} ${lastEditTime}`\r\n                } else {\r\n                    return 'N/A'\r\n                }\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        // async selectedStrategy(newValue) {\r\n        //     console.log('TargetDeviceCard: watch: selectedStrategy', newValue)\r\n        //     await this.createHeaders()\r\n        //     await this.createItems()\r\n        // },\r\n        // async storedTargetCountries(newValue) {\r\n        //     console.log('TargetChannelCard: watch: storedTargetCountries', newValue)\r\n        //     await this.createHeaders()\r\n        //     await this.createItems()\r\n        // },\r\n        async storedTargetChannels(newValue) {\r\n            console.log('TargetDeviceCard: watch: storedTargetChannels', this.storedTargetChannels)\r\n            await this.createHeaders()\r\n            await this.createItems()\r\n        },\r\n    },\r\n    mounted() {\r\n        this.createItems()\r\n        this.createHeaders()\r\n    },\r\n    methods: {\r\n        async getTargetCountry(id) {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`api/v1/targetcountries/${id}`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.target_country = response.data\r\n        },\r\n        createItems() {\r\n            this.items = []\r\n            this.storedDevices.forEach(dev => {\r\n                let item = { ...dev }\r\n                item.target_channels = []\r\n                console.log('TargetDeviceCard: createItems: dev:', this.storedDevices)\r\n                this.storedTargetChannels.forEach(tch => {\r\n                    // console.log('TargetDeviceCard: createItems: tch:', tch)\r\n                    let found_target_device = this.storedTargetDevices.find(tdev => tdev.device === dev.id && tdev.target_channel === tch.id)\r\n                    if (found_target_device) {\r\n                        // console.log('TargetDeviceCard: createItems: found tdev:', found_target_device)\r\n                        item.target_channels.push({\r\n                            target_channel_id: tch.id,\r\n                            auto_allocate: found_target_device.auto_allocate,\r\n                            budget: found_target_device.budget\r\n                        })\r\n                    } else {\r\n                        // console.log('TargetDeviceCard: createItems: did not find dev/tch:', dev, tch)\r\n                        item.target_channels.push({\r\n                            target_channel_id: tch.id,\r\n                            auto_allocate: false,\r\n                            budget: ''\r\n                        })\r\n                    }\r\n                })\r\n                this.items.push(item)\r\n            })\r\n            console.log('TargetDeviceCard: createItems: items:', this.items)\r\n        },\r\n        async createHeaders() {\r\n            this.headerRow = []\r\n            let device = {\r\n                text: 'Device',\r\n                align: 'start',\r\n                sortable: false,\r\n                value: 'code',\r\n                class: \"black--text text-subtitle-1\",\r\n                width: \"50px\",\r\n            }\r\n            this.headerRow.push(device)\r\n            if (this.storedTargetChannels.length > 0) {\r\n                for (const target_channel of this.storedTargetChannels) {\r\n                    // Get the country details to display\r\n                    await this.getTargetCountry(target_channel.target_country)\r\n\r\n                    // Create a header for each country - where we'll place a checkbox \r\n                    var channel = {\r\n                        text: this.target_country.code + '/' + target_channel.code,\r\n                        align: 'start',\r\n                        sortable: false,\r\n                        value: \"auto_allocate\",\r\n                        class: \"black--text text-subtitle-1\",\r\n                        width: \"50px\",\r\n                    }\r\n                    this.headerRow.push(channel)\r\n\r\n                    // Create a header for each channel budget - where we'll place a budget field\r\n                    var budget = {\r\n                        text: 'Budget',\r\n                        align: 'center',\r\n                        sortable: false,\r\n                        value: \"budget\",\r\n                        class: \"black--text text-subtitle-1\",\r\n                        width: \"150px\",\r\n                    }\r\n                    this.headerRow.push(budget)\r\n                }\r\n            } else {\r\n                // Create a header indicating no channels have been selected\r\n                var no_countries_channels_selected = {\r\n                    text: 'No Target Countries/Channels Selected',\r\n                    align: 'start',\r\n                    sortable: false,\r\n                    value: \"auto_allocate\",\r\n                    class: \"black--text text-subtitle-1\",\r\n                    width: \"50px\",\r\n                }\r\n                this.headerRow.push(no_countries_channels_selected)\r\n            }\r\n        },\r\n        save() {\r\n            let newTargetDeviceObjects = []\r\n            this.items.map(i => {\r\n                // console.log(i)\r\n                i.target_channels.map(tch => {\r\n                    if (tch.auto_allocate) {\r\n                        let obj = {\r\n                            device: i.id,\r\n                            target_channel: tch.target_channel_id,\r\n                            code: i.code,\r\n                            name: i.name,\r\n                            auto_allocate: tch.auto_allocate,\r\n                            budget: tch.budget,\r\n                            budget_allocated: 0,\r\n                        }\r\n                        newTargetDeviceObjects.push(obj)\r\n                    }\r\n                })\r\n            })\r\n            // console.log('newTargetDeviceObjects:', newTargetDeviceObjects)\r\n\r\n            // Which countries has the user deleted?\r\n            var deleteTargetDeviceIds = this.diffArray(newTargetDeviceObjects)\r\n            // console.log('deleteTargetDeviceIds:', deleteTargetDeviceIds)\r\n            this.$emit('update-target-devices', newTargetDeviceObjects, deleteTargetDeviceIds)\r\n            this.locked = true\r\n        },\r\n        diffArray(newTargetDeviceObjects) {\r\n            function diff(newTargetDeviceObjects, current_tdev) {\r\n                for (let newItem of newTargetDeviceObjects) {\r\n                    if (newItem.target_channel_id === current_tdev.target_channel_id && newItem.device === current_tdev.device) {\r\n                        return true\r\n                    }\r\n                }\r\n                return false\r\n            }\r\n            let deleteTargetDeviceIds = []\r\n            this.storedTargetDevices.forEach(current_tdev => {\r\n                if (!diff(newTargetDeviceObjects, current_tdev)) {\r\n                    deleteTargetDeviceIds.push(current_tdev)\r\n                }\r\n            })\r\n            return deleteTargetDeviceIds\r\n        },\r\n        cancel() {\r\n            this.locked = true\r\n            this.createItems()\r\n        },\r\n        includeChange(item, itemIndex, country, countryIndex) {\r\n            !country.auto_allocate ? country.budget = '' : null\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\ntable>tbody>tr>td:nth-child(1),\r\ntable>thead>tr>th:nth-child(1) {\r\n    position: sticky !important;\r\n    position: -webkit-sticky !important;\r\n    left: 0;\r\n    z-index: 9998;\r\n    background: white;\r\n}\r\n\r\ntable>thead>tr>th:nth-child(1) {\r\n    z-index: 9999;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}