{"ast":null,"code":"import PhaseMenu from '@/components/phase/PhaseMenu';\nimport PhaseCard from '@/components/phase/PhaseCard';\nimport PhaseNewDialog from '@/components/dialogs/PhaseNewDialog';\nimport StrategyMenu from '@/components/strategy/StrategyMenu';\nimport StrategyCard from '@/components/strategy/StrategyCard';\nimport StrategyNewDialog from '@/components/dialogs/StrategyNewDialog';\nimport CountryMenu from '@/components/country/CountryMenu';\nimport CountryCard from '@/components/country/CountryCard';\nimport axios from 'axios';\nexport default {\n  name: 'PlanDetailView',\n  components: {\n    PhaseMenu,\n    PhaseCard,\n    PhaseNewDialog,\n    StrategyMenu,\n    StrategyCard,\n    StrategyNewDialog,\n    CountryMenu,\n    CountryCard\n  },\n  data() {\n    return {\n      showPhase: false,\n      showNewPhaseDialog: false,\n      showStrategy: false,\n      showNewStrategyDialog: false,\n      showLinkedCountries: false,\n      newPhase: {\n        name: '',\n        description: '',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        budget: 0,\n        budget_allocated: 0,\n        auto_allocate: false\n      },\n      initialStrategy: {\n        name: 'Strategy name',\n        description: 'Strategy description',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        budget: 0,\n        budget_allocated: 0,\n        auto_allocate: false\n      }\n    };\n  },\n  computed: {\n    newPhaseStrategyData: {\n      get() {\n        this.newPhase.strategies = [this.initialStrategy];\n        return this.newPhase;\n      }\n    },\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    },\n    selectedStrategyIndex: {\n      get() {\n        return this.$store.state.selectedStrategyData.index;\n      }\n    },\n    storedTargetCountries: {\n      get() {\n        return this.$store.state.storedTargetCountries;\n      }\n    },\n    planNumberStrategies: {\n      get() {\n        let count = 0;\n        this.selectedPlan.phases.forEach(phase => {\n          phase.strategies.forEach(strategy => {\n            count++;\n          });\n        });\n        return count;\n      }\n    },\n    storedCountries: {\n      get() {\n        return this.$store.state.storedCountries;\n      }\n    }\n  },\n  watch: {\n    // async selectedStrategy() {\n    //     console.log('PlanDetail:Watch selectedStrategy: strat has changed')\n    //     // Get the selected Strategy's target countries\n    //     await this.getTargetCountries(this.selectedPhase.strategies[0].id)\n    // },\n  },\n  mounted() {\n    this.getCountries();\n  },\n  methods: {\n    async openPhaseCard(phase, index) {\n      // await this.getTargetCountries(this.selectedPhase.strategies[0].id)\n      console.log('Plan Detail: open phase card:', this.$store.state.selectedPhaseData.phase);\n      // Show Phase Card\n      this.showPhase = true;\n\n      // Update selected Phase\n      const phaseDataPayload = {\n        phase: phase,\n        index: index\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Update selected Strategy\n      const strategyDataPayload = {\n        strategy: this.selectedPhase.strategies[0],\n        index: 0\n      };\n      this.$store.dispatch('selectStrategyData', strategyDataPayload);\n\n      // await this.getTargetCountries()\n    },\n\n    openStrategyCard(strategy, index) {\n      // Show Phase Card\n      this.showStrategy = true;\n\n      // Update selected Strategy\n      const strategyDataPayload = {\n        strategy: strategy,\n        index: index\n      };\n      this.$store.dispatch('selectStrategyData', strategyDataPayload);\n    },\n    async getCountries() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/countries/`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('storeCountries', response.data);\n    },\n    async getPlan() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/plan/${this.selectedPlan.id}`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('selectPlan', response.data);\n    },\n    copyPhase() {\n      let newPhase = this.selectedPhase;\n      newPhase.name = newPhase.name + ' - copy';\n      this.createPhase(newPhase);\n    },\n    async updatePhase() {\n      this.selectedPhase.plan = this.selectedPlan.id;\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/phase/${this.selectedPhase.id}/`, this.selectedPhase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBPhaseProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success');\n    },\n    async createPhase(createPhase) {\n      // Add current plan to new phase\n      createPhase.plan = this.selectedPlan.id;\n      var response = '';\n      try {\n        response = await axios.post(`api/v1/phases/`, createPhase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBPhaseProcessing(0, `Successfully created Phase \"${response.data.name}\"`);\n    },\n    async deletePhase() {\n      // A pLan must have at least one Phase\n      if (this.selectedPlan.phases.length === 1) {\n        // Display Snackbar message\n        this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text');\n      } else {\n        var response = '';\n        try {\n          response = await axios.delete(`api/v1/phase/${this.selectedPhase.id}/`);\n        } catch (error) {\n          console.log(error);\n        }\n        // Hide Phase Card after successsful delete\n        this.showPhase = false;\n\n        // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n        this.endDBPhaseProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`);\n      }\n    },\n    async endDBPhaseProcessing(phaseIndex, message, alertType = 'success') {\n      // Refresh updated Plan and save phase to store\n      await this.getPlan();\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[phaseIndex],\n        index: phaseIndex\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Display Snackbar message\n      this.showSnackBar(message, alertType);\n    },\n    copyStrategy() {\n      let newStrategy = this.selectedStrategy;\n      newStrategy.name = newStrategy.name + ' - copy';\n      this.createStrategy(newStrategy);\n    },\n    async updateStrategy() {\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/strategy/${this.selectedStrategy.id}/`, this.selectedStrategy);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n      this.endDBStrategyProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success');\n    },\n    async createStrategy(createStrategy) {\n      // Add current plan to new strategy\n      createStrategy.phase = this.selectedPhase.id;\n      var response = '';\n      try {\n        response = await axios.post(`api/v1/strategies/`, createStrategy);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n      this.endDBStrategyProcessing(0, `Successfully created Strategy \"${response.data.name}\"`);\n    },\n    async deleteStrategy() {\n      // A pLan must have at least one Strategy\n      if (this.selectedPhase.strategies.length === 1) {\n        // Display Snackbar message\n        this.showSnackBar(`Unable to delete Strategy \"${this.selectedStrategy.name}\" - a Phase must have at least 1 Strategy`, 'warning', 'black--text');\n      } else {\n        var response = '';\n        try {\n          response = await axios.delete(`api/v1/strategy/${this.selectedStrategy.id}/`);\n        } catch (error) {\n          console.log(error);\n        }\n\n        // Hide Strategy Card after successsful delete\n        this.showStrategy = false;\n\n        // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n        this.endDBStrategyProcessing(0, `Succesfully deleted Strategy \"${this.selectedStrategy.name}\"`);\n      }\n    },\n    async endDBStrategyProcessing(strategyIndex, message, alertType = 'success') {\n      // Refresh updated Plan and save strategy to store\n      await this.getPlan();\n\n      // Refresh Stored Phase data\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[this.selectedPhaseIndex],\n        index: this.selectedPhaseIndex\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Refresh Stored Strategy data\n      const strategyDataPayload = {\n        strategy: this.selectedPhase.strategies[strategyIndex],\n        index: strategyIndex\n      };\n      this.$store.dispatch('selectStrategyData', strategyDataPayload);\n\n      // Get the selected Strategy's target countries\n      // this.getTargetCountries()\n\n      // Display Snackbar message\n      this.showSnackBar(message, alertType);\n    },\n    async getTargetCountries() {\n      console.log('PlanDetail:getTargetCountries: Before:', this.storedTargetCountries);\n      var response = '';\n      try {\n        response = await axios.get(`api/v1/targetcountries`, {\n          params: {\n            strategy: this.selectedStrategy.id\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh Strategy's Stored  Target Country data \n      this.$store.dispatch('storeTargetCountries', response.data);\n      console.log('PlanDetail:getTargetCountries - response.data:', response.data);\n      console.log('PlanDetail:getTargetCountries storeTargetCountries: After:', this.storedTargetCountries);\n    },\n    async updateTargetCountries(targetCountries) {\n      console.log('targetCountries: ', targetCountries);\n      // Delete and Add target countries rather than faff around and try to add/delete/update them\n      await this.deleteTargetCountries(); // must await this before adding else get database lock error\n\n      for (const target_country of targetCountries) {\n        var response = '';\n        try {\n          response = await axios.post(`api/v1/targetcountries/`, target_country);\n        } catch (error) {\n          console.log(error);\n        }\n        console.log('PlanDetail:updateTargetCountries: resposne.data', response.data);\n      }\n\n      // this.endDBTargetCountriesProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success')\n    },\n\n    async deleteTargetCountries(targetCountries) {\n      var response = '';\n      try {\n        response = await axios.delete(`api/v1/targetcountries/`, {\n          params: {\n            strategy: this.selectedStrategy.id\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n      console.log('PlanDetail:deleteTargetCountries:', response.data);\n    },\n    endDBTargetCountriesProcessing() {},\n    showSnackBar(message, alertType, text_color = 'white--text') {\n      const payload = {\n        text: `${message}`,\n        alerttype: alertType,\n        contentclass: text_color\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    }\n  }\n};","map":{"version":3,"mappings":"AAyGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAhB;QACAiB;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAvB;QACAiB;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAE;IACAC;MACAC;QACA;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;MACA;IACA;IACAK;MACAL;QACA;MACA;IACA;IACAM;MACAN;QACA;MACA;IACA;IACAO;MACAP;QACA;QACA;UACAQ;YACAC;UACA;QACA;QACA;MACA;IACA;IACAC;MACAV;QACA;MACA;IACA;EACA;EACAW;IACA;IACA;IACA;IACA;IACA;EACA;EACAC;IACA;EACA;EACAC;IACA;MACA;MACAC;MACA;MACA;;MAEA;MACA;QAAAN;QAAAO;MAAA;MACA;;MAEA;MACA;QAAAC;QAAAD;MAAA;MACA;;MAEA;IACA;;IACAE;MACA;MACA;;MAEA;MACA;QAAAD;QAAAD;MAAA;MACA;IACA;IACA;MACA;MACA;QACAG;MACA,EACA;QACAJ;MACA;MACA;IACA;IACA;MACA;MACA;QACAI;MACA,EACA;QACAJ;MACA;MACA;IACA;IACAK;MACA;MACA7B;MACA;IACA;IACA;MACA;MAEA;MACA;QACA4B;MACA,EACA;QACAJ;MACA;MACA;MACA;IACA;IACA;MACA;MACAM;MACA;MACA;QACAF;MACA,EACA;QACAJ;MACA;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;UACAI;QACA,EACA;UACAJ;QACA;QACA;QACA;;QAEA;QACA;MACA;IACA;IACA;MACA;MACA;MACA;QAAAN;QAAAO;MAAA;MACA;;MAEA;MACA;IACA;IACAM;MACA;MACAC;MACA;IACA;IACA;MACA;MACA;QACAJ;MACA,EACA;QACAJ;MACA;MACA;MACA;IACA;IACA;MACA;MACAS;MACA;MACA;QACAL;MACA,EACA;QACAJ;MACA;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;UACAI;QACA,EACA;UACAJ;QACA;;QAEA;QACA;;QAEA;QACA;MACA;IACA;IACA;MACA;MACA;;MAEA;MACA;QAAAN;QAAAO;MAAA;MACA;;MAEA;MACA;QAAAC;QAAAD;MAAA;MACA;;MAEA;MACA;;MAEA;MACA;IACA;IACA;MACAD;MACA;MACA;QACAI;UACAM;YACAR;UACA;QACA;MACA,EACA;QACAF;MACA;MACA;MACA;MACAA;MACAA;IACA;IACA;MACAA;MACA;MACA;;MAEA;QACA;QACA;UACAI;QACA,EACA;UACAJ;QACA;QACAA;MACA;;MAEA;IACA;;IACA;MACA;MACA;QACAI;UACAM;YACAR;UACA;QACA;MACA,EACA;QACAF;MACA;MACAA;IACA;IACAW,kCAEA;IACAC;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;EACA;AACA","names":["name","components","PhaseMenu","PhaseCard","PhaseNewDialog","StrategyMenu","StrategyCard","StrategyNewDialog","CountryMenu","CountryCard","data","showPhase","showNewPhaseDialog","showStrategy","showNewStrategyDialog","showLinkedCountries","newPhase","description","start_date","end_date","budget","budget_allocated","auto_allocate","initialStrategy","computed","newPhaseStrategyData","get","selectedPlan","selectedPhase","selectedPhaseIndex","selectedStrategy","selectedStrategyIndex","storedTargetCountries","planNumberStrategies","phase","count","storedCountries","watch","mounted","methods","console","index","strategy","openStrategyCard","response","copyPhase","createPhase","copyStrategy","newStrategy","createStrategy","params","endDBTargetCountriesProcessing","showSnackBar","text","alerttype","contentclass"],"sourceRoot":"src/views","sources":["PlanDetailView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-row\r\n            class=\"ma-0 white d-flex align-center\">\r\n            <v-col\r\n                class=\"ma-0 pa-0 black--text\"\r\n                cols=\"auto\">\r\n                <v-tooltip\r\n                    bottom>\r\n                    <template v-slot:activator=\"{ on, attrs }\">\r\n                        <v-btn\r\n                            class=\"ml-2\"\r\n                            icon\r\n                            v-bind=\"attrs\"\r\n                            v-on=\"on\">\r\n                            <v-icon\r\n                                @click=\"$router.push('/')\"\r\n                                color=\"primary\"\r\n                                size=\"50\">mdi-clipboard-list-outline</v-icon>\r\n                        </v-btn>\r\n                    </template>\r\n                    <span>Plans home</span>\r\n                </v-tooltip>\r\n            </v-col>\r\n\r\n            <v-col class=\"pa-0 black--text\">\r\n\r\n                <v-row class=\"ml-5 mr-1 my-2 d-flex align-center\">\r\n                    {{ selectedPlan.name }}\r\n                    <v-spacer></v-spacer>\r\n                    <v-chip small outlined class=\"primary black mr-2\">\r\n                        <v-icon small class=\"black--text\">mdi-alpha-p-circle-outline</v-icon>\r\n                        {{ selectedPlan.phases.length }}\r\n                    </v-chip>\r\n                    <v-chip small outlined class=\" primary ml-1 black mr-2\">\r\n                        <v-icon small class=\"black--text\">mdi-alpha-s-circle-outline</v-icon>\r\n                        {{ planNumberStrategies }}\r\n                    </v-chip>\r\n                    <div class=\"text-caption\">\r\n                        <span>Last edit:{{ new Date(selectedPlan.date_modified).toLocaleDateString((\"en-GB\")) }}</span>\r\n                        <span> {{ new Date(selectedPlan.date_modified).toLocaleTimeString((\"en-GB\")) }}</span>\r\n                    </div>\r\n                </v-row>\r\n\r\n                <v-row class=\"ml-5 mt-3\">{{ selectedPhase.name }} : {{ selectedStrategy.name }}</v-row>\r\n\r\n                <v-row class=\"mt-3 mb-0 mx-0\">\r\n                    <v-col cols=\"auto\" class=\"pa-0\">\r\n                        <v-toolbar dense flat>\r\n                            <PhaseMenu\r\n                                @open-phase-card='openPhaseCard'\r\n                                @open-createphase-dialog=\"showNewPhaseDialog = true\" />\r\n                        </v-toolbar>\r\n                    </v-col>\r\n<v-col cols=\"auto\" class=\"pa-0\">\r\n    <v-toolbar dense flat>\r\n        <StrategyMenu\r\n            @open-strategy-card='openStrategyCard'\r\n            @open-createstrategy-dialog=\"showNewStrategyDialog = true\" />\r\n    </v-toolbar>\r\n</v-col>\r\n<v-col cols=\"auto\" class=\"pa-0\">\r\n    <v-toolbar dense flat>\r\n        <CountryMenu\r\n            @open-country-card='(showLinkedCountries = !showLinkedCountries)'\r\n            @hide=\"(showLinkedCountries = false)\" />\r\n    </v-toolbar>\r\n</v-col>\r\n</v-row>\r\n\r\n</v-col>\r\n</v-row>\r\n\r\n<v-divider></v-divider>\r\n\r\n<PhaseCard\r\n    v-if=\"showPhase\"\r\n    @hide=\"(showPhase = false)\"\r\n    @copy=\"copyPhase\"\r\n    @update=\"updatePhase\"\r\n    @delete=\"deletePhase\" />\r\n<PhaseNewDialog\r\n    v-model=\"showNewPhaseDialog\"\r\n    :phase=\"newPhaseStrategyData\"\r\n    @create-phase=\"createPhase\" />\r\n\r\n<StrategyCard\r\n    v-if=\"showStrategy\"\r\n    @hide=\"(showStrategy = false)\"\r\n    @copy=\"copyStrategy\"\r\n    @update=\"updateStrategy\"\r\n    @delete=\"deleteStrategy\" />\r\n<StrategyNewDialog\r\n    v-model=\"showNewStrategyDialog\"\r\n    :strategy=\"initialStrategy\"\r\n    @create-strategy=\"createStrategy\" />\r\n\r\n<CountryCard\r\n    v-if=\"showLinkedCountries\"\r\n    @hide=\"(showLinkedCountries = false)\"\r\n    @update-target-countries=\"updateTargetCountries\" />\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport PhaseMenu from '@/components/phase/PhaseMenu'\r\nimport PhaseCard from '@/components/phase/PhaseCard'\r\nimport PhaseNewDialog from '@/components/dialogs/PhaseNewDialog'\r\nimport StrategyMenu from '@/components/strategy/StrategyMenu'\r\nimport StrategyCard from '@/components/strategy/StrategyCard'\r\nimport StrategyNewDialog from '@/components/dialogs/StrategyNewDialog'\r\nimport CountryMenu from '@/components/country/CountryMenu'\r\nimport CountryCard from '@/components/country/CountryCard'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'PlanDetailView',\r\n    components: {\r\n        PhaseMenu,\r\n        PhaseCard,\r\n        PhaseNewDialog,\r\n        StrategyMenu,\r\n        StrategyCard,\r\n        StrategyNewDialog,\r\n        CountryMenu,\r\n        CountryCard,\r\n    },\r\n    data() {\r\n        return {\r\n            showPhase: false,\r\n            showNewPhaseDialog: false,\r\n            showStrategy: false,\r\n            showNewStrategyDialog: false,\r\n            showLinkedCountries: false,\r\n            newPhase: {\r\n                name: '',\r\n                description: '',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n                budget: 0,\r\n                budget_allocated: 0,\r\n                auto_allocate: false,\r\n            },\r\n            initialStrategy: {\r\n                name: 'Strategy name',\r\n                description: 'Strategy description',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n                budget: 0,\r\n                budget_allocated: 0,\r\n                auto_allocate: false,\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        newPhaseStrategyData: {\r\n            get() {\r\n                this.newPhase.strategies = [this.initialStrategy]\r\n                return this.newPhase\r\n            }\r\n        },\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedPhaseIndex: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.index\r\n            }\r\n        },\r\n        selectedStrategy: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.strategy\r\n            }\r\n        },\r\n        selectedStrategyIndex: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.index\r\n            }\r\n        },\r\n        storedTargetCountries: {\r\n            get() {\r\n                return this.$store.state.storedTargetCountries\r\n            }\r\n        },\r\n        planNumberStrategies: {\r\n            get() {\r\n                let count = 0;\r\n                this.selectedPlan.phases.forEach((phase) => {\r\n                    phase.strategies.forEach((strategy) => {\r\n                        count++\r\n                    });\r\n                })\r\n                return count;\r\n            }\r\n        },\r\n        storedCountries: {\r\n            get() {\r\n                return this.$store.state.storedCountries\r\n            }\r\n        },\r\n    },\r\n    watch: {\r\n        // async selectedStrategy() {\r\n        //     console.log('PlanDetail:Watch selectedStrategy: strat has changed')\r\n        //     // Get the selected Strategy's target countries\r\n        //     await this.getTargetCountries(this.selectedPhase.strategies[0].id)\r\n        // },\r\n    },\r\n    mounted() {\r\n        this.getCountries()\r\n    },\r\n    methods: {\r\n        async openPhaseCard(phase, index) {\r\n            // await this.getTargetCountries(this.selectedPhase.strategies[0].id)\r\n            console.log('Plan Detail: open phase card:', this.$store.state.selectedPhaseData.phase)\r\n            // Show Phase Card\r\n            this.showPhase = true\r\n\r\n            // Update selected Phase\r\n            const phaseDataPayload = { phase: phase, index: index }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Update selected Strategy\r\n            const strategyDataPayload = { strategy: this.selectedPhase.strategies[0], index: 0 }\r\n            this.$store.dispatch('selectStrategyData', strategyDataPayload)\r\n\r\n            // await this.getTargetCountries()\r\n        },\r\n        openStrategyCard(strategy, index) {\r\n            // Show Phase Card\r\n            this.showStrategy = true\r\n\r\n            // Update selected Strategy\r\n            const strategyDataPayload = { strategy: strategy, index: index }\r\n            this.$store.dispatch('selectStrategyData', strategyDataPayload)\r\n        },\r\n        async getCountries() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/countries/`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('storeCountries', response.data)\r\n        },\r\n        async getPlan() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/plan/${this.selectedPlan.id}`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('selectPlan', response.data)\r\n        },\r\n        copyPhase() {\r\n            let newPhase = this.selectedPhase\r\n            newPhase.name = newPhase.name + ' - copy'\r\n            this.createPhase(newPhase)\r\n        },\r\n        async updatePhase() {\r\n            this.selectedPhase.plan = this.selectedPlan.id\r\n\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/phase/${this.selectedPhase.id}/`, this.selectedPhase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBPhaseProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success')\r\n        },\r\n        async createPhase(createPhase) {\r\n            // Add current plan to new phase\r\n            createPhase.plan = this.selectedPlan.id\r\n            var response = ''\r\n            try {\r\n                response = await axios.post(`api/v1/phases/`, createPhase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBPhaseProcessing(0, `Successfully created Phase \"${response.data.name}\"`)\r\n        },\r\n        async deletePhase() {\r\n            // A pLan must have at least one Phase\r\n            if (this.selectedPlan.phases.length === 1) {\r\n                // Display Snackbar message\r\n                this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text')\r\n            } else {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.delete(`api/v1/phase/${this.selectedPhase.id}/`)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n                // Hide Phase Card after successsful delete\r\n                this.showPhase = false\r\n\r\n                // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n                this.endDBPhaseProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`)\r\n            }\r\n        },\r\n        async endDBPhaseProcessing(phaseIndex, message, alertType = 'success') {\r\n            // Refresh updated Plan and save phase to store\r\n            await this.getPlan()\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[phaseIndex], index: phaseIndex }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar(message, alertType)\r\n        },\r\n        copyStrategy() {\r\n            let newStrategy = this.selectedStrategy\r\n            newStrategy.name = newStrategy.name + ' - copy'\r\n            this.createStrategy(newStrategy)\r\n        },\r\n        async updateStrategy() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/strategy/${this.selectedStrategy.id}/`, this.selectedStrategy)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n            this.endDBStrategyProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success')\r\n        },\r\n        async createStrategy(createStrategy) {\r\n            // Add current plan to new strategy\r\n            createStrategy.phase = this.selectedPhase.id\r\n            var response = ''\r\n            try {\r\n                response = await axios.post(`api/v1/strategies/`, createStrategy)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n            this.endDBStrategyProcessing(0, `Successfully created Strategy \"${response.data.name}\"`)\r\n        },\r\n        async deleteStrategy() {\r\n            // A pLan must have at least one Strategy\r\n            if (this.selectedPhase.strategies.length === 1) {\r\n                // Display Snackbar message\r\n                this.showSnackBar(`Unable to delete Strategy \"${this.selectedStrategy.name}\" - a Phase must have at least 1 Strategy`, 'warning', 'black--text')\r\n            } else {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.delete(`api/v1/strategy/${this.selectedStrategy.id}/`)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n\r\n                // Hide Strategy Card after successsful delete\r\n                this.showStrategy = false\r\n\r\n                // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n                this.endDBStrategyProcessing(0, `Succesfully deleted Strategy \"${this.selectedStrategy.name}\"`)\r\n            }\r\n        },\r\n        async endDBStrategyProcessing(strategyIndex, message, alertType = 'success') {\r\n            // Refresh updated Plan and save strategy to store\r\n            await this.getPlan()\r\n\r\n            // Refresh Stored Phase data\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[this.selectedPhaseIndex], index: this.selectedPhaseIndex }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Refresh Stored Strategy data\r\n            const strategyDataPayload = { strategy: this.selectedPhase.strategies[strategyIndex], index: strategyIndex }\r\n            this.$store.dispatch('selectStrategyData', strategyDataPayload)\r\n\r\n            // Get the selected Strategy's target countries\r\n            // this.getTargetCountries()\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar(message, alertType)\r\n        },\r\n        async getTargetCountries() {\r\n            console.log('PlanDetail:getTargetCountries: Before:', this.storedTargetCountries)\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`api/v1/targetcountries`, {\r\n                    params: {\r\n                        strategy: this.selectedStrategy.id,\r\n                    }\r\n                })\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh Strategy's Stored  Target Country data \r\n            this.$store.dispatch('storeTargetCountries', response.data)\r\n            console.log('PlanDetail:getTargetCountries - response.data:', response.data)\r\n            console.log('PlanDetail:getTargetCountries storeTargetCountries: After:', this.storedTargetCountries)\r\n        },\r\n        async updateTargetCountries(targetCountries) {\r\n            console.log('targetCountries: ', targetCountries)\r\n            // Delete and Add target countries rather than faff around and try to add/delete/update them\r\n            await this.deleteTargetCountries() // must await this before adding else get database lock error\r\n\r\n            for (const target_country of targetCountries) {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.post(`api/v1/targetcountries/`, target_country)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n                console.log('PlanDetail:updateTargetCountries: resposne.data', response.data)\r\n            }\r\n            \r\n            // this.endDBTargetCountriesProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success')\r\n        },\r\n        async deleteTargetCountries(targetCountries) {\r\n            var response = ''\r\n            try {\r\n                    response = await axios.delete(`api/v1/targetcountries/`, {\r\n                    params: {\r\n                        strategy: this.selectedStrategy.id,\r\n                        }\r\n                    })\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n            }\r\n            console.log('PlanDetail:deleteTargetCountries:', response.data)\r\n        },\r\n        endDBTargetCountriesProcessing(){\r\n\r\n        },\r\n        showSnackBar(message, alertType, text_color = 'white--text') {\r\n            const payload = { text: `${message}`, alerttype: alertType, contentclass: text_color }\r\n            this.$store.dispatch('showSnackBar', payload)\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style>\r\ndiv.v-toolbar__content {\r\n    padding: 0px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}