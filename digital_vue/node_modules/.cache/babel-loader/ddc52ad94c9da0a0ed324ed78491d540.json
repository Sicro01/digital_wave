{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      items: [],\n      selection: [],\n      newitems: [{\n        id: 1,\n        name: 'Plan',\n        other: 2,\n        locked: true,\n        children: [{\n          id: 2,\n          name: 'Phase 1',\n          other: 8\n        }, {\n          id: 3,\n          name: 'Phase 2',\n          other: 9\n        }, {\n          id: 4,\n          name: 'Phase 3',\n          other: 10\n        }]\n      }]\n    };\n  },\n  computed: {\n    plans: {\n      get() {\n        return this.$store.state.plans;\n      }\n    },\n    phases: {\n      get() {\n        return this.$store.state.phases;\n      }\n    },\n    strategies: {\n      get() {\n        return this.$store.state.strategies;\n      }\n    }\n    // items: {\n    //     get() {\n    //         return this.buildTreeData()\n    //     }\n    // }\n  },\n\n  // watch: {\n  //     selection(to, from) {\n  //         console.log('to:', to)\n  //         console.log('from: ', from)\n  //         console.log(this.selection)\n  //     },\n  // },\n  async mounted() {\n    await this.getPlans();\n    await this.buildTreeData();\n  },\n  methods: {\n    onUpdate(selection) {\n      console.log('onUpdate: selection: ', selection);\n    },\n    buildTreeData() {\n      var items = [];\n      var index = 1;\n      var item = {};\n      console.log('1');\n      this.plans.forEach(plan => {\n        item = {\n          id: index,\n          name: plan.name,\n          database_id: plan.id,\n          node_type: 'plan',\n          children: []\n        };\n        plan.phases.forEach(phase => {\n          index += 1;\n          let this_phase = {\n            id: index,\n            name: phase.name,\n            database_id: phase.id,\n            node_type: 'phase'\n          };\n          item.children.push(this_phase);\n        }); // Phases\n      }); // Plans\n      this.items.push(item);\n      console.log('buildTreeData: ', this.items);\n      console.log('buildTreeData: ', this.newitems);\n      return items;\n    },\n    // BuildTree\n    async getPlans() {\n      var response = '';\n      try {\n        response = await axios.get('api/v1/plans/');\n      } catch (error) {\n        console.log(error);\n      }\n      if (response.data.length > 0) {\n        this.$store.dispatch('acquirePlans', response.data);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AA2BA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC,WACA;QACAC;QACAC;QACAC;QACAC;QACAC,WACA;UAAAJ;UAAAC;UAAAC;QAAA,GACA;UAAAF;UAAAC;UAAAC;QAAA,GACA;UAAAF;UAAAC;UAAAC;QAAA;MAEA;IAEA;EACA;EACAG;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACA;IACA;EACA;EACAG;IACAC;MACAC;IACA;IACAC;MACA;MACA;MACA;MACAD;MACA;QACAE;UAAAd;UAAAC;UAAAc;UAAAC;UAAAZ;QAAA;QACAa;UACAC;UACA;YAAAlB;YAAAC;YAAAc;YAAAC;UAAA;UACAF;QACA;MACA;MACA;MACAF;MACAA;MACA;IACA;IAAA;IACA;MACA;MACA;QACAO;MACA,EACA;QACAP;MACA;MACA;QACA;MACA;IACA;EACA;AACA","names":["data","items","selection","newitems","id","name","other","locked","children","computed","plans","get","phases","strategies","methods","onUpdate","console","buildTreeData","item","database_id","node_type","plan","index","response"],"sourceRoot":"src/views","sources":["NewHomeView.vue"],"sourcesContent":["<template >\r\n    <v-container fluid class=\" fill\">\r\n        <v-row>\r\n            <v-col cols=\"6\" class=\" red\">\r\n            </v-col>\r\n        </v-row>\r\n        <v-divider vertical></v-divider>\r\n        <v-row>\r\n            <v-col cols=\"6\" class=\" blue\">\r\n            </v-col>\r\n        </v-row>\r\n\r\n    </v-container>\r\n</template>\r\n<!-- <v-treeview\r\n                dense\r\n                v-model=\"selection\"\r\n                color=\"secondary\"\r\n                selected-color=\"green\"\r\n                activatable\r\n                hoverable\r\n                :items=\"items\">\r\n                <template v-slot:label=\"{ item }\">\r\n                    <a @click=\"onUpdate(item)\">{{ item.name }}</a>\r\n                </template>\r\n            </v-treeview> -->\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            items: [],\r\n            selection: [],\r\n            newitems: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Plan',\r\n                    other: 2,\r\n                    locked: true,\r\n                    children: [\r\n                        { id: 2, name: 'Phase 1', other: 8 },\r\n                        { id: 3, name: 'Phase 2', other: 9 },\r\n                        { id: 4, name: 'Phase 3', other: 10 },\r\n                    ],\r\n                },\r\n            ],\r\n        }\r\n    },\r\n    computed: {\r\n        plans: {\r\n            get() {\r\n                return this.$store.state.plans\r\n            }\r\n        },\r\n        phases: {\r\n            get() {\r\n                return this.$store.state.phases\r\n            }\r\n        },\r\n        strategies: {\r\n            get() {\r\n                return this.$store.state.strategies\r\n            }\r\n        },\r\n        // items: {\r\n        //     get() {\r\n        //         return this.buildTreeData()\r\n        //     }\r\n        // }\r\n    },\r\n    // watch: {\r\n    //     selection(to, from) {\r\n    //         console.log('to:', to)\r\n    //         console.log('from: ', from)\r\n    //         console.log(this.selection)\r\n    //     },\r\n    // },\r\n    async mounted() {\r\n        await this.getPlans()\r\n        await this.buildTreeData()\r\n    },\r\n    methods: {\r\n        onUpdate(selection) {\r\n            console.log('onUpdate: selection: ', selection)\r\n        },\r\n        buildTreeData() {\r\n            var items = []\r\n            var index = 1\r\n            var item = {}\r\n            console.log('1')\r\n            this.plans.forEach((plan) => {\r\n                item = { id: index, name: plan.name, database_id: plan.id, node_type: 'plan', children: [] }\r\n                plan.phases.forEach((phase) => {\r\n                    index += 1\r\n                    let this_phase = { id: index, name: phase.name, database_id: phase.id, node_type: 'phase' }\r\n                    item.children.push(this_phase)\r\n                }); // Phases\r\n            }); // Plans\r\n            this.items.push(item)\r\n            console.log('buildTreeData: ', this.items)\r\n            console.log('buildTreeData: ', this.newitems)\r\n            return items\r\n        }, // BuildTree\r\n        async getPlans() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get('api/v1/plans/')\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            if (response.data.length > 0) {\r\n                this.$store.dispatch('acquirePlans', response.data)\r\n            }\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.fill {\r\n    min-height: 85vh;\r\n}\r\n</style>\r\n<!-- this.$store.dispatch('getStrategies', phase)\r\n                    this.$store.strategies.forEach((strategy) => {\r\n                        this.$store.dispatch('getTargetCountries', strategy)\r\n                        this.$store.targetCountries.forEach((targetCountry) => {\r\n                            this.$store.dispatch('getTargetChannels', targetCountry)\r\n                            this.$store.targetChannels.forEach((targetChannel) => {\r\n                                this.$store.dispatch('getTargetDevices', targetChannel)\r\n\r\n                            }) // TargetChannels\r\n\r\n                        }) // TargetCountries\r\n\r\n                    }) // Strategies -->"]},"metadata":{},"sourceType":"module"}