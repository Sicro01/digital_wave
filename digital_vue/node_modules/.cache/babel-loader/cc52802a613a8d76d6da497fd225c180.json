{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PlanCard from '@/components/plan/PlanCard';\nimport PlanEditDialog from '@/components/dialogs/PlanEditDialog';\nimport axios from 'axios';\nimport store from '@/store';\nexport default {\n  name: 'HomeView',\n  components: {\n    PlanCard,\n    PlanEditDialog\n  },\n  data() {\n    return {\n      plans: [],\n      open_dialog: false,\n      newPlan: {\n        id: -1,\n        name: '',\n        description: ''\n      },\n      editPlan: {\n        id: 0,\n        name: '',\n        description: ''\n      },\n      initialPhase: {\n        name: 'Phase name',\n        description: 'Phase description',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10)\n      }\n    };\n  },\n  mounted() {\n    this.getPlans();\n    document.title = 'Home | Digital Wave';\n  },\n  methods: {\n    async getPlans() {\n      await axios.get('api/v1/plans/').then(response => {\n        this.plans = response.data;\n        console.log('plan data:', this.plans);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    async updatePlan(updatePlan, newPhaseMessage) {\n      var response = '';\n      var plan = {\n        name: updatePlan.name,\n        description: updatePlan.description\n      };\n      try {\n        response = await axios.patch(`api/v1/plan/${updatePlan.id}/`, plan);\n      } catch (error) {\n        console.log(error);\n      }\n      this.getPlans();\n      const payload = {\n        text: `Successfully updated ${updatePlan.name} ${newPhaseMessage}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n      return response.data;\n    },\n    async createPlan(createPlan) {\n      var newPlan = {};\n      newPlan = {\n        name: createPlan.name,\n        description: createPlan.description,\n        phases: [this.initialPhase]\n      };\n      await axios.post(`api/v1/plans/`, newPlan).catch(error => {\n        console.log(error);\n      });\n      this.getPlans();\n      const payload = {\n        text: `Successfully created ${newPlan.name} - Initial Phase Added`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    async deletePlan(deletePlan) {\n      await axios.delete(`api/v1/plans/${deletePlan.id}/`).catch(error => {\n        console.log(error);\n      });\n      this.getPlans();\n      const payload = {\n        text: `Successfully deleted ${deletePlan.name}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    openEditPlanDialog(editPlan) {\n      this.editPlan = editPlan;\n      this.open_dialog = true;\n    },\n    openNewPlanDialog() {\n      this.editPlan = this.newPlan;\n      this.open_dialog = true;\n    },\n    checkPlanPhases(plan) {\n      // If it's new plan OR user has deleted all phases then create a dummy phase and update the plan\n      if (plan.phases.length === 0) {\n        plan.phases.push(this.initialPhase);\n        plan = this.updatePlan(plan, '- initial Phase added to Plan');\n      }\n      this.viewPlanDetails(plan);\n    },\n    viewPlanDetails(plan) {\n      // Save the selected plan in the Store\n      this.$store.dispatch('selectPlan', plan);\n      const phaseDataPayload = {\n        phase: plan.phases[0],\n        index: 0\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n      document.title = this.$store.state.selectedPlan.name + ' | Digital Wave';\n      this.$router.push(this.$store.state.selectedPlan.phases[0].get_absolute_url);\n    }\n  }\n};","map":{"version":3,"mappings":";AAgDA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;QACAC;QACAR;QACAS;MACA;MACAC;QACAF;QACAR;QACAS;MACA;MACAE;QACAX;QACAS;QACAG;QACAC;MACA;IACA;EACA;EACAC;IACA;IACAC;EACA;EACAC;IACA;MACA,YACAC,qBACAC;QACA;QACAC;MACA,GACAC;QACAD;MACA;IACA;IACA;MACA;MACA;QAAAnB;QAAAS;MAAA;MACA;QACAY;MACA,EACA;QACAF;MACA;MACA;MACA;QAAAG;QAAAC;QAAAC;MAAA;MACA;MACA;IACA;IACA;MACA;MACAjB;QACAP;QACAS;QACAgB;MACA;MACA,YACAC,+BACAN;QACAD;MACA;MACA;MACA;QAAAG;QAAAC;QAAAC;MAAA;MACA;IACA;IACA;MACA,YACAG,yCACAP;QACAD;MACA;MACA;MACA;QAAAG;QAAAC;QAAAC;MAAA;MACA;IACA;IACAI;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;QACAC;QACAA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;QAAAC;QAAAC;MAAA;MACA;MACAnB;MACA;IACA;EACA;AACA","names":["name","components","PlanCard","PlanEditDialog","data","plans","open_dialog","newPlan","id","description","editPlan","initialPhase","start_date","end_date","mounted","document","methods","get","then","console","catch","response","text","alerttype","contentclass","phases","post","delete","openEditPlanDialog","openNewPlanDialog","checkPlanPhases","plan","viewPlanDetails","phase","index"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n    <div>\n        <v-row\n            class=\"mt-2 primary--text font-weight-black text-h3\">\n            <v-col md=\"6\" offset=\"3\" class=\"text-center\">\n                <span>Plans</span>\n            </v-col>\n            <v-spacer></v-spacer>\n            <v-col cols=\"2\" class=\"text-right\">\n                <v-btn\n                    class=\"mr-4 primary rounded-0 text-capitalize text-body-1\"\n                    dark\n                    @click=\"openNewPlanDialog\"\n                    depressed>\n                    <v-icon small class=\"mr-2\">mdi-plus</v-icon>\n                    New Plan\n                </v-btn>\n            </v-col>\n        </v-row>\n        <br />\n        <br />\n        <br />\n        <v-row class=\"mb-0 mx-4\">\n            <v-col\n                v-for=\"(plan, index) in plans\" :key=\"plan.id\"\n                lg=\"3\"\n                md=\"4\"\n                sm=12\n                class=\"px-3 py-0\">\n    \n                <PlanCard\n                    :plan=\"plan\"\n                    @open-dialog=\"openEditPlanDialog(plan)\"\n                    @view-details=\"checkPlanPhases(plan)\" />\n    \n            </v-col>\n        </v-row>\n    \n        <PlanEditDialog\n            v-model=\"open_dialog\"\n            :plan=\"editPlan\"\n            @create-plan=\"createPlan\"\n            @update-plan=\"updatePlan\"\n            @delete-plan=\"deletePlan\" />\n    \n    </div>\n</template>\n<script>\nimport PlanCard from '@/components/plan/PlanCard'\nimport PlanEditDialog from '@/components/dialogs/PlanEditDialog'\nimport axios from 'axios'\nimport store from '@/store'\n\nexport default {\n    name: 'HomeView',\n    components: {\n        PlanCard,\n        PlanEditDialog,\n    },\n    data() {\n        return {\n            plans: [],\n            open_dialog: false,\n            newPlan: {\n                id: -1,\n                name: '',\n                description: '',\n            },\n            editPlan: {\n                id: 0,\n                name: '',\n                description: '',\n            },\n            initialPhase: {\n                name: 'Phase name',\n                description: 'Phase description',\n                start_date: new Date().toISOString().substring(0, 10),\n                end_date: new Date().toISOString().substring(0, 10),\n            }\n        }\n    },\n    mounted() {\n        this.getPlans()\n        document.title = 'Home | Digital Wave'\n    },\n    methods: {\n        async getPlans() {\n            await axios\n                .get('api/v1/plans/')\n                .then(response => {\n                    this.plans = response.data\n                    console.log('plan data:', this.plans)\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        async updatePlan(updatePlan, newPhaseMessage) {\n            var response = ''\n            var plan = { name: updatePlan.name, description: updatePlan.description }\n            try {\n                response = await axios.patch(`api/v1/plan/${updatePlan.id}/`, plan)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.getPlans()\n            const payload = { text: `Successfully updated ${updatePlan.name} ${newPhaseMessage}`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n            return response.data\n        },\n        async createPlan(createPlan) {\n            var newPlan = {}\n            newPlan = {\n                name: createPlan.name,\n                description: createPlan.description,\n                phases: [this.initialPhase]\n            }\n            await axios\n                .post(`api/v1/plans/`, newPlan)\n                .catch(error => {\n                    console.log(error)\n                })\n            this.getPlans()\n            const payload = { text: `Successfully created ${newPlan.name} - Initial Phase Added`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n        },\n        async deletePlan(deletePlan) {\n            await axios\n                .delete(`api/v1/plans/${deletePlan.id}/`)\n                .catch(error => {\n                    console.log(error)\n                })\n            this.getPlans()\n            const payload = { text: `Successfully deleted ${deletePlan.name}`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n        },\n        openEditPlanDialog(editPlan) {\n            this.editPlan = editPlan\n            this.open_dialog = true\n        },\n        openNewPlanDialog() {\n            this.editPlan = this.newPlan\n            this.open_dialog = true\n        },\n        checkPlanPhases(plan) {\n            // If it's new plan OR user has deleted all phases then create a dummy phase and update the plan\n            if (plan.phases.length === 0) {\n                plan.phases.push(this.initialPhase)\n                plan = this.updatePlan(plan, '- initial Phase added to Plan')\n            }\n            this.viewPlanDetails(plan)\n        },\n        viewPlanDetails(plan) {\n            // Save the selected plan in the Store\n            this.$store.dispatch('selectPlan', plan)\n            const phaseDataPayload = { phase: plan.phases[0], index: 0 }\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\n            document.title = this.$store.state.selectedPlan.name + ' | Digital Wave'\n            this.$router.push(this.$store.state.selectedPlan.phases[0].get_absolute_url)\n        },\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}