{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CardIcons from '@/components/shared/CardIcons';\nimport axios from 'axios';\nimport ConfirmDialog from '../dialogs/ConfirmDialog.vue';\nexport default {\n  name: 'CountryCard',\n  components: {\n    CardIcons\n  },\n  data() {\n    return {\n      headers: [],\n      items: [],\n      itemLabels: [],\n      budgetValues: [],\n      countryChannelData: [],\n      locked: true,\n      valid: false,\n      rules: {\n        required: v => !!v || \"Required\",\n        notEmpty: v => v.toString().length > 0 || \"Budget should be between 0 and 10,000,000\",\n        inRange: v => Number.isInteger(Number(v)) && v >= 0 && v <= 10000000 || \"Budget should be between 0 and 10,000,000\"\n      }\n    };\n  },\n  computed: {\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    },\n    storedTargetCountries: {\n      get() {\n        return this.$store.state.storedTargetCountries;\n      }\n    },\n    storedTargetChannels: {\n      get() {\n        return this.$store.state.storedTargetChannels;\n      }\n    },\n    storedCountries: {\n      get() {\n        return this.$store.state.storedCountries;\n      }\n    },\n    storedChannels: {\n      get() {\n        return this.$store.state.storedChannels;\n      }\n    },\n    targetChannelsLastEdited: {\n      get() {\n        if (this.storedTargetChannels.length > 0) {\n          let lastEditDate = new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified)))).toLocaleDateString('en-GB');\n          let lastEditTime = new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified)))).toLocaleTimeString('en-GB');\n          return `${lastEditDate} ${lastEditTime}`;\n        } else {\n          return 'N/A';\n        }\n      }\n    }\n  },\n  watch: {\n    async storedTargetCountries(newValue) {\n      console.log('TargetChannelCard: watch: storedTargetCountries', this.storedTargetCountries);\n      await this.createHeaders();\n      await this.createItemLabels();\n      await this.createDataItems();\n    }\n  },\n  mounted() {\n    this.createHeaders();\n    this.createItemLabels();\n    this.createDataItems();\n    this.newItems1();\n  },\n  methods: {\n    createHeaders() {\n      this.headers = [];\n      // Header 1: Create Channel Header\n      var channelCodeHeader = {\n        text: 'Channel',\n        align: 'center',\n        sortable: false,\n        value: 'channel_code',\n        class: \"black--text text-subtitle-1\",\n        width: \"50px\"\n      };\n      this.headers.push(channelCodeHeader);\n\n      // Headers 2 to nnn (2 header per country: \n      var index = 0;\n      this.storedTargetCountries.forEach(country => {\n        // Create a header for each country - where we'll place a checkbox \n        var countryHeader = {\n          text: country.code,\n          align: 'start',\n          sortable: false,\n          value: 'checked' + country.code + index,\n          class: \"black--text text-subtitle-1\",\n          width: \"50px\"\n        };\n        this.headers.push(countryHeader);\n\n        // Create a header for each country budget - where we'll place a budget field\n        var budgetHeader = {\n          text: 'Budget',\n          align: 'center',\n          sortable: false,\n          value: \"budget\" + country.code + index,\n          class: \"black--text text-subtitle-1\",\n          width: \"150px\"\n        };\n        this.headers.push(budgetHeader);\n\n        // Increment the count used to make the value field name unique\n        // This must match the field name in the actual table row\n        index += 1;\n      });\n      console.log('TargetChannelCard:createHeaders:headers: ', this.headers);\n    },\n    createItemLabels() {\n      this.itemLabels = [];\n      // Create a label for each country and each country budget\n      // Used to unqiuely identify a country per channel - and the set the value of the checkbox when\n      // we create the data items\n      var index = 0;\n      // console.log(this.storedTargetCountries)\n      this.storedTargetCountries.forEach(country => {\n        var checkBoxBudgetLabel = {\n          checked: 'checked' + country.code + index,\n          budget: 'budget' + country.code + index,\n          country_id: 'country_id' + country.code,\n          country_code: 'country_code' + country.code,\n          country_name: 'country_name' + country.code\n        };\n        this.itemLabels.push(checkBoxBudgetLabel);\n\n        // Increment the count used to make the value field name unique\n        // This must match the field name in the header row\n        index += 1;\n      });\n      console.log('TargetChannelCard:createItemLabels:itemLabels: ', this.itemLabels);\n    },\n    createDataItems() {\n      // Table Data\n      // Cycle through each country for each channel - creating:\n      // Value 1 - channel\n      // Value 2 & 3 per country (checkbox - with the checkboxValue label e.g. checkedDE01, checkedGB01) amd budget\n      // console.log('TargetChannelCard:createDataItems:this.storedChannels: ', this.storedChannels)\n      this.items = [];\n      this.storedChannels.forEach(channel => {\n        // console.log(this.storedChannels)\n        // Value 1: Channel\n        var item = {\n          'channel_id': channel.id,\n          'channel_code': channel.code,\n          'channel_name': channel.name\n        };\n        // Values 2 to nnn: Country check box AND budget field for each channel / country combination\n        var index = 0;\n        this.storedTargetCountries.forEach(country => {\n          // Set Country Id\n          item = Object.assign({\n            [this.itemLabels[index].country_id]: country.country\n          }, item);\n\n          // Set Country Code\n          item = Object.assign({\n            [this.itemLabels[index].country_code]: country.code\n          }, item);\n\n          // Set Country Name\n          item = Object.assign({\n            [this.itemLabels[index].country_name]: country.name\n          }, item);\n\n          // Set country / channel checkbox value\n          item = Object.assign({\n            [this.itemLabels[index].checked]: false\n          }, item);\n\n          // Set country / channel budget value\n          item = Object.assign({\n            [this.itemLabels[index].budget]: ''\n          }, item);\n          index += 1;\n        });\n        this.items.push(item);\n        // console.log('TargetChannelCard:createDataItems:item: ', item)\n      });\n\n      console.log('TargetChannelCard:createDataItems:items: ', this.items);\n      // console.log('items: ', this.items)\n    },\n\n    save() {\n      // Build array of countries\n      // var targetCountries = []\n      // this.items.forEach((item) => {\n      //     if (item.include) {\n      //         let itemObj = {\n      //             strategy: this.selectedStrategy.id,\n      //             country: item.country_id,\n      //             code: item.country_code,\n      //             name: item.country_name,\n      //             budget: item.budget,\n      //             auto_allocate: item.auto_allocate,\n      //             budget_allocated: 0,\n      //         }\n      //         targetCountries.push(itemObj)\n      // console.log('TargetCountryCard: save: itemObj', itemObj)\n      // }\n      // })\n\n      var targetChannels = [];\n      this.items.forEach(item => {\n        this.itemLabels.forEach(country => {\n          if (item[country.checked]) {\n            // console.log('item: ', item)\n            // console.log('item channel_id: ', item['channel_id'])\n            // console.log('item channel_code: ', item['channel_code'])\n            // console.log('item channel_name: ', item['channel_name'])\n            // console.log('item country_id: ', item['country_id'])\n            // console.log('item country_code: ', item['country_code'])\n            // console.log('item country_name: ', item['country_name'])\n            // console.log('item budget: ', item[country.budget])\n            // console.log('item checked: ', item[country.checked])\n\n            let itemObj = {\n              target_country: item['country_code'],\n              channel: item['channel_id'],\n              code: item['channel_code'],\n              name: item['channel_name'],\n              budget: item[country.budget],\n              budget_allocated: 0,\n              auto_allocate: true\n            };\n            targetChannels.push(itemObj);\n          }\n        });\n      });\n      this.$emit('update-target-channels', targetChannels);\n      this.locked = true;\n    },\n    cancel() {\n      this.locked = true;\n      // this.createItems()\n    },\n\n    includeChange(item, labels, labelIndex, itemIndex) {\n      !item[labels.checked] ? item[labels.budget] = '' : null;\n    },\n    newItems() {\n      let i = [];\n      this.storedChannels.forEach(channel => {\n        let ch = {\n          ...channel\n        };\n        ch.target_countries = [];\n        console.log('ch:', ch);\n        console.log('ch array langth:', ch.target_countries.length);\n        this.storedTargetCountries.forEach((target_country, index) => {\n          console.log('target_country:', target_country);\n          // If target channel exists then  populate displayed info with correct values\n          if (this.storedTargetChannels.length > 0) {\n            console.log('searching stored_channels:', this.storedTargetChannels);\n            let found_target_channel = this.storedTargetChannels.find(target_channel => target_channel.code === ch.code && target_country.code === target_channel.country);\n            if (found_target_channel) {\n              console.log('existing target_channel found');\n              let country = {\n                auto_allocate: found_target_channel.auto_allocate,\n                budget: found_target_channel.budget\n              };\n              ch.target_countries.push(country);\n            } else {\n              console.log('existing target_channel NOT found');\n              let country = {\n                auto_allocate: false,\n                budget: 'a'\n              };\n              ch.target_countries.push(country);\n            }\n          } else {\n            console.log('no stored_channels exist');\n            let country = {\n              auto_allocate: false,\n              budget: ''\n            };\n            ch.target_countries.push(country);\n          }\n        });\n        i.push(ch);\n        console.log('i:', i);\n      });\n      // console.log(i)\n      i.forEach(i => {\n        console.log(i.code);\n        i.target_countries.forEach(c => {\n          console.log(c.auto_allocate, c.budget);\n        });\n      });\n      // console.log(output)\n    },\n\n    newItems1() {\n      let rows = [];\n      this.storedChannels.forEach(ch => {\n        console.log(ch.code);\n        let row = {\n          ...ch\n        };\n        row.countries = [];\n        this.storedTargetCountries.forEach(tco => {\n          if (this.storedTargetChannels.find(tch => tch.code === ch.code && tch.target_country === tco.code)) {\n            row.countries.push({\n              target_country: tco.country,\n              auto_allocate: tch.auto_allocate,\n              budget: tch.budget\n            });\n          } else {\n            row.countries.push({\n              target_country: tco.country,\n              auto_allocate: false,\n              budget: ''\n            });\n          }\n        });\n        rows.push(row);\n      });\n      console.log('rows:', rows);\n    }\n  }\n};","map":{"version":3,"mappings":";AAyIA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;MACA;IACA;IACAK;MACAL;QACA;MACA;IACA;IACAM;MACAN;QACA;UACA;UACA;UACA;QACA;UACA;QACA;MACA;IACA;EACA;EACAO;IACA;MACAC;MACA;MACA;MACA;IACA;EACA;EACAC;IACA;IACA;IACA;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACA;;MAEA;MACA;MACA;QACA;QACA;UACAL;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACA;;QAEA;QACA;UACAL;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACA;;QAEA;QACA;QACAC;MACA;MACAV;IACA;IACAW;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACA;;QAEA;QACA;QACAN;MACA;MACAV;IACA;IACAiB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;QACA;QACA;UACA;UACA;UACA;QACA;QACA;QACA;QACA;UACA;UACAC;YACA;UACA;;UAEA;UACAA;YACA;UACA;;UAEA;UACAA;YACA;UACA;;UAEA;UACAA;YACA;UACA;;UAEA;UACAA;YACA;UACA;UAEAR;QACA;QACA;QACA;MACA;;MACAV;MACA;IACA;;IACAmB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;QACA;UACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;;YAEA;cACAC;cACAC;cACAC;cACA/C;cACAsC;cACAU;cACAC;YACA;YACAC;UACA;QACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;;IACAC;MACA;IACA;IACAC;MACA;MACA;QACA;UAAA;QAAA;QACAC;QACA7B;QACAA;QACA;UACAA;UACA;UACA;YACAA;YACA,4EACA8B;YACA;cACA9B;cACA;gBACAwB;gBACAX;cACA;cACAgB;YACA,OACA;cACA7B;cACA;gBACAwB;gBACAX;cACA;cACAgB;YACA;UACA,OACA;YACA7B;YACA;cACAwB;cACAX;YACA;YACAgB;UACA;QAEA;QACAE;QACA/B;MACA;MACA;MACA+B;QACA/B;QACA+B;UACA/B;QACA;MACA;MACA;IACA;;IACAgC;MACA;MACA;QACAhC;QACA;UAAA;QAAA;QACAiC;QACA;UACA;YACAA;cAAAb;cAAAI;cAAAX;YAAA;UACA;YACAoB;cAAAb;cAAAI;cAAAX;YAAA;UACA;QACA;QACAqB;MACA;MACAlC;IACA;EACA;AACA","names":["name","components","CardIcons","data","headers","items","itemLabels","budgetValues","countryChannelData","locked","valid","rules","required","notEmpty","inRange","computed","selectedPhase","get","selectedStrategy","storedTargetCountries","storedTargetChannels","storedCountries","storedChannels","targetChannelsLastEdited","watch","console","mounted","methods","createHeaders","text","align","sortable","value","class","width","index","createItemLabels","checked","budget","country_id","country_code","country_name","createDataItems","item","save","target_country","channel","code","budget_allocated","auto_allocate","targetChannels","cancel","includeChange","newItems","ch","target_channel","i","newItems1","row","rows"],"sourceRoot":"src/components/targetchannel","sources":["TargetChannelCard.vue"],"sourcesContent":["<template>\r\n    <v-form\r\n        ref=\"form\"\r\n        v-model=\"valid\">\r\n        <v-card class=\"mt-3 mx-3\">\r\n            <v-card-title class=\"py-0\">\r\n                Select Channels and Set Budgets for Target Countries\r\n                <v-spacer></v-spacer>\r\n                <CardIcons\r\n                    :showEditIcon=\"true\"\r\n                    :showHideIcon=\"true\"\r\n                    @edit=\"(locked = !locked)\"\r\n                    @hide=\"$emit('hide')\"\r\n                    cardType=\"Linked Channels\" />\r\n            </v-card-title>\r\n            <v-divider></v-divider>\r\n            <v-card-text>\r\n                <v-row class=\"text--disabled\">\r\n                    <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">Phase Budget:</v-col>\r\n                    <v-col cols=\"auto\" class=\"d-flex align-center\">\r\n                        <v-text-field\r\n                            :value=\"selectedPhase.budget\"\r\n                            label=\"Budget\"\r\n                            outlined\r\n                            dense\r\n                            disabled\r\n                            hide-details>\r\n                        </v-text-field>\r\n                        <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">\r\n                            <v-text-field\r\n                                :value=\"selectedPhase.auto_allocate ? 'Yes' : 'No'\"\r\n                                label=\"Budget Autoallocated?\"\r\n                                outlined\r\n                                dense\r\n                                disabled\r\n                                hide-details>\r\n                            </v-text-field>\r\n                        </v-col>\r\n                    </v-col>\r\n                    <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">Strategy Budget:</v-col>\r\n                    <v-col cols=\"auto\" class=\"d-flex align-center\">\r\n                        <v-text-field\r\n                            :value=\"selectedStrategy.budget\"\r\n                            label=\"Budget\"\r\n                            outlined\r\n                            dense\r\n                            disabled\r\n                            hide-details>\r\n                        </v-text-field>\r\n                        <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">\r\n                            <v-text-field\r\n                                :value=\"selectedStrategy.auto_allocate ? 'Yes' : 'No'\"\r\n                                label=\"Budget Autoallocated?\"\r\n                                outlined\r\n                                dense\r\n                                disabled\r\n                                hide-details>\r\n                            </v-text-field>\r\n                        </v-col>\r\n                    </v-col>\r\n                </v-row>\r\n            </v-card-text>\r\n\r\n            <v-card-text>\r\n                <v-sheet\r\n                    class=\"mb-3 grey\"\r\n                    tile\r\n                    outlined>\r\n                    <v-data-table\r\n                        :headers=\"headers\"\r\n                        :items=\"items\"\r\n                        hide-default-footer\r\n                        class=\"pb-3\">\r\n\r\n                        <template v-slot:body=\"{ items }\">\r\n                            <tbody>\r\n                                <tr v-for=\"(item, itemIndex) in items\" :key=\"itemIndex\">\r\n                                    <td>\r\n                                        {{ item.channel_code }}\r\n                                    </td>\r\n                                    <template v-for=\"(labels, labelIndex) in itemLabels\">\r\n                                        <td>\r\n                                            <v-checkbox\r\n                                                v-model=\"item[labels.checked]\"\r\n                                                color=\"secondary\"\r\n                                                :readonly=\"locked\"\r\n                                                dense\r\n                                                hide-details\r\n                                                @change=\"includeChange(item, labels, labelIndex, itemIndex)\"></v-checkbox>\r\n                                        </td>\r\n                                        <td>\r\n                                            <v-text-field\r\n                                                :readonly=\"locked\"\r\n                                                :disabled=\"!item[labels.checked]\"\r\n                                                v-model=\"item[labels.budget]\"\r\n                                                :rules=\"item[labels.checked] ? [rules.notEmpty, rules.inRange] : []\"\r\n                                                label=\"Budget\"\r\n                                                type=\"number\"\r\n                                                dense\r\n                                                hide-details\r\n                                                class=\"shrink rounded-0\"\r\n                                                outlined>\r\n                                            </v-text-field>\r\n                                        </td>\r\n                                    </template>\r\n                                </tr>\r\n                            </tbody>\r\n                        </template>\r\n                    </v-data-table>\r\n                </v-sheet>\r\n                <div class=\"caption text--disabled\">\r\n                    <span>Last edit: {{ targetChannelsLastEdited }}</span>\r\n                    <!-- <span>Last edit:{{ targetCountriesLastEdited.toLocaleDateString((\"en-GB\")) }}</span>\r\n                    <span> {{ targetCountriesLastEdited.toLocaleTimeString((\"en-GB\")) }}</span> -->\r\n                </div>\r\n            </v-card-text>\r\n            <v-card-actions v-if=\"!locked\">\r\n                <v-spacer></v-spacer>\r\n                <v-btn\r\n                    class=\"grey lighten-1 mr-3 rounded-0 text-capitalize\"\r\n                    light\r\n                    depressed\r\n                    @click=\"cancel\">\r\n                    Cancel\r\n                </v-btn>\r\n                <v-btn\r\n                    class=\"mr-3 success rounded-0 text-capitalize\"\r\n                    depressed\r\n                    :disabled=\"(!valid)\"\r\n                    @click=\"save\">\r\n                    Save\r\n                </v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n    </v-form>\r\n</template>\r\n<script>\r\nimport CardIcons from '@/components/shared/CardIcons'\r\nimport axios from 'axios'\r\nimport ConfirmDialog from '../dialogs/ConfirmDialog.vue'\r\n\r\nexport default {\r\n    name: 'CountryCard',\r\n    components: {\r\n        CardIcons,\r\n    },\r\n    data() {\r\n        return {\r\n            headers: [],\r\n            items: [],\r\n            itemLabels: [],\r\n            budgetValues: [],\r\n            countryChannelData: [],\r\n            locked: true,\r\n            valid: false,\r\n            rules: {\r\n                required: (v => !!v || \"Required\"),\r\n                notEmpty: (v => (v.toString().length > 0) || \"Budget should be between 0 and 10,000,000\"),\r\n                inRange: (v => (Number.isInteger(Number(v)) && v >= 0 && v <= 10000000) || \"Budget should be between 0 and 10,000,000\"),\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedStrategy: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.strategy\r\n            }\r\n        },\r\n        storedTargetCountries: {\r\n            get() {\r\n                return this.$store.state.storedTargetCountries\r\n            }\r\n        },\r\n        storedTargetChannels: {\r\n            get() {\r\n                return this.$store.state.storedTargetChannels\r\n            }\r\n        },\r\n        storedCountries: {\r\n            get() {\r\n                return this.$store.state.storedCountries\r\n            }\r\n        },\r\n        storedChannels: {\r\n            get() {\r\n                return this.$store.state.storedChannels\r\n            }\r\n        },\r\n        targetChannelsLastEdited: {\r\n            get() {\r\n                if (this.storedTargetChannels.length > 0) {\r\n                    let lastEditDate = new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified)))).toLocaleDateString('en-GB');\r\n                    let lastEditTime = new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified)))).toLocaleTimeString('en-GB');\r\n                    return `${lastEditDate} ${lastEditTime}`\r\n                } else {\r\n                    return 'N/A'\r\n                }\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        async storedTargetCountries(newValue) {\r\n            console.log('TargetChannelCard: watch: storedTargetCountries', this.storedTargetCountries)\r\n            await this.createHeaders()\r\n            await this.createItemLabels()\r\n            await this.createDataItems()\r\n        },\r\n    },\r\n    mounted() {\r\n        this.createHeaders()\r\n        this.createItemLabels()\r\n        this.createDataItems()\r\n        this.newItems1()\r\n    },\r\n    methods: {\r\n        createHeaders() {\r\n            this.headers = []\r\n            // Header 1: Create Channel Header\r\n            var channelCodeHeader = {\r\n                text: 'Channel',\r\n                align: 'center',\r\n                sortable: false,\r\n                value: 'channel_code',\r\n                class: \"black--text text-subtitle-1\",\r\n                width: \"50px\",\r\n            }\r\n            this.headers.push(channelCodeHeader)\r\n\r\n            // Headers 2 to nnn (2 header per country: \r\n            var index = 0\r\n            this.storedTargetCountries.forEach((country) => {\r\n                // Create a header for each country - where we'll place a checkbox \r\n                var countryHeader = {\r\n                    text: country.code,\r\n                    align: 'start',\r\n                    sortable: false,\r\n                    value: 'checked' + country.code + index,\r\n                    class: \"black--text text-subtitle-1\",\r\n                    width: \"50px\",\r\n                }\r\n                this.headers.push(countryHeader)\r\n\r\n                // Create a header for each country budget - where we'll place a budget field\r\n                var budgetHeader = {\r\n                    text: 'Budget',\r\n                    align: 'center',\r\n                    sortable: false,\r\n                    value: \"budget\" + country.code + index,\r\n                    class: \"black--text text-subtitle-1\",\r\n                    width: \"150px\",\r\n                }\r\n                this.headers.push(budgetHeader)\r\n\r\n                // Increment the count used to make the value field name unique\r\n                // This must match the field name in the actual table row\r\n                index += 1\r\n            })\r\n            console.log('TargetChannelCard:createHeaders:headers: ', this.headers)\r\n        },\r\n        createItemLabels() {\r\n            this.itemLabels = []\r\n            // Create a label for each country and each country budget\r\n            // Used to unqiuely identify a country per channel - and the set the value of the checkbox when\r\n            // we create the data items\r\n            var index = 0\r\n            // console.log(this.storedTargetCountries)\r\n            this.storedTargetCountries.forEach((country) => {\r\n                var checkBoxBudgetLabel = {\r\n                    checked: 'checked' + country.code + index,\r\n                    budget: 'budget' + country.code + index,\r\n                    country_id: 'country_id' + country.code,\r\n                    country_code: 'country_code' + country.code,\r\n                    country_name: 'country_name' + country.code,\r\n                }\r\n                this.itemLabels.push(checkBoxBudgetLabel)\r\n\r\n                // Increment the count used to make the value field name unique\r\n                // This must match the field name in the header row\r\n                index += 1\r\n            })\r\n            console.log('TargetChannelCard:createItemLabels:itemLabels: ', this.itemLabels)\r\n        },\r\n        createDataItems() {\r\n            // Table Data\r\n            // Cycle through each country for each channel - creating:\r\n            // Value 1 - channel\r\n            // Value 2 & 3 per country (checkbox - with the checkboxValue label e.g. checkedDE01, checkedGB01) amd budget\r\n            // console.log('TargetChannelCard:createDataItems:this.storedChannels: ', this.storedChannels)\r\n            this.items = []\r\n            this.storedChannels.forEach((channel) => {\r\n                // console.log(this.storedChannels)\r\n                // Value 1: Channel\r\n                var item = {\r\n                    'channel_id': channel.id,\r\n                    'channel_code': channel.code,\r\n                    'channel_name': channel.name,\r\n                }\r\n                // Values 2 to nnn: Country check box AND budget field for each channel / country combination\r\n                var index = 0\r\n                this.storedTargetCountries.forEach((country) => {\r\n                    // Set Country Id\r\n                    item = Object.assign({\r\n                        [this.itemLabels[index].country_id]: country.country,\r\n                    }, item)\r\n\r\n                    // Set Country Code\r\n                    item = Object.assign({\r\n                        [this.itemLabels[index].country_code]: country.code,\r\n                    }, item)\r\n\r\n                    // Set Country Name\r\n                    item = Object.assign({\r\n                        [this.itemLabels[index].country_name]: country.name,\r\n                    }, item)\r\n\r\n                    // Set country / channel checkbox value\r\n                    item = Object.assign({\r\n                        [this.itemLabels[index].checked]: false,\r\n                    }, item)\r\n\r\n                    // Set country / channel budget value\r\n                    item = Object.assign({\r\n                        [this.itemLabels[index].budget]: '',\r\n                    }, item)\r\n\r\n                    index += 1\r\n                })\r\n                this.items.push(item)\r\n                // console.log('TargetChannelCard:createDataItems:item: ', item)\r\n            })\r\n            console.log('TargetChannelCard:createDataItems:items: ', this.items)\r\n            // console.log('items: ', this.items)\r\n        },\r\n        save() {\r\n            // Build array of countries\r\n            // var targetCountries = []\r\n            // this.items.forEach((item) => {\r\n            //     if (item.include) {\r\n            //         let itemObj = {\r\n            //             strategy: this.selectedStrategy.id,\r\n            //             country: item.country_id,\r\n            //             code: item.country_code,\r\n            //             name: item.country_name,\r\n            //             budget: item.budget,\r\n            //             auto_allocate: item.auto_allocate,\r\n            //             budget_allocated: 0,\r\n            //         }\r\n            //         targetCountries.push(itemObj)\r\n            // console.log('TargetCountryCard: save: itemObj', itemObj)\r\n            // }\r\n            // })\r\n\r\n            var targetChannels = []\r\n            this.items.forEach((item) => {\r\n                this.itemLabels.forEach((country) => {\r\n                    if (item[country.checked]) {\r\n                        // console.log('item: ', item)\r\n                        // console.log('item channel_id: ', item['channel_id'])\r\n                        // console.log('item channel_code: ', item['channel_code'])\r\n                        // console.log('item channel_name: ', item['channel_name'])\r\n                        // console.log('item country_id: ', item['country_id'])\r\n                        // console.log('item country_code: ', item['country_code'])\r\n                        // console.log('item country_name: ', item['country_name'])\r\n                        // console.log('item budget: ', item[country.budget])\r\n                        // console.log('item checked: ', item[country.checked])\r\n\r\n                        let itemObj = {\r\n                            target_country: item['country_code'],\r\n                            channel: item['channel_id'],\r\n                            code: item['channel_code'],\r\n                            name: item['channel_name'],\r\n                            budget: item[country.budget],\r\n                            budget_allocated: 0,\r\n                            auto_allocate: true,\r\n                        }\r\n                        targetChannels.push(itemObj)\r\n                    }\r\n                })\r\n            })\r\n            this.$emit('update-target-channels', targetChannels)\r\n            this.locked = true\r\n        },\r\n        cancel() {\r\n            this.locked = true\r\n            // this.createItems()\r\n        },\r\n        includeChange(item, labels, labelIndex, itemIndex) {\r\n            !item[labels.checked] ? item[labels.budget] = '' : null\r\n        },\r\n        newItems() {\r\n            let i = []\r\n            this.storedChannels.forEach(channel => {\r\n                let ch = { ...channel }\r\n                ch.target_countries = []\r\n                console.log('ch:', ch)\r\n                console.log('ch array langth:', ch.target_countries.length)\r\n                this.storedTargetCountries.forEach((target_country, index) => {\r\n                    console.log('target_country:', target_country)\r\n                    // If target channel exists then  populate displayed info with correct values\r\n                    if (this.storedTargetChannels.length > 0) {\r\n                        console.log('searching stored_channels:', this.storedTargetChannels)\r\n                        let found_target_channel = this.storedTargetChannels.find(target_channel =>\r\n                            target_channel.code === ch.code && target_country.code === target_channel.country)\r\n                        if (found_target_channel) {\r\n                            console.log('existing target_channel found')\r\n                            let country = {\r\n                                auto_allocate: found_target_channel.auto_allocate,\r\n                                budget: found_target_channel.budget,\r\n                            }\r\n                            ch.target_countries.push(country)\r\n                        }\r\n                        else {\r\n                            console.log('existing target_channel NOT found')\r\n                            let country = {\r\n                                auto_allocate: false,\r\n                                budget: 'a',\r\n                            }\r\n                            ch.target_countries.push(country)\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log('no stored_channels exist')\r\n                        let country = {\r\n                            auto_allocate: false,\r\n                            budget: '',\r\n                        }\r\n                        ch.target_countries.push(country)\r\n                    }\r\n\r\n                })\r\n                i.push(ch)\r\n                console.log('i:', i)\r\n            })\r\n            // console.log(i)\r\n            i.forEach(i => {\r\n                console.log(i.code)\r\n                i.target_countries.forEach(c => {\r\n                    console.log(c.auto_allocate, c.budget)\r\n                })\r\n            })\r\n            // console.log(output)\r\n        },\r\n        newItems1() {\r\n            let rows = []\r\n            this.storedChannels.forEach(ch => {\r\n                console.log(ch.code)\r\n                let row = { ...ch }\r\n                row.countries = []\r\n                this.storedTargetCountries.forEach(tco => {\r\n                    if (this.storedTargetChannels.find(tch => tch.code === ch.code && tch.target_country === tco.code)) {\r\n                        row.countries.push({ target_country: tco.country, auto_allocate: tch.auto_allocate, budget: tch.budget })\r\n                    } else {\r\n                        row.countries.push({ target_country: tco.country, auto_allocate: false, budget: '' })\r\n                    }\r\n                })\r\n                rows.push(row)\r\n            })\r\n            console.log('rows:', rows)\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\ntable>tbody>tr>td:nth-child(1),\r\ntable>thead>tr>th:nth-child(1) {\r\n    position: sticky !important;\r\n    position: -webkit-sticky !important;\r\n    left: 0;\r\n    z-index: 9998;\r\n    background: white;\r\n}\r\n\r\ntable>thead>tr>th:nth-child(1) {\r\n    z-index: 9999;\r\n}\r\n</style>\r\n<!-- // async getTargetCountries() {\r\n    //     var response = ''\r\n    //     try {\r\n    //         response = await axios.get(`api/v1/targetcountries`, {\r\n    //             params: {\r\n    //                 strategy: this.selectedStrategy.id,\r\n    //             }\r\n    //         })\r\n    //     }\r\n    //     catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    //     // Refresh Strategy's Stored  Target Country data \r\n    //     this.$store.dispatch('storeTargetCountries', response.data)\r\n    // },\r\n    // createItems() {\r\n    //     this.items = []\r\n    //     // Table Data - check box AND budget field for each country\r\n    //     var index = 0\r\n    //     this.storedCountries.forEach((country) => {\r\n    //         var item = {\r\n    //             'id': country.id,\r\n    //             'country': country.name,\r\n    //             'include': false,\r\n    //             'budget': '',\r\n    //             'auto_allocate': false,\r\n    //         }\r\n    //         // See if this country is already a target country\r\n    //         let foundTargetCountry = this.storedTargetCountries.find(targetCountry =>\r\n    //             targetCountry.country == item.id\r\n    //         )\r\n    //         // Update table data item with target country settings\r\n    //         if (foundTargetCountry) {\r\n    //             item.include = true\r\n    //             item.budget = foundTargetCountry.budget\r\n    //             item.budget_allocated = foundTargetCountry.budget_allocated\r\n    //             item.auto_allocate = foundTargetCountry.auto_allocate\r\n    //         }\r\n    //         this.items.push(item)\r\n    //     })\r\n    // },\r\n    // save() {\r\n    //     // Build array of countries\r\n    //     this.locked = true\r\n    //     var targetCountries = []\r\n    //     console.log('save: ', this.items)\r\n    //     this.items.forEach((item) => {\r\n    //         if (item.include) {\r\n    //             let itemObj = {\r\n    //                 strategy: this.selectedStrategy.id,\r\n    //                 country: item.id,\r\n    //                 budget: item.budget,\r\n    //                 auto_allocate: item.auto_allocate,\r\n    //                 budget_allocated: 0,\r\n    //             }\r\n    //             targetCountries.push(itemObj)\r\n    //         }\r\n    //     })\r\n    //     this.$emit('update-target-countries', targetCountries)\r\n    // },\r\n    // cancel() {\r\n    //     this.locked = true\r\n    //     this.createItems()\r\n    // } -->"]},"metadata":{},"sourceType":"module"}