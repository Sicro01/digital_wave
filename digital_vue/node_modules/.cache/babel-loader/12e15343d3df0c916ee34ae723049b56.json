{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PhaseMenu from '@/components/phase/PhaseMenu';\nimport PhaseCard from '@/components/phase/PhaseCard';\nimport axios from 'axios';\nexport default {\n  name: 'PlanDetailView',\n  components: {\n    PhaseMenu,\n    PhaseCard\n  },\n  data() {\n    return {\n      showPhase: false\n    };\n  },\n  computed: {\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    }\n  },\n  methods: {\n    openPhaseCard(phase, index) {\n      // Show Phase Card\n      this.showPhase = true;\n      // Update selected Phase\n      const phaseDataPayload = {\n        phase: phase,\n        index: index\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n      // Update selected Strategy\n      const strategyDataPayload = {\n        strategy: this.selectedPhase.strategies[0],\n        index: 0\n      };\n      this.$store.dispatch('selectStrategyData', strategyDataPayload);\n    },\n    async updatePhase() {\n      this.selectedPhase.plan = this.selectedPlan.id;\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/phase/${this.selectedPhase.id}/`, this.selectedPhase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBPhaseProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success', updatePayload.changeRoute);\n    },\n    async createPhase(createPhase) {\n      // Add current plan to new phase\n      createPhase.plan = this.selectedPlan.id;\n      var response = '';\n      try {\n        response = await axios.post(`api/v1/phases/`, createPhase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBPhaseProcessing(0, `Successfully created Phase \"${response.data.name}\"`);\n    },\n    async deletePhase(deletePhase) {\n      // A pLan must have at least one Phase\n      if (this.selectedPlan.phases.length === 1) {\n        // Display Snackbar message\n        this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text');\n      } else {\n        var response = '';\n        try {\n          response = await axios.delete(`api/v1/phase/${deletePhase.id}/`);\n        } catch (error) {\n          console.log(error);\n        }\n        // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n        this.endDBPhaseProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`);\n      }\n    },\n    async endDBPhaseProcessing(phaseIndex, message, alertType = 'success', changeRoute = true) {\n      // Refresh updated Plan and save phase to store\n      await this.getPlan();\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[phaseIndex],\n        index: phaseIndex\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Display Snackbar message\n      this.showSnackBar(message, alertType);\n      // this.selectedPhase.slug != this.$refs.phaseTabs.tab ? this.$refs.phaseTabs.callSlider() : null\n      // console.log(this.selectedPhase.slug)\n      console.log(this.$refs.parentPhaseTabs);\n      // console.log(this.$refs.parentPhaseTabs.$refs.phaseTabs)\n      // this.$refs.parentPhaseTabs.$refs.phaseTabs.callSlider()\n\n      console.log('route: ', changeRoute);\n      // Change route to selected phase\n      changeRoute ? this.$router.push(this.selectedPhase.slug) : '';\n      // changeRoute ? this.$refs.parentPhaseTabs.$refs.phaseTabs.callSlider() : null\n    }\n  }\n};","map":{"version":3,"mappings":";AA2DA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;EACA;EACAI;IACAC;MACA;MACA;MACA;MACA;QAAAC;QAAAC;MAAA;MACA;MACA;MACA;QAAAC;QAAAD;MAAA;MACA;IACA;IACA;MACA;MACA;MACA;QACAE;MACA,EACA;QACAC;MACA;MACA;MACA;IACA;IACA;MACA;MACAC;MAEA;MACA;QACAF;MACA,EACA;QACAC;MACA;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;UACAD;QACA,EACA;UACAC;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;MACA;QAAAJ;QAAAC;MAAA;MACA;;MAEA;MACA;MACA;MACA;MACAG;MACA;MACA;;MAEAA;MACA;MACAE;MACA;IACA;EACA;AACA","names":["name","components","PhaseMenu","PhaseCard","data","showPhase","computed","selectedPlan","get","selectedPhase","selectedPhaseIndex","selectedStrategy","methods","openPhaseCard","phase","index","strategy","response","console","createPhase","changeRoute"],"sourceRoot":"src/views","sources":["PlanDetailView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-row\r\n            class=\"ma-0 white d-flex align-center\">\r\n            <v-col\r\n                class=\"ma-0 pa-0 black--text\"\r\n                cols=\"auto\">\r\n                <v-tooltip\r\n                    bottom>\r\n                    <template v-slot:activator=\"{ on, attrs }\">\r\n                        <v-btn\r\n                            class=\"ml-2\"\r\n                            icon\r\n                            v-bind=\"attrs\"\r\n                            v-on=\"on\">\r\n                            <v-icon\r\n                                @click=\"$router.push('/')\"\r\n                                color=\"primary\"\r\n                                size=\"50\">mdi-playlist-edit</v-icon>\r\n                        </v-btn>\r\n                    </template>\r\n                    <span>Plans home</span>\r\n                </v-tooltip>\r\n            </v-col>\r\n\r\n            <v-col cols=\"auto\" class=\"pa-0 black--text\">\r\n                <v-row class=\"ml-2 my-1\">{{ selectedPlan.name }}</v-row>\r\n                <v-row class=\"ml-2 my-1\">{{ selectedPhase.name }} : {{ selectedStrategy.name }}</v-row>\r\n                <v-row class=\"ma-0\">\r\n                    <v-col cols=\"auto\" class=\"pa-0\">\r\n                        <v-toolbar dense flat class=\"\">\r\n                            <PhaseMenu\r\n                                :phases=selectedPlan.phases\r\n                                @open-phase-card='openPhaseCard' />\r\n                        </v-toolbar>\r\n                    </v-col>\r\n                    <v-col cols=\"auto\" class=\"pa-0\">\r\n                        <v-toolbar dense flat class=\"\">\r\n                            <PhaseMenu\r\n                                :phases=selectedPlan.phases\r\n                                @open-phase-card='openPhaseCard' />\r\n                        </v-toolbar>\r\n                    </v-col>\r\n                </v-row>\r\n\r\n            </v-col>\r\n        </v-row>\r\n\r\n        <v-divider></v-divider>\r\n\r\n        <PhaseCard\r\n            v-if=\"showPhase\"\r\n            @hide-phase-card=\"showPhase = false\"\r\n            @delete-phase=\"deletePhase\"\r\n            @update-phase=\"updatePhase\" />\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport PhaseMenu from '@/components/phase/PhaseMenu'\r\nimport PhaseCard from '@/components/phase/PhaseCard'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'PlanDetailView',\r\n    components: {\r\n        PhaseMenu,\r\n        PhaseCard,\r\n    },\r\n    data() {\r\n        return {\r\n            showPhase: false,\r\n        }\r\n    },\r\n    computed: {\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedPhaseIndex: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.index\r\n            }\r\n        },\r\n        selectedStrategy: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.strategy\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        openPhaseCard(phase, index) {\r\n            // Show Phase Card\r\n            this.showPhase = true\r\n            // Update selected Phase\r\n            const phaseDataPayload = { phase: phase, index: index }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n            // Update selected Strategy\r\n            const strategyDataPayload = { strategy: this.selectedPhase.strategies[0], index: 0 }\r\n            this.$store.dispatch('selectStrategyData', strategyDataPayload)\r\n        },\r\n        async updatePhase() {\r\n            this.selectedPhase.plan = this.selectedPlan.id\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/phase/${this.selectedPhase.id}/`, this.selectedPhase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBPhaseProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success', updatePayload.changeRoute)\r\n        },\r\n        async createPhase(createPhase) {\r\n            // Add current plan to new phase\r\n            createPhase.plan = this.selectedPlan.id\r\n\r\n            var response = ''\r\n            try {\r\n                response = await axios.post(`api/v1/phases/`, createPhase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBPhaseProcessing(0, `Successfully created Phase \"${response.data.name}\"`)\r\n        },\r\n        async deletePhase(deletePhase) {\r\n            // A pLan must have at least one Phase\r\n            if (this.selectedPlan.phases.length === 1) {\r\n                // Display Snackbar message\r\n                this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text')\r\n            } else {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.delete(`api/v1/phase/${deletePhase.id}/`)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n                // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n                this.endDBPhaseProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`)\r\n            }\r\n        },\r\n        async endDBPhaseProcessing(phaseIndex, message, alertType = 'success', changeRoute = true) {\r\n            // Refresh updated Plan and save phase to store\r\n            await this.getPlan()\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[phaseIndex], index: phaseIndex }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar(message, alertType)\r\n            // this.selectedPhase.slug != this.$refs.phaseTabs.tab ? this.$refs.phaseTabs.callSlider() : null\r\n            // console.log(this.selectedPhase.slug)\r\n            console.log(this.$refs.parentPhaseTabs)\r\n            // console.log(this.$refs.parentPhaseTabs.$refs.phaseTabs)\r\n            // this.$refs.parentPhaseTabs.$refs.phaseTabs.callSlider()\r\n\r\n            console.log('route: ', changeRoute)\r\n            // Change route to selected phase\r\n            changeRoute ? this.$router.push(this.selectedPhase.slug) : ''\r\n            // changeRoute ? this.$refs.parentPhaseTabs.$refs.phaseTabs.callSlider() : null\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style>\r\ndiv.v-toolbar__content {\r\n    padding: 0px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}