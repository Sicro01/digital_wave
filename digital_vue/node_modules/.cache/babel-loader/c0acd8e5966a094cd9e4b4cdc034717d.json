{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      items: []\n    };\n  },\n  computed: {\n    plans: {\n      get() {\n        return this.$store.state.plans;\n      }\n    },\n    phases: {\n      get() {\n        return this.$store.state.phases;\n      }\n    },\n    strategies: {\n      get() {\n        return this.$store.state.strategies;\n      }\n    }\n  },\n  mounted() {\n    this.buildTreeData();\n  },\n  methods: {\n    buildTreeData() {\n      this.items = [];\n      this.getPlans();\n      this.plans.forEach(plan => {\n        item = {\n          id: plan.id,\n          name: plan.name,\n          children: []\n        };\n        plan.phases.forEach(phase => {\n          let this_phase = {\n            id: phase.id,\n            name: phase.name\n          };\n          item.children.push(this_phase);\n        }); // Phases\n      }); // Plans\n    },\n\n    // BuildTree\n    async getPlans() {\n      var response = '';\n      try {\n        response = await axios.get('api/v1/plans/');\n      } catch (error) {\n        console.log(error);\n      }\n      if (response.data.length > 0) {\n        this.$store.dispatch('acquirePlans', response.data);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAOA;EACAA;IACA;MACAC;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;EACA;EACAG;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;QACAC;UAAAC;UAAAC;UAAAC;QAAA;QACAC;UACA;YAAAH;YAAAC;UAAA;UACAF;QACA;MACA;IAEA;;IAAA;IACA;MACA;MACA;QACAK;MACA,EACA;QACAC;MACA;MACA;QACA;MACA;IACA;EACA;AACA","names":["data","items","computed","plans","get","phases","strategies","mounted","methods","buildTreeData","item","id","name","children","plan","response","console"],"sourceRoot":"src/views","sources":["NewHomeView.vue"],"sourcesContent":["<template >\r\n    <v-treeview\r\n        selectable\r\n        :items=\"items\">\r\n    </v-treeview>\r\n</template>\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            items: []\r\n        }\r\n    },\r\n    computed: {\r\n        plans: {\r\n            get() {\r\n                return this.$store.state.plans\r\n            }\r\n        },\r\n        phases: {\r\n            get() {\r\n                return this.$store.state.phases\r\n            }\r\n        },\r\n        strategies: {\r\n            get() {\r\n                return this.$store.state.strategies\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        this.buildTreeData()\r\n    },\r\n    methods: {\r\n        buildTreeData() {\r\n            this.items = []\r\n            this.getPlans()\r\n            this.plans.forEach((plan) => {\r\n                item = { id: plan.id, name: plan.name, children: [] }\r\n                plan.phases.forEach((phase) => {\r\n                    let this_phase = { id: phase.id, name: phase.name }\r\n                    item.children.push(this_phase)\r\n                }); // Phases\r\n            }); // Plans\r\n\r\n        }, // BuildTree\r\n        async getPlans() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get('api/v1/plans/')\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            if (response.data.length > 0) {\r\n                this.$store.dispatch('acquirePlans', response.data)\r\n            }\r\n        },\r\n    }\r\n}\r\n</script>\r\n<!-- this.$store.dispatch('getStrategies', phase)\r\n                    this.$store.strategies.forEach((strategy) => {\r\n                        this.$store.dispatch('getTargetCountries', strategy)\r\n                        this.$store.targetCountries.forEach((targetCountry) => {\r\n                            this.$store.dispatch('getTargetChannels', targetCountry)\r\n                            this.$store.targetChannels.forEach((targetChannel) => {\r\n                                this.$store.dispatch('getTargetDevices', targetChannel)\r\n\r\n                            }) // TargetChannels\r\n\r\n                        }) // TargetCountries\r\n\r\n                    }) // Strategies -->"]},"metadata":{},"sourceType":"module"}