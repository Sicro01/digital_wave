{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PhaseCard from '@/components/phase/PhaseCard';\nimport PhaseToolbar from '@/components/phase/PhaseToolbar';\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog';\nimport axios from 'axios';\nexport default {\n  name: 'PhaseDetailView',\n  components: {\n    PhaseCard,\n    PhaseToolbar,\n    PhaseEditDialog\n  },\n  data() {\n    return {\n      isCreateOrDelete: false,\n      tab: '',\n      activeName: '',\n      isEdit: false,\n      open_dialog: false,\n      newPhase: {\n        id: -1,\n        name: '',\n        description: '',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10)\n      },\n      editPhase: {\n        id: 0,\n        name: '',\n        description: '',\n        start_date: '',\n        end_date: ''\n      }\n    };\n  },\n  computed: {\n    selectedPlan() {\n      return this.$store.state.selectedPlan;\n    },\n    selectedPhase() {\n      return this$store.state.selectedPhase.phase;\n    },\n    show() {\n      return this.$store.state.phaseDisplay.show;\n    }\n  },\n  watch: {\n    tab(newTabURL, oldTabURL) {\n      // Set the name of the tab name variable to the first tab in the tablist when the tabs are first shown.\n      // oldTabURL will be empty as there will be no previous tab\n      if (!oldTabURL) {\n        this.activeName = this.selectedPlan.phases[0].name;\n      }\n      // console.log('newTabURL: ', newTabURL)\n      // console.log('oldTabURL: ', oldTabURL)\n    }\n  },\n\n  methods: {\n    async getPlan() {\n      const plan_slug = this.$route.params.plan_slug;\n      await axios.get(`/api/v1/plan/${plan_slug}`).then(response => {\n        this.$store.dispatch('selectPlan', response.data);\n      }).catch(error => {\n        console.log(error);\n      });\n      if (this.isCreateOrDelete) {\n        this.$router.push(this.selectedPlan.phases[0].get_absolute_url);\n        this.activeName = this.selectedPlan.phases[0].name;\n        this.isCreateOrDelete = false;\n      }\n    },\n    ////<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n    async getPhase() {\n      await axios.get(`api/v1/phases/${this.selectedPhase.id}`).then(response => {\n        const payload = {\n          phase: response.data,\n          name: response.data.name\n        };\n        this.$store.commit('PHASE_SELECTED', payload);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    ////<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n    async update(phaseUpdate) {\n      // Find phase by matching id and replace it with updated one\n      this.selectedPlan.phases.forEach((item, index) => {\n        if (item.id === phaseUpdate.id) {\n          this.$set(this.selectedPlan.phases, index, phaseUpdate);\n        }\n      });\n      await axios.put(`api/v1/plans/${this.selectedPlan.id}/`, this.selectedPlan).then(response => {\n        // Refresh Plan data after phase updated\n        this.refreshPlanData('Successfully updated', phaseUpdate.name);\n\n        // Refresh selected phase data based on the phase id of the updated phase\n        this.selectedPlan.phases.forEach((item, index) => {\n          if (item.id === phaseUpdate.id) {\n            console.log('found updated phase url: ', item.get_absolute_url);\n            this.tab = item.get_absolute_url;\n            // this.$router.push(item.get_absolute_url)\n            const payload = {\n              phase: item,\n              name: item.name\n            };\n            this.$store.commit('PHASE_SELECTED', payload);\n          }\n        });\n        this.activeName = this.$store.state.selectedPhase.phase.name;\n\n        // console.log('this.$store.state.selectedPhase.phase.id:', this.$store.state.selectedPhase.phase.id)\n        // this.$router.push(this.$store.state.selectedPhase.phase.get_absolute_url)\n      }).catch(error => {\n        console.log(error);\n      });\n      // this.getPlan()\n      // console.log('updated phase')\n      // const payload = { text: `Successfully updated ${phase.name}`, alerttype: \"success\", contentclass: 'white--text' }\n      // this.$store.dispatch('showSnackBar', payload)\n    },\n\n    async create(phase) {\n      // Using the plan update serializer which either updates a phase or create a new one if no phase id\n\n      this.$delete(phase, 'id'); // get rid of the plan's id field as we want to update the plan\n      this.selectedPlan.phases.push(phase); // add the phase to the plan then update the plan\n\n      await axios.put(`api/v1/plans/${this.selectedPlan.id}/`, this.selectedPlan).then(response => {\n        this.isCreateOrDelete = true;\n        this.refreshPlanData('Successfully created', phase.name);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    async del(phase) {\n      await axios.delete(`api/v1/phases/${phase.id}/`).then(response => {\n        this.isCreateOrDelete = true;\n        this.refreshPlanData('Successfully deleted', phase.name);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    refreshPlanData(message, name) {\n      this.getPlan();\n      const payload = {\n        text: `${message} ${name}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    openEditDialog(editPhase) {\n      this.editPhase = editPhase;\n      this.open_dialog = true;\n    },\n    openNewDialog() {\n      this.editPhase = this.newPhase;\n      this.open_dialog = true;\n    },\n    async onTabClick(phase, index) {\n      const payload = {\n        phase: phase,\n        name: phase.name,\n        phaseIndex: index\n      };\n      this.$store.dispatch('selectPhase', payload);\n      this.activeName = this.$store.state.selectedPhase.name;\n      // this.activeName = phase.name\n    },\n\n    menuActionClick(index) {\n      this.menuItems[index].click.call(this);\n    }\n  }\n};","map":{"version":3,"mappings":";AAiEA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAZ;QACAa;QACAC;QACAC;MACA;MACAC;QACAJ;QACAZ;QACAa;QACAC;QACAC;MACA;IACA;EACA;EACAE;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACAd;MACA;MACA;MACA;QAAA;MAAA;MACA;MACA;IAEA;EACA;;EACAe;IACA;MACA;MACA,YACAC,iCACAC;QACA;MACA,GACAC;QACAC;MACA;MAEA;QACA;QACA;QACA;MACA;IACA;IACA;IACA;MACA,YACAH,8CACAC;QACA;UAAAG;UAAA3B;QAAA;QACA;MACA,GACAyB;QACAC;MACA;IACA;IACA;IACA;MACA;MACA;QACA;UACA;QACA;MACA;MACA,YACAE,gEACAJ;QACA;QACA;;QAEA;QACA;UACA;YACAE;YACA;YACA;YACA;cAAAC;cAAA3B;YAAA;YACA;UACA;QACA;QACA;;QAEA;QACA;MACA,GACAyB;QACAC;MACA;MACA;MACA;MACA;MACA;IACA;;IACA;MACA;;MAEA;MACA;;MAEA,YACAE,gEACAJ;QACA;QACA;MACA,GACAC;QACAC;MACA;IACA;IACA;MACA,YACAG,qCACAL;QACA;QACA;MACA,GACAC;QACAC;MACA;IACA;IACAI;MACA;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACA;MACA;QAAAR;QAAA3B;QAAAoC;MAAA;MACA;MACA;MACA;IACA;;IACAC;MACA;IACA;EACA;AACA","names":["name","components","PhaseCard","PhaseToolbar","PhaseEditDialog","data","isCreateOrDelete","tab","activeName","isEdit","open_dialog","newPhase","id","description","start_date","end_date","editPhase","computed","selectedPlan","selectedPhase","show","watch","methods","get","then","catch","console","phase","put","delete","refreshPlanData","text","alerttype","contentclass","openEditDialog","openNewDialog","phaseIndex","menuActionClick"],"sourceRoot":"src/views","sources":["PlanDetailView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-row class=\"mt-3 mx-4\">\r\n            <v-col\r\n                md=\"12\"\r\n                sm=\"12\"\r\n                class=\"align-center\">\r\n\r\n                <PhaseToolbar\r\n                    :activeName=\"activeName\"\r\n                    @open-dialog=\"openNewDialog()\"\r\n                    @show=\"$store.dispatch('togglePhaseDisplay')\" />\r\n\r\n                <v-card\r\n                    v-if=\"show\"\r\n                    flat\r\n                    tile>\r\n                    <v-tabs\r\n                        v-model=\"tab\"\r\n                        class=\"mt-3 elevation-0 rounded-0\"\r\n                        background-color=\"grey lighten-3\"\r\n                        center-active\r\n                        show-arrows\r\n                        slider-size=6>\r\n                        <v-tabs-slider color=\"white\"></v-tabs-slider>\r\n                        <v-tab\r\n                            v-for=\"(phase, index) in selectedPlan.phases\"\r\n                            :key=\"phase.id\"\r\n                            :href=\"'#' + phase.slug\"\r\n                            :to=\"`${phase.get_absolute_url}`\"\r\n                            @click=\"onTabClick(phase, index)\"\r\n                            class=\"secondary darken-3 text-capitalize black--text font-weight-regular\">\r\n                            {{ phase.name }}\r\n                        </v-tab>\r\n                        <v-spacer></v-spacer>\r\n                    </v-tabs>\r\n                    <!-- v-for=\"(phase, index) in plan.phases\" -->\r\n\r\n                    <v-tabs-items\r\n                        v-model=\"tab\">\r\n                        <v-tab-item\r\n                            v-for=\"(phase, index) in selectedPlan.phases\"\r\n                            :key=\"index\"\r\n                            :id=\"phase.get_absolute_url\">\r\n                            <router-view v-if=\"tab === phase.slug\" />\r\n                            <PhaseCard\r\n                                :phase=\"phase\"\r\n                                @open-editphase-dialog=\"openEditDialog(phase)\" />\r\n\r\n                        </v-tab-item>\r\n                    </v-tabs-items>\r\n                </v-card>\r\n            </v-col>\r\n        </v-row>\r\n\r\n        <PhaseEditDialog\r\n            v-model=\"open_dialog\"\r\n            :phase=\"editPhase\"\r\n            @create=\"create\"\r\n            @update=\"update\"\r\n            @delete=\"del\" />\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport PhaseCard from '@/components/phase/PhaseCard'\r\nimport PhaseToolbar from '@/components/phase/PhaseToolbar'\r\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'PhaseDetailView',\r\n    components: {\r\n        PhaseCard,\r\n        PhaseToolbar,\r\n        PhaseEditDialog,\r\n    },\r\n    data() {\r\n        return {\r\n            isCreateOrDelete: false,\r\n            tab: '',\r\n            activeName: '',\r\n            isEdit: false,\r\n            open_dialog: false,\r\n            newPhase: {\r\n                id: -1,\r\n                name: '',\r\n                description: '',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n            },\r\n            editPhase: {\r\n                id: 0,\r\n                name: '',\r\n                description: '',\r\n                start_date: '',\r\n                end_date: '',\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        selectedPlan() {\r\n            return this.$store.state.selectedPlan\r\n        },\r\n        selectedPhase() {\r\n            return this$store.state.selectedPhase.phase\r\n        },\r\n        show() {\r\n            return this.$store.state.phaseDisplay.show\r\n        },\r\n    },\r\n    watch: {\r\n        tab(newTabURL, oldTabURL) {\r\n            // Set the name of the tab name variable to the first tab in the tablist when the tabs are first shown.\r\n            // oldTabURL will be empty as there will be no previous tab\r\n            if (!oldTabURL) { this.activeName = this.selectedPlan.phases[0].name }\r\n            // console.log('newTabURL: ', newTabURL)\r\n            // console.log('oldTabURL: ', oldTabURL)\r\n\r\n        },\r\n    },\r\n    methods: {\r\n        async getPlan() {\r\n            const plan_slug = this.$route.params.plan_slug\r\n            await axios\r\n                .get(`/api/v1/plan/${plan_slug}`)\r\n                .then(response => {\r\n                    this.$store.dispatch('selectPlan', response.data)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n\r\n            if (this.isCreateOrDelete) {\r\n                this.$router.push(this.selectedPlan.phases[0].get_absolute_url)\r\n                this.activeName = this.selectedPlan.phases[0].name\r\n                this.isCreateOrDelete = false\r\n            }\r\n        },\r\n        ////<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n        async getPhase() {\r\n            await axios\r\n                .get(`api/v1/phases/${this.selectedPhase.id}`)\r\n                .then(response => {\r\n                    const payload = { phase: response.data, name: response.data.name }\r\n                    this.$store.commit('PHASE_SELECTED', payload)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        },\r\n        ////<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n        async update(phaseUpdate) {\r\n            // Find phase by matching id and replace it with updated one\r\n            this.selectedPlan.phases.forEach((item, index) => {\r\n                if (item.id === phaseUpdate.id) {\r\n                    this.$set(this.selectedPlan.phases, index, phaseUpdate)\r\n                }\r\n            })\r\n            await axios\r\n                .put(`api/v1/plans/${this.selectedPlan.id}/`, this.selectedPlan)\r\n                .then(response => {\r\n                    // Refresh Plan data after phase updated\r\n                    this.refreshPlanData('Successfully updated', phaseUpdate.name)\r\n\r\n                    // Refresh selected phase data based on the phase id of the updated phase\r\n                    this.selectedPlan.phases.forEach((item, index) => {\r\n                        if (item.id === phaseUpdate.id) {\r\n                            console.log('found updated phase url: ', item.get_absolute_url)\r\n                            this.tab = item.get_absolute_url\r\n                            // this.$router.push(item.get_absolute_url)\r\n                            const payload = { phase: item, name: item.name }\r\n                            this.$store.commit('PHASE_SELECTED', payload)\r\n                        }\r\n                    })\r\n                    this.activeName = this.$store.state.selectedPhase.phase.name\r\n\r\n                    // console.log('this.$store.state.selectedPhase.phase.id:', this.$store.state.selectedPhase.phase.id)\r\n                    // this.$router.push(this.$store.state.selectedPhase.phase.get_absolute_url)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n            // this.getPlan()\r\n            // console.log('updated phase')\r\n            // const payload = { text: `Successfully updated ${phase.name}`, alerttype: \"success\", contentclass: 'white--text' }\r\n            // this.$store.dispatch('showSnackBar', payload)\r\n        },\r\n        async create(phase) {\r\n            // Using the plan update serializer which either updates a phase or create a new one if no phase id\r\n\r\n            this.$delete(phase, 'id') // get rid of the plan's id field as we want to update the plan\r\n            this.selectedPlan.phases.push(phase) // add the phase to the plan then update the plan\r\n\r\n            await axios\r\n                .put(`api/v1/plans/${this.selectedPlan.id}/`, this.selectedPlan)\r\n                .then(response => {\r\n                    this.isCreateOrDelete = true\r\n                    this.refreshPlanData('Successfully created', phase.name)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        },\r\n        async del(phase) {\r\n            await axios\r\n                .delete(`api/v1/phases/${phase.id}/`)\r\n                .then(response => {\r\n                    this.isCreateOrDelete = true\r\n                    this.refreshPlanData('Successfully deleted', phase.name)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        },\r\n        refreshPlanData(message, name) {\r\n            this.getPlan()\r\n            const payload = { text: `${message} ${name}`, alerttype: \"success\", contentclass: 'white--text' }\r\n            this.$store.dispatch('showSnackBar', payload)\r\n        },\r\n        openEditDialog(editPhase) {\r\n            this.editPhase = editPhase\r\n            this.open_dialog = true\r\n        },\r\n        openNewDialog() {\r\n            this.editPhase = this.newPhase\r\n            this.open_dialog = true\r\n        },\r\n        async onTabClick(phase, index) {\r\n            const payload = { phase: phase, name: phase.name, phaseIndex: index }\r\n            this.$store.dispatch('selectPhase', payload)\r\n            this.activeName = this.$store.state.selectedPhase.name\r\n            // this.activeName = phase.name\r\n        },\r\n        menuActionClick(index) {\r\n            this.menuItems[index].click.call(this)\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped lang='scss'>\r\n.v-tab--active {\r\n    color: white !important;\r\n}\r\n\r\n.v-tab {\r\n    text-transform: none !important;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}