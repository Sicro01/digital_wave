{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CardIcons from '@/components/shared/CardIcons';\nimport axios from 'axios';\nexport default {\n  name: 'CountryCard',\n  components: {\n    CardIcons\n  },\n  data() {\n    return {\n      headers: [{\n        text: 'Country',\n        align: 'center',\n        sortable: false,\n        value: 'country_name',\n        class: \"text-subtitle-1 black--text\"\n      }, {\n        text: 'Include?',\n        align: 'center',\n        value: 'include',\n        class: \"text-subtitle-1 black--text\"\n      }, {\n        text: 'Budget',\n        align: 'center',\n        value: 'budget',\n        class: \"text-subtitle-1 black--text\"\n      }, {\n        text: 'Auto-allocate?',\n        align: 'center',\n        value: 'autoallocate',\n        class: \"text-subtitle-1 black--text\"\n      }],\n      items: [],\n      locked: true,\n      valid: false,\n      rules: {\n        required: v => !!v || \"Required\",\n        notEmpty: v => v.toString().length > 0 || \"Budget should be between 0 and 10,000,000\",\n        inRange: v => Number.isInteger(Number(v)) && v >= 0 && v <= 10000000 || \"Budget should be between 0 and 10,000,000\"\n      }\n    };\n  },\n  computed: {\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    },\n    storedTargetCountries: {\n      get() {\n        return this.$store.state.storedTargetCountries;\n      }\n    },\n    storedCountries: {\n      get() {\n        return this.$store.state.storedCountries;\n      }\n    },\n    targetCountriesLastEdited: {\n      get() {\n        return new Date(Math.max(...this.storedTargetCountries.map(e => new Date(e.date_modified))));\n      }\n    }\n  },\n  watch: {\n    async selectedStrategy(newValue) {\n      await this.getTargetCountries();\n      this.createItems();\n    },\n    async storedTargetCountries(newValue) {\n      this.createItems();\n    }\n  },\n  mounted() {\n    this.getCountries();\n    this.createItems();\n  },\n  methods: {\n    async getCountries() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/countries/`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('storeCountries', response.data);\n    },\n    async getTargetCountries() {\n      var response = '';\n      try {\n        response = await axios.get(`api/v1/targetcountries`, {\n          params: {\n            strategy: this.selectedStrategy.id\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh Strategy's Stored  Target Country data \n      this.$store.dispatch('storeTargetCountries', response.data);\n    },\n    createItems() {\n      this.items = [];\n      // Table Data - check box AND budget field for each country\n      var index = 0;\n      this.storedCountries.forEach(country => {\n        var item = {\n          'country_id': country.id,\n          'country_name': country.name,\n          'country_code': country.code,\n          'include': false,\n          'budget': '',\n          'auto_allocate': false\n        };\n        // See if this country is already a target country\n        let foundTargetCountry = this.storedTargetCountries.find(targetCountry => targetCountry.country == item.country_id);\n        // Update table data item with target country settings\n        if (foundTargetCountry) {\n          item.include = true;\n          item.budget = foundTargetCountry.budget;\n          item.budget_allocated = foundTargetCountry.budget_allocated;\n          item.auto_allocate = foundTargetCountry.auto_allocate;\n        }\n        this.items.push(item);\n        // console.log('TargetCountryCard: createItems: item', item)\n      });\n    },\n\n    save() {\n      // Find Deleted countries\n      // this.storedTargetCountries.forEach((targetCountry) => {\n      //     let foundTargetCountry = this.items.find((item) => {\n      //         console.log('TagetCountryCard:save: found:', targetCountry)\n      //         targetCountry.country == item.country_id\n      //     })\n      //     if (!foundTargetCountry) {\n      //         console.log('TagetCountryCard:save: not found:', targetCountry)\n      //     }\n      // })\n      // Build array of countries\n      var newTargetCountries = [];\n      this.items.forEach(item => {\n        // If country is included build an object to be created/updated to the database\n        if (item.include) {\n          let itemObj = {\n            strategy: this.selectedStrategy.id,\n            country: item.country_id,\n            code: item.country_code,\n            name: item.country_name,\n            budget: item.budget,\n            auto_allocate: item.auto_allocate,\n            budget_allocated: 0\n          };\n          newTargetCountries.push(itemObj);\n          // console.log('TargetCountryCard: create/update: itemObj', itemObj)\n        } else\n          // If the country isn't included now but it was previously then we need to delete it from the database\n          {\n            this.storedTargetCountries.find(targetCountry => targetCountry.country == item.country_id);\n          }\n      });\n      var newCountries = this.items.filter(i => {\n        return i.include;\n      });\n      console.log('TagetCountryCard:save: newCountries: ', newCountries);\n      var newCountryIds = this.storedTargetCountries.map(i => {\n        return i.country;\n      });\n      console.log('TagetCountryCard:save: newCountryIds: ', newCountryIds);\n      var oldCountryIds = this.storedTargetCountries.map(i => {\n        return i.country;\n      });\n      console.log('TagetCountryCard:save: oldCountryIds: ', oldCountryIds);\n      this.$emit('update-target-countries', newTargetCountries);\n      this.locked = true;\n    },\n    cancel() {\n      this.locked = true;\n      this.createItems();\n    },\n    includeChange(item) {\n      !item.include ? item.budget = '' : null;\n    }\n  }\n};","map":{"version":3,"mappings":";AA8IA;AACA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACA;MACAC,UACA;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QAAAJ;QAAAC;QAAAE;QAAAC;MAAA,GACA;QAAAJ;QAAAC;QAAAE;QAAAC;MAAA,GACA;QAAAJ;QAAAC;QAAAE;QAAAC;MAAA,EACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;MACA;IACA;EACA;EACAK;IACA;MACA;MACA;IACA;IACA;MACA;IACA;EACA;EACAC;IACA;IACA;EACA;EACAC;IACA;MACA;MACA;QACAC;MACA,EACA;QACAC;MACA;MACA;IACA;IACA;MACA;MACA;QACAD;UACAE;YACAC;UACA;QACA;MACA,EACA;QACAF;MACA;MACA;MACA;IACA;IACAG;MACA;MACA;MACA;MACA;QACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;QACA;QACA,0EACAC,yCACA;QACA;QACA;UACAC;UACAA;UACAA;UACAA;QACA;QACA;QACA;MACA;IACA;;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;QACA;UACA;YACAJ;YACAK;YACAC;YACApC;YACAqC;YACAC;YACAC;UACA;UACAC;UACA;QACA;UACA;UACA;YACA,iDACAR;UACA;MACA;MACA;QAAA;MAAA;MACAJ;MACA;QAAA;MAAA;MACAA;MACA;QAAA;MAAA;MACAA;MAEA;MACA;IACA;IACAa;MACA;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","components","CardIcons","data","headers","text","align","sortable","value","class","items","locked","valid","rules","required","notEmpty","inRange","computed","selectedPhase","get","selectedStrategy","storedTargetCountries","storedCountries","targetCountriesLastEdited","watch","mounted","methods","response","console","params","strategy","createItems","targetCountry","item","save","country","code","budget","auto_allocate","budget_allocated","newTargetCountries","cancel","includeChange"],"sourceRoot":"src/components/targetcountry","sources":["TargetCountryCard.vue"],"sourcesContent":["<template>\r\n    <v-form\r\n        ref=\"form\"\r\n        v-model=\"valid\">\r\n        <v-card class=\"mt-3 mx-3\">\r\n            <v-card-title class=\"py-0\">\r\n                Select Countries and Set Budgets\r\n                <v-spacer></v-spacer>\r\n                <CardIcons\r\n                    :showEditIcon=\"true\"\r\n                    :showHideIcon=\"true\"\r\n                    @edit=\"(locked = !locked)\"\r\n                    @hide=\"$emit('hide')\"\r\n                    cardType=\"Linked Countries\" />\r\n            </v-card-title>\r\n            <v-divider></v-divider>\r\n            <v-card-text>\r\n                <v-row class=\"text--disabled\">\r\n                    <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">Phase Budget:</v-col>\r\n                    <v-col cols=\"auto\" class=\"d-flex align-center\">\r\n                        <v-text-field\r\n                            :value=\"selectedPhase.budget\"\r\n                            label=\"Budget\"\r\n                            outlined\r\n                            dense\r\n                            disabled\r\n                            hide-details>\r\n                        </v-text-field>\r\n                        <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">\r\n                            <v-text-field\r\n                                :value=\"selectedPhase.auto_allocate ? 'Yes' : 'No'\"\r\n                                label=\"Budget Autoallocated?\"\r\n                                outlined\r\n                                dense\r\n                                disabled\r\n                                hide-details>\r\n                            </v-text-field>\r\n                        </v-col>\r\n                    </v-col>\r\n                    <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">Strategy Budget:</v-col>\r\n                    <v-col cols=\"auto\" class=\"d-flex align-center\">\r\n                        <v-text-field\r\n                            :value=\"selectedStrategy.budget\"\r\n                            label=\"Budget\"\r\n                            outlined\r\n                            dense\r\n                            disabled\r\n                            hide-details>\r\n                        </v-text-field>\r\n                        <v-col cols=\"auto\" class=\"py-0 d-flex align-center\">\r\n                            <v-text-field\r\n                                :value=\"selectedStrategy.auto_allocate ? 'Yes' : 'No'\"\r\n                                label=\"Budget Autoallocated?\"\r\n                                outlined\r\n                                dense\r\n                                disabled\r\n                                hide-details>\r\n                            </v-text-field>\r\n                        </v-col>\r\n                    </v-col>\r\n                </v-row>\r\n            </v-card-text>\r\n\r\n            <v-card-text>\r\n                <v-sheet\r\n                    class=\"mb-3 grey\"\r\n                    tile\r\n                    outlined>\r\n\r\n                    <v-data-table\r\n                        :headers=\"headers\"\r\n                        :items=\"items\"\r\n                        hide-default-footer\r\n                        class=\"pb-3\">\r\n\r\n                        <template v-slot:body=\"{ items }\">\r\n                            <tbody>\r\n\r\n                                <tr v-for=\"(item, itemIndex) in items\" :key=\"itemIndex\">\r\n                                    <td>{{ item.country_name }}</td>\r\n\r\n                                    <td class=\"d-flex justify-center align-center\">\r\n                                        <v-checkbox\r\n                                            v-model=\"item.include\"\r\n                                            color=\"secondary\"\r\n                                            dense\r\n                                            @change=\"includeChange(item)\"\r\n                                            :readonly=\"locked\"></v-checkbox>\r\n                                    </td>\r\n                                    <td>\r\n                                        <v-text-field\r\n                                            :disabled=\"!item.include\"\r\n                                            :readonly=\"locked\"\r\n                                            v-model.number=\"item.budget\"\r\n                                            label=\"Strategy / Country Budget\"\r\n                                            :rules=\"item.include ? [rules.notEmpty, rules.inRange] : []\"\r\n                                            type=\"number\"\r\n                                            dense\r\n                                            hide-details\r\n                                            class=\"shrink rounded-0\"\r\n                                            outlined>\r\n                                        </v-text-field>\r\n                                    </td>\r\n                                    <td class=\"d-flex justify-center align-center\">\r\n                                        <v-checkbox\r\n                                            v-model=\"item.auto_allocate\"\r\n                                            :disabled=\"item.budget <= 0\"\r\n                                            :readonly=\"locked\"\r\n                                            dense\r\n                                            color=\"secondary\"></v-checkbox>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </template>\r\n                    </v-data-table>\r\n                </v-sheet>\r\n                <div class=\"caption text--disabled\">\r\n                    <span>Last edit:{{ targetCountriesLastEdited.toLocaleDateString((\"en-GB\")) }}</span>\r\n                    <span> {{ targetCountriesLastEdited.toLocaleTimeString((\"en-GB\")) }}</span>\r\n                </div>\r\n            </v-card-text>\r\n            <v-card-actions v-if=\"!locked\">\r\n                <v-spacer></v-spacer>\r\n                <v-btn\r\n                    class=\"grey lighten-1 mr-3 rounded-0 text-capitalize\"\r\n                    light\r\n                    depressed\r\n                    @click=\"cancel\">\r\n                    Cancel\r\n                </v-btn>\r\n                <v-btn\r\n                    class=\"mr-3 success rounded-0 text-capitalize\"\r\n                    depressed\r\n                    :disabled=\"(!valid)\"\r\n                    @click=\"save\">\r\n                    Save\r\n                </v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n    </v-form>\r\n</template>\r\n<script>\r\nimport CardIcons from '@/components/shared/CardIcons'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'CountryCard',\r\n    components: {\r\n        CardIcons,\r\n    },\r\n    data() {\r\n        return {\r\n            headers: [\r\n                {\r\n                    text: 'Country',\r\n                    align: 'center',\r\n                    sortable: false,\r\n                    value: 'country_name',\r\n                    class: \"text-subtitle-1 black--text\",\r\n                },\r\n                { text: 'Include?', align: 'center', value: 'include', class: \"text-subtitle-1 black--text\" },\r\n                { text: 'Budget', align: 'center', value: 'budget', class: \"text-subtitle-1 black--text\", },\r\n                { text: 'Auto-allocate?', align: 'center', value: 'autoallocate', class: \"text-subtitle-1 black--text\", },\r\n            ],\r\n            items: [],\r\n            locked: true,\r\n            valid: false,\r\n            rules: {\r\n                required: (v => !!v || \"Required\"),\r\n                notEmpty: (v => (v.toString().length > 0) || \"Budget should be between 0 and 10,000,000\"),\r\n                inRange: (v => (Number.isInteger(Number(v)) && v >= 0 && v <= 10000000) || \"Budget should be between 0 and 10,000,000\"),\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedStrategy: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.strategy\r\n            }\r\n        },\r\n        storedTargetCountries: {\r\n            get() {\r\n                return this.$store.state.storedTargetCountries\r\n            }\r\n        },\r\n        storedCountries: {\r\n            get() {\r\n                return this.$store.state.storedCountries\r\n            }\r\n        },\r\n        targetCountriesLastEdited: {\r\n            get() {\r\n                return new Date(Math.max(...this.storedTargetCountries.map(e => new Date(e.date_modified))));\r\n            }\r\n        },\r\n    },\r\n    watch: {\r\n        async selectedStrategy(newValue) {\r\n            await this.getTargetCountries()\r\n            this.createItems()\r\n        },\r\n        async storedTargetCountries(newValue) {\r\n            this.createItems()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.getCountries()\r\n        this.createItems()\r\n    },\r\n    methods: {\r\n        async getCountries() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/countries/`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('storeCountries', response.data)\r\n        },\r\n        async getTargetCountries() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`api/v1/targetcountries`, {\r\n                    params: {\r\n                        strategy: this.selectedStrategy.id,\r\n                    }\r\n                })\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh Strategy's Stored  Target Country data \r\n            this.$store.dispatch('storeTargetCountries', response.data)\r\n        },\r\n        createItems() {\r\n            this.items = []\r\n            // Table Data - check box AND budget field for each country\r\n            var index = 0\r\n            this.storedCountries.forEach((country) => {\r\n                var item = {\r\n                    'country_id': country.id,\r\n                    'country_name': country.name,\r\n                    'country_code': country.code,\r\n                    'include': false,\r\n                    'budget': '',\r\n                    'auto_allocate': false,\r\n                }\r\n                // See if this country is already a target country\r\n                let foundTargetCountry = this.storedTargetCountries.find(targetCountry =>\r\n                    targetCountry.country == item.country_id\r\n                )\r\n                // Update table data item with target country settings\r\n                if (foundTargetCountry) {\r\n                    item.include = true\r\n                    item.budget = foundTargetCountry.budget\r\n                    item.budget_allocated = foundTargetCountry.budget_allocated\r\n                    item.auto_allocate = foundTargetCountry.auto_allocate\r\n                }\r\n                this.items.push(item)\r\n                // console.log('TargetCountryCard: createItems: item', item)\r\n            })\r\n        },\r\n        save() {\r\n            // Find Deleted countries\r\n            // this.storedTargetCountries.forEach((targetCountry) => {\r\n            //     let foundTargetCountry = this.items.find((item) => {\r\n            //         console.log('TagetCountryCard:save: found:', targetCountry)\r\n            //         targetCountry.country == item.country_id\r\n            //     })\r\n            //     if (!foundTargetCountry) {\r\n            //         console.log('TagetCountryCard:save: not found:', targetCountry)\r\n            //     }\r\n            // })\r\n            // Build array of countries\r\n            var newTargetCountries = []\r\n            this.items.forEach((item) => {\r\n                // If country is included build an object to be created/updated to the database\r\n                if (item.include) {\r\n                    let itemObj = {\r\n                        strategy: this.selectedStrategy.id,\r\n                        country: item.country_id,\r\n                        code: item.country_code,\r\n                        name: item.country_name,\r\n                        budget: item.budget,\r\n                        auto_allocate: item.auto_allocate,\r\n                        budget_allocated: 0,\r\n                    }\r\n                    newTargetCountries.push(itemObj)\r\n                    // console.log('TargetCountryCard: create/update: itemObj', itemObj)\r\n                }\r\n                else // If the country isn't included now but it was previously then we need to delete it from the database\r\n                {\r\n                    this.storedTargetCountries.find(targetCountry =>\r\n                        targetCountry.country == item.country_id)\r\n                }\r\n            })\r\n            var newCountries = this.items.filter(i => { return i.include })\r\n            console.log('TagetCountryCard:save: newCountries: ', newCountries)\r\n            var newCountryIds = this.storedTargetCountries.map(i => { return i.country })\r\n            console.log('TagetCountryCard:save: newCountryIds: ', newCountryIds)\r\n            var oldCountryIds = this.storedTargetCountries.map(i => { return i.country })\r\n            console.log('TagetCountryCard:save: oldCountryIds: ', oldCountryIds)\r\n\r\n            this.$emit('update-target-countries', newTargetCountries)\r\n            this.locked = true\r\n        },\r\n        cancel() {\r\n            this.locked = true\r\n            this.createItems()\r\n        },\r\n        includeChange(item) {\r\n            !item.include ? item.budget = '' : null\r\n        },\r\n    }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}