{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PlanCalendar from '@/components/plan/PlanCalendar';\nimport PhaseTabs from '@/components/phase/PhaseTabs';\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog';\nimport StrategyTabs from '@/components/strategy/StrategyTabs';\nimport StrategyEditDialog from '@/components/dialogs/StrategyEditDialog';\nimport CountryChannelEditDialog from '@/components/dialogs/CountryChannelEditDialog';\nimport axios from 'axios';\nexport default {\n  name: 'PlanDetailView',\n  components: {\n    PlanCalendar,\n    PhaseTabs,\n    PhaseEditDialog,\n    StrategyTabs,\n    StrategyEditDialog,\n    CountryChannelEditDialog\n  },\n  data() {\n    return {\n      plan: '',\n      showEditPhaseDialog: false,\n      showEditStrategyDialog: false,\n      showEditCountryChannelDialog: false,\n      newPhase: {\n        name: '',\n        description: '',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10)\n      },\n      initialStrategy: {\n        name: 'Strategy name',\n        description: 'Strategy description',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        countries: []\n      },\n      newStrategy: {\n        name: '',\n        description: '',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        phase: '',\n        countries: []\n      },\n      editPhase: {},\n      editStrategy: {}\n    };\n  },\n  computed: {\n    newPhaseStrategyData: {\n      get() {\n        this.newPhase.strategies = [this.initialStrategy];\n        return this.newPhase;\n      }\n    },\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    showPlanCalendar: {\n      get() {\n        return this.$store.state.show.planCalendar;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    },\n    showPhaseTabs: {\n      get() {\n        return this.$store.state.show.phaseTabs;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    },\n    selectedStrategyIndex: {\n      get() {\n        return this.$store.state.selectedStrategyData.index;\n      }\n    },\n    showStrategyTabs: {\n      get() {\n        return this.$store.state.show.strategyTabs;\n      }\n    }\n  },\n  methods: {\n    async getPlan() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/plan/${this.selectedPlan.id}`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('selectPlan', response.data);\n    },\n    async updatePhase(updatePayload) {\n      updatePayload.phase.plan = this.selectedPlan.id;\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/phase/${updatePayload.phase.id}/`, updatePayload.phase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBPhaseProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success', updatePayload.changeRoute);\n    },\n    async createPhase(createPhase) {\n      // Add current plan to new phase\n      createPhase.plan = this.selectedPlan.id;\n      var response = '';\n      try {\n        response = await axios.post(`api/v1/phases/`, createPhase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBPhaseProcessing(0, `Successfully created Phase \"${response.data.name}\"`);\n    },\n    async deletePhase(deletePhase) {\n      // A pLan must have at least one Phase\n      if (this.selectedPlan.phases.length === 1) {\n        // Display Snackbar message\n        this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text');\n      } else {\n        var response = '';\n        try {\n          response = await axios.delete(`api/v1/phase/${deletePhase.id}/`);\n        } catch (error) {\n          console.log(error);\n        }\n        // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n        this.endDBPhaseProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`);\n      }\n    },\n    async endDBPhaseProcessing(phaseIndex, message, alertType = 'success', changeRoute = true) {\n      // Refresh updated Plan and save phase to store\n      await this.getPlan();\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[phaseIndex],\n        index: phaseIndex\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Display Snackbar message\n      this.showSnackBar(message, alertType);\n\n      // Change route to selected phase\n      changeRoute ? this.$router.push(this.selectedPhase.get_absolute_url) : '';\n    },\n    openEditPhaseDialog(editPhase) {\n      this.editPhase = editPhase;\n      this.showEditPhaseDialog = true;\n    },\n    openNewPhaseDialog() {\n      this.editPhase = this.newPhaseStrategyData;\n      this.showEditPhaseDialog = true;\n    },\n    async updateStrategy(updatePayload) {\n      // If no countries added add an empty array to keep the serializer happy\n      if (!updatePayload.strategy.countries) {\n        updatePayload.strategy.countries = [];\n      }\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/strategy/${updatePayload.strategy.id}/`, updatePayload.strategy);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n      this.endDBStrategyProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success', updatePayload.changeRoute);\n    },\n    async createStrategy(createStrategy) {\n      // Add current plan to new strategy\n      createStrategy.phase = this.selectedPhase.id;\n      var response = '';\n      try {\n        response = await axios.post(`api/v1/strategies/`, createStrategy);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n      this.endDBStrategyProcessing(0, `Successfully created Strategy \"${response.data.name}\"`);\n    },\n    async deleteStrategy(deleteStrategy) {\n      // A pLan must have at least one Strategy\n      if (this.selectedPhase.strategies.length === 1) {\n        // Display Snackbar message\n        this.showSnackBar(`Unable to delete Strategy \"${this.selectedStrategy.name}\" - a Phase must have at least 1 Strategy`, 'warning', 'black--text');\n      } else {\n        var response = '';\n        try {\n          response = await axios.delete(`api/v1/strategy/${deleteStrategy.id}/`);\n        } catch (error) {\n          console.log(error);\n        }\n        // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n        this.endDBStrategyProcessing(0, `Succesfully deleted Strategy \"${this.selectedStrategy.name}\"`);\n      }\n    },\n    async endDBStrategyProcessing(strategyIndex, message, alertType = 'success', changeRoute = true) {\n      // Refresh updated Plan and save strategy to store\n      await this.getPlan();\n\n      // Refresh Stored Phase data\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[this.selectedPhaseIndex],\n        index: this.selectedPhaseIndex\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Refresh Stored Strategy data\n      const strategyDataPayload = {\n        strategy: this.selectedPhase.strategies[strategyIndex],\n        index: strategyIndex\n      };\n      this.$store.dispatch('selectStrategyData', strategyDataPayload);\n\n      // Display Snackbar message\n      this.showSnackBar(message, alertType);\n\n      // Change route to selected strategy\n      changeRoute ? this.$router.push(this.selectedStrategy.get_absolute_url) : '';\n    },\n    openEditStrategyDialog(editStrategy) {\n      this.editStrategy = editStrategy;\n      this.showEditStrategyDialog = true;\n    },\n    openNewStrategyDialog() {\n      this.editStrategy = this.newStrategy;\n      this.showEditStrategyDialog = true;\n    },\n    async getCountries() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/countries`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('storeCountries', response.data);\n    },\n    async getChannels() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/channels`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('storeChannels', response.data);\n    },\n    openEditCountryChannelDialog(editStrategy) {\n      this.getCountries();\n      this.getChannels();\n      this.editStrategy = editStrategy;\n      this.showEditCountryChannelDialog = true;\n    },\n    prepCountryChannelDataForUpdate(savePayload) {\n      console.log(savePayload);\n      // Build array of countries\n      var selectedCountries = [];\n      savePayload.countryChannelData.forEach(item => {\n        var countryObj = {\n          id: item.countryId\n        };\n        selectedCountries.push(countryObj);\n      });\n      this.selectedStrategy.countries = selectedCountries;\n      var updatePayload = {\n        strategy: this.selectedStrategy\n      };\n      this.updateStrategy(updatePayload);\n      // console.log(selectedCountries)\n    },\n\n    async updateCountry() {\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/strategy/${updatePayload.strategy.id}/`, updatePayload.strategy);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n      this.endDBStrategyProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success', updatePayload.changeRoute);\n    },\n    showSnackBar(message, alertType, text_color = 'white--text') {\n      const payload = {\n        text: `${message}`,\n        alerttype: alertType,\n        contentclass: text_color\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    }\n  }\n};","map":{"version":3,"mappings":";AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAb;QACAc;QACAC;QACAC;MACA;MACAC;QACAjB;QACAc;QACAC;QACAC;QACAE;MACA;MACAC;QACAnB;QACAc;QACAC;QACAC;QACAI;QACAF;MACA;MACAG;MACAC;IACA;EACA;EACAC;IACAC;MACAC;QACA;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;MACA;IACA;IACAK;MACAL;QACA;MACA;IACA;IACAM;MACAN;QACA;MACA;IACA;IACAO;MACAP;QACA;MACA;IACA;IACAQ;MACAR;QACA;MACA;IACA;EACA;EACAS;IACA;MACA;MACA;QACAC;MACA,EACA;QACAC;MACA;MACA;IACA;IACA;MACAC;MACA;MACA;QACAF;MACA,EACA;QACAC;MACA;MACA;MACA;IACA;IACA;MACA;MACAE;MAEA;MACA;QACAH;MACA,EACA;QACAC;MACA;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;UACAD;QACA,EACA;UACAC;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;MACA;QAAAhB;QAAAmB;MAAA;MACA;;MAEA;MACA;;MAEA;MACAC;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACA;MACA;MACA;QACAL;MACA;MACA;MACA;QACAF;MACA,EACA;QACAC;MACA;MACA;MACA;IACA;IACA;MACA;MACAO;MACA;MACA;QACAR;MACA,EACA;QACAC;MACA;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;UACAD;QACA,EACA;UACAC;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;;MAEA;MACA;QAAAhB;QAAAmB;MAAA;MACA;;MAEA;MACA;QAAAK;QAAAL;MAAA;MACA;;MAEA;MACA;;MAEA;MACAC;IACA;IACAK;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACA;MACA;MACA;QACAX;MACA,EACA;QACAC;MACA;MACA;IACA;IACA;MACA;MACA;QACAD;MACA,EACA;QACAC;MACA;MACA;IACA;IACAW;MACA;MACA;MACA;MACA;IACA;IACAC;MACAZ;MACA;MACA;MACAa;QACA;UACAC;QACA;QACAC;MACA;MACA;MACA;QACAP;MACA;MACA;MACA;IACA;;IACA;MACA;MACA;QACAT;MACA,EACA;QACAC;MACA;MACA;MACA;IACA;IACAgB;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;EACA;AACA","names":["name","components","PlanCalendar","PhaseTabs","PhaseEditDialog","StrategyTabs","StrategyEditDialog","CountryChannelEditDialog","data","plan","showEditPhaseDialog","showEditStrategyDialog","showEditCountryChannelDialog","newPhase","description","start_date","end_date","initialStrategy","countries","newStrategy","phase","editPhase","editStrategy","computed","newPhaseStrategyData","get","selectedPlan","showPlanCalendar","selectedPhase","selectedPhaseIndex","showPhaseTabs","selectedStrategy","selectedStrategyIndex","showStrategyTabs","methods","response","console","updatePayload","createPhase","index","changeRoute","openEditPhaseDialog","openNewPhaseDialog","createStrategy","strategy","openEditStrategyDialog","openNewStrategyDialog","openEditCountryChannelDialog","prepCountryChannelDataForUpdate","savePayload","id","selectedCountries","showSnackBar","text","alerttype","contentclass"],"sourceRoot":"src/views","sources":["PlanDetailView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-row class=\"mx-2\">\r\n            <v-col cols=\"12\">\r\n                <PlanCalendar\r\n                    :showPlanCalendar=\"showPlanCalendar\"\r\n                    @open-newphase-dialog=\"openNewPhaseDialog\"\r\n                    @open-editphase-dialog=\"openEditPhaseDialog\" />\r\n            </v-col>\r\n        </v-row>\r\n        <v-row class=\"mx-2\">\r\n            <v-col cols=\"12\">\r\n                <PhaseTabs\r\n                    :showPhaseTabs=\"showPhaseTabs\"\r\n                    @open-newphase-dialog=\"openNewPhaseDialog\"\r\n                    @open-editphase-dialog=\"openEditPhaseDialog\" />\r\n            </v-col>\r\n        </v-row>\r\n        <v-row class=\"mx-2\">\r\n            <v-col cols=\"12\">\r\n                <StrategyTabs\r\n                    :showStrategyTabs=\"showStrategyTabs\"\r\n                    @open-newstrategy-dialog=\"openNewStrategyDialog\"\r\n                    @open-editstrategy-dialog=\"openEditStrategyDialog\"\r\n                    @open-editcountrychannel-dialog=\"openEditCountryChannelDialog\" />\r\n            </v-col>\r\n        </v-row>\r\n        <!-- <v-col offset-lg=\"4\" offset-sm=\"0\" lg=\"8\" sm=\"12\"></v-col> -->\r\n        <!-- <v-row>\r\n            <v-col lg=\"8\"> -->\r\n\r\n        <PhaseEditDialog\r\n            v-model=\"showEditPhaseDialog\"\r\n            :phase=\"editPhase\"\r\n            @create-phase=\"createPhase\"\r\n            @update-phase=\"updatePhase\"\r\n            @delete-phase=\"deletePhase\" />\r\n\r\n        <StrategyEditDialog\r\n            v-model=\"showEditStrategyDialog\"\r\n            :strategy=\"editStrategy\"\r\n            @create-strategy=\"createStrategy\"\r\n            @update-strategy=\"updateStrategy\"\r\n            @delete-strategy=\"deleteStrategy\" />\r\n\r\n        <CountryChannelEditDialog\r\n            v-model=\"showEditCountryChannelDialog\"\r\n            :strategy=\"editStrategy\"\r\n            @update-strategy-country-channel=\"prepCountryChannelDataForUpdate\" />\r\n        <!-- </v-col>\r\n        </v-row> -->\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport PlanCalendar from '@/components/plan/PlanCalendar'\r\nimport PhaseTabs from '@/components/phase/PhaseTabs'\r\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog'\r\nimport StrategyTabs from '@/components/strategy/StrategyTabs'\r\nimport StrategyEditDialog from '@/components/dialogs/StrategyEditDialog'\r\nimport CountryChannelEditDialog from '@/components/dialogs/CountryChannelEditDialog'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'PlanDetailView',\r\n    components: {\r\n        PlanCalendar,\r\n        PhaseTabs,\r\n        PhaseEditDialog,\r\n        StrategyTabs,\r\n        StrategyEditDialog,\r\n        CountryChannelEditDialog,\r\n    },\r\n    data() {\r\n        return {\r\n            plan: '',\r\n            showEditPhaseDialog: false,\r\n            showEditStrategyDialog: false,\r\n            showEditCountryChannelDialog: false,\r\n            newPhase: {\r\n                name: '',\r\n                description: '',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n            },\r\n            initialStrategy: {\r\n                name: 'Strategy name',\r\n                description: 'Strategy description',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n                countries: []\r\n            },\r\n            newStrategy: {\r\n                name: '',\r\n                description: '',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n                phase: '',\r\n                countries: [],\r\n            },\r\n            editPhase: {},\r\n            editStrategy: {},\r\n        }\r\n    },\r\n    computed: {\r\n        newPhaseStrategyData: {\r\n            get() {\r\n                this.newPhase.strategies = [this.initialStrategy]\r\n                return this.newPhase\r\n            }\r\n        },\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan\r\n            }\r\n        },\r\n        showPlanCalendar: {\r\n            get() {\r\n                return this.$store.state.show.planCalendar\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedPhaseIndex: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.index\r\n            },\r\n        },\r\n        showPhaseTabs: {\r\n            get() {\r\n                return this.$store.state.show.phaseTabs\r\n            }\r\n        },\r\n        selectedStrategy: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.strategy\r\n            }\r\n        },\r\n        selectedStrategyIndex: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.index\r\n            }\r\n        },\r\n        showStrategyTabs: {\r\n            get() {\r\n                return this.$store.state.show.strategyTabs\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        async getPlan() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/plan/${this.selectedPlan.id}`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('selectPlan', response.data)\r\n        },\r\n        async updatePhase(updatePayload) {\r\n            updatePayload.phase.plan = this.selectedPlan.id\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/phase/${updatePayload.phase.id}/`, updatePayload.phase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBPhaseProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success', updatePayload.changeRoute)\r\n        },\r\n        async createPhase(createPhase) {\r\n            // Add current plan to new phase\r\n            createPhase.plan = this.selectedPlan.id\r\n\r\n            var response = ''\r\n            try {\r\n                response = await axios.post(`api/v1/phases/`, createPhase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBPhaseProcessing(0, `Successfully created Phase \"${response.data.name}\"`)\r\n        },\r\n        async deletePhase(deletePhase) {\r\n            // A pLan must have at least one Phase\r\n            if (this.selectedPlan.phases.length === 1) {\r\n                // Display Snackbar message\r\n                this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text')\r\n            } else {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.delete(`api/v1/phase/${deletePhase.id}/`)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n                // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n                this.endDBPhaseProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`)\r\n            }\r\n        },\r\n        async endDBPhaseProcessing(phaseIndex, message, alertType = 'success', changeRoute = true) {\r\n            // Refresh updated Plan and save phase to store\r\n            await this.getPlan()\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[phaseIndex], index: phaseIndex }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar(message, alertType)\r\n\r\n            // Change route to selected phase\r\n            changeRoute ? this.$router.push(this.selectedPhase.get_absolute_url) : ''\r\n        },\r\n        openEditPhaseDialog(editPhase) {\r\n            this.editPhase = editPhase\r\n            this.showEditPhaseDialog = true\r\n        },\r\n        openNewPhaseDialog() {\r\n            this.editPhase = this.newPhaseStrategyData\r\n            this.showEditPhaseDialog = true\r\n        },\r\n        async updateStrategy(updatePayload) {\r\n            // If no countries added add an empty array to keep the serializer happy\r\n            if (!updatePayload.strategy.countries) {\r\n                updatePayload.strategy.countries = []\r\n            }\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/strategy/${updatePayload.strategy.id}/`, updatePayload.strategy)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n            this.endDBStrategyProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success', updatePayload.changeRoute)\r\n        },\r\n        async createStrategy(createStrategy) {\r\n            // Add current plan to new strategy\r\n            createStrategy.phase = this.selectedPhase.id\r\n            var response = ''\r\n            try {\r\n                response = await axios.post(`api/v1/strategies/`, createStrategy)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n            this.endDBStrategyProcessing(0, `Successfully created Strategy \"${response.data.name}\"`)\r\n        },\r\n        async deleteStrategy(deleteStrategy) {\r\n            // A pLan must have at least one Strategy\r\n            if (this.selectedPhase.strategies.length === 1) {\r\n                // Display Snackbar message\r\n                this.showSnackBar(`Unable to delete Strategy \"${this.selectedStrategy.name}\" - a Phase must have at least 1 Strategy`, 'warning', 'black--text')\r\n            } else {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.delete(`api/v1/strategy/${deleteStrategy.id}/`)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n                // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n                this.endDBStrategyProcessing(0, `Succesfully deleted Strategy \"${this.selectedStrategy.name}\"`)\r\n            }\r\n        },\r\n        async endDBStrategyProcessing(strategyIndex, message, alertType = 'success', changeRoute = true) {\r\n            // Refresh updated Plan and save strategy to store\r\n            await this.getPlan()\r\n\r\n            // Refresh Stored Phase data\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[this.selectedPhaseIndex], index: this.selectedPhaseIndex }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Refresh Stored Strategy data\r\n            const strategyDataPayload = { strategy: this.selectedPhase.strategies[strategyIndex], index: strategyIndex }\r\n            this.$store.dispatch('selectStrategyData', strategyDataPayload)\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar(message, alertType)\r\n\r\n            // Change route to selected strategy\r\n            changeRoute ? this.$router.push(this.selectedStrategy.get_absolute_url) : ''\r\n        },\r\n        openEditStrategyDialog(editStrategy) {\r\n            this.editStrategy = editStrategy\r\n            this.showEditStrategyDialog = true\r\n        },\r\n        openNewStrategyDialog() {\r\n            this.editStrategy = this.newStrategy\r\n            this.showEditStrategyDialog = true\r\n        },\r\n        async getCountries() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/countries`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('storeCountries', response.data)\r\n        },\r\n        async getChannels() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/channels`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('storeChannels', response.data)\r\n        },\r\n        openEditCountryChannelDialog(editStrategy) {\r\n            this.getCountries()\r\n            this.getChannels()\r\n            this.editStrategy = editStrategy\r\n            this.showEditCountryChannelDialog = true\r\n        },\r\n        prepCountryChannelDataForUpdate(savePayload) {\r\n            console.log(savePayload)\r\n            // Build array of countries\r\n            var selectedCountries = []\r\n            savePayload.countryChannelData.forEach((item) => {\r\n                var countryObj = {\r\n                    id: item.countryId,\r\n                }\r\n                selectedCountries.push(countryObj)\r\n            })\r\n            this.selectedStrategy.countries = selectedCountries\r\n            var updatePayload = {\r\n                strategy: this.selectedStrategy\r\n            }\r\n            this.updateStrategy(updatePayload)\r\n            // console.log(selectedCountries)\r\n        },\r\n        async updateCountry() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/strategy/${updatePayload.strategy.id}/`, updatePayload.strategy)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n            this.endDBStrategyProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success', updatePayload.changeRoute)\r\n        },\r\n        showSnackBar(message, alertType, text_color = 'white--text') {\r\n            const payload = { text: `${message}`, alerttype: alertType, contentclass: text_color }\r\n            this.$store.dispatch('showSnackBar', payload)\r\n        },\r\n    }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}