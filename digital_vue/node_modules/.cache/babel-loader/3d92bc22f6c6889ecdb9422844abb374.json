{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  props: {\n    value: Boolean,\n    strategy: Object\n  },\n  data() {\n    return {\n      tableHeaders: [],\n      tableItems: [],\n      tableItemLabels: [],\n      budgetValues: [],\n      countryChannelData: []\n    };\n  },\n  computed: {\n    show: {\n      get() {\n        return this.value;\n      },\n      set(value) {\n        this.$emit('input', value);\n      }\n    },\n    storedCountries: {\n      get() {\n        return this.$store.state.storedCountries;\n      }\n    },\n    storedChannels: {\n      get() {\n        return this.$store.state.storedChannels;\n      }\n    },\n    // Hack to set width of v-dialog\n    width: {\n      get() {\n        switch (this.$vuetify.breakpoint.name) {\n          case 'xs':\n            return 220;\n          case 'sm':\n            return 600;\n          case 'md':\n            return 800;\n          case 'lg':\n            return 1200;\n          case 'xl':\n            return 1600;\n        }\n      }\n    }\n  },\n  mounted() {\n    // We need an unknown number of headers and data item columns - depends on the number of countries\n    // These functions create th ebespoke, unique headers / column names and data and capture the user choices in \n    // \"countryChannelData\" - which is then passed back to the parent to update the database    \n    this.createTableHeaders();\n    this.createTableItemLabels();\n    this.createDataItems();\n  },\n  methods: {\n    createTableHeaders() {\n      // Header 1: Create Channel Header\n      var channelCodeHeader = {\n        text: 'Channel',\n        align: 'start',\n        sortable: false,\n        value: 'channelCode',\n        class: \"secondary white--text text-subtitle-1 font-weight-bold\"\n      };\n      this.tableHeaders.push(channelCodeHeader);\n\n      // Headers 2 to nnn (2 header per country: \n      var index = 0;\n      this.storedCountries.forEach(country => {\n        // Create a header for each country - where we'll place a checkbox \n        var countryHeader = {\n          text: country.code,\n          align: 'start',\n          sortable: false,\n          value: 'checked' + country.code + index,\n          class: \"secondary white--text text-subtitle-1 font-weight-bold\"\n        };\n        this.tableHeaders.push(countryHeader);\n\n        // Create a header for each country budget - where we'll place a budget field\n        var budgetHeader = {\n          text: 'Budget',\n          align: 'center',\n          sortable: false,\n          value: \"budget\" + country.code + index,\n          class: \"secondary white--text text-subtitle-1 font-weight-bold\"\n        };\n        this.tableHeaders.push(budgetHeader);\n\n        // Increment the count used to make the value field name unique\n        // This must match the field name in the actual table row\n        index += 1;\n      });\n      // console.log('tableHeaders: ', this.tableHeaders)\n    },\n\n    createTableItemLabels() {\n      // Create a label for each country and each country budget\n      // County Labels\n      // Used to unqiuely identify a country per channel - and the set the value of the checkbox when\n      // We create the data items\n      var index = 0;\n      this.storedCountries.forEach(country => {\n        var checkBoxBudgetLabel = {\n          checked: 'checked' + country.code + index,\n          budget: 'budget' + country.code + index\n        };\n        this.tableItemLabels.push(checkBoxBudgetLabel);\n\n        // Increment the count used to make the value field name unique\n        // This must match the field name in the header row\n        index += 1;\n      });\n      // console.log('tableItemLabels: ', this.tableItemLabels)\n      // Reset count for every country\n      index = 0;\n    },\n    createDataItems() {\n      // Table Data\n      // Cycle through each country for every channel - creating:\n      // Value 1 per channel and a value per\n      // Value 2 & 2+1 per country (checkbox - with the checkboxValue label e.g. checkedDE01, checkedGB01)\n      this.storedChannels.forEach(channel => {\n        // Value 1: Channel\n        var item = {\n          'channelCode': channel.code\n        };\n        // Values 2 to nnn: Country check box AND budget field for each channel / country combination\n        var index = 0;\n        this.storedCountries.forEach(country => {\n          // Set country / channel checkbox value\n          item = Object.assign({\n            [this.tableItemLabels[index].checked]: false\n          }, item);\n\n          // Set country / channel budget value\n          item = Object.assign({\n            [this.tableItemLabels[index].budget]: ''\n          }, item);\n          index += 1;\n        });\n        this.tableItems.push(item);\n      });\n      // console.log('tableItems: ', this.tableItems)\n    },\n\n    checkBoxChange(currentItem, labels, labelIndex, itemIndex) {\n      if (currentItem[labels.checked]) {\n        var countryChannelObj = {\n          channelId: this.storedChannels[itemIndex].id,\n          channelCode: currentItem.channelCode,\n          channelName: this.storedChannels[itemIndex].name,\n          countryId: this.storedCountries[labelIndex].id,\n          countryCode: this.storedCountries[labelIndex].code,\n          countryName: this.storedCountries[labelIndex].name,\n          countryChannelBudget: 0\n        };\n        this.countryChannelData.push(countryChannelObj);\n      } else {\n        let currentCountry = this.storedCountries[index].code;\n        this.countryChannelData = this.countryChannelData.filter(function (savedItem) {\n          return !(savedItem.channelCode === currentItem.channelCode && savedItem.countryCode === currentCountry);\n        });\n      }\n      this.displayChanges();\n    },\n    budgetFieldChange(currentItem, index, event) {\n      let currentCountryCode = this.storedCountries[index].code;\n      let savedObj = this.countryChannelData.find(savedItem => savedItem.channelCode === currentItem.channelCode && savedItem.countryCode === currentCountryCode);\n      savedObj.countryChannelBudget = +event;\n      this.displayChanges();\n    },\n    save() {\n      // Build array of countries\n      var selectedCountries = [];\n      this.countryChannelData.forEach(item => {\n        var countryObj = {\n          id: item.countryId\n        };\n        selectedCountries.push(countryObj);\n      });\n      var selectedChannels = [];\n      this.countryChannelData.forEach(item => {\n        var countryChannelObj = {\n          countryId: item.countryId,\n          channelId: item.channelId,\n          countryChannelBudget: item.countryChannelBudget\n        };\n        selectedChannels.push(countryChannelObj);\n      });\n      var savePayload = {\n        strategy: this.strategy,\n        countryChannelData: this.countryChannelData\n      };\n      this.$emit('update-strategy-country-channel', savePayload);\n    },\n    displayChanges() {\n      console.log('# items: ', this.countryChannelData.length);\n      this.countryChannelData.forEach(item => {\n        console.log('item: ', item);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAgGA;AAEA;EACAA;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;MACAC;QACA;MACA;IACA;IACAC;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACA;IACAI;MACAJ;QACA;UACA;YAAA;UACA;YAAA;UACA;YAAA;UACA;YAAA;UACA;YAAA;QAAA;MAEA;IACA;EACA;EACAK;IACA;IACA;IACA;IACA;IACA;IACA;EACA;EACAC;IACAC;MACA;MACA;QACAC;QACAC;QACAC;QACApB;QACAqB;MACA;MACA;;MAEA;MACA;MACA;QACA;QACA;UACAH;UACAC;UACAC;UACApB;UACAqB;QACA;QACA;;QAEA;QACA;UACAH;UACAC;UACAC;UACApB;UACAqB;QACA;QACA;;QAEA;QACA;QACAC;MACA;MACA;IACA;;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;QACA;UACAC;UACAC;QACA;QACA;;QAEA;QACA;QACAH;MACA;MACA;MACA;MACAA;IACA;IACAI;MACA;MACA;MACA;MACA;MACA;QACA;QACA;UACA;QACA;QACA;QACA;QACA;UAEA;UACAC;YACA;UACA;;UAEA;UACAA;YACA;UACA;UAEAL;QACA;QACA;MACA;MACA;IACA;;IACAM;MACA;QACA;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACA;MACA;QACA;QACA;UACA;QACA;MACA;MACA;IACA;IACAC;MACA;MACA,yDACAC;MACAC;MACA;IACA;IACAC;MACA;MACA;MACA;QACA;UACAC;QACA;QACAC;MACA;MACA;MACA;QACA;UACAT;UACAH;UACAM;QACA;QACAO;MACA;MACA;QACAzC;QACAM;MACA;MACA;IACA;IACAoC;MACAC;MACA;QACAA;MACA;IACA;EACA;AAEA","names":["props","value","strategy","data","tableHeaders","tableItems","tableItemLabels","budgetValues","countryChannelData","computed","show","get","set","storedCountries","storedChannels","width","mounted","methods","createTableHeaders","text","align","sortable","class","index","createTableItemLabels","checked","budget","createDataItems","item","checkBoxChange","channelId","channelCode","channelName","countryId","countryCode","countryName","countryChannelBudget","budgetFieldChange","savedItem","savedObj","save","id","selectedCountries","selectedChannels","displayChanges","console"],"sourceRoot":"src/components/dialogs","sources":["CountryChannelEditDialog.vue"],"sourcesContent":["<template>\r\n    <v-form\r\n        ref=\"form\">\r\n        <v-dialog\r\n            v-model=\"show\"\r\n            persistent\r\n            :width=\"width\">\r\n            <v-card>\r\n                <v-card-title>\r\n                    Select Country / Channel combinations\r\n                </v-card-title>\r\n                <v-card-text>\r\n                    <v-sheet\r\n                        class=\"mb-3 black elevation-2\"\r\n                        outlined>\r\n\r\n                        <v-data-table\r\n                            :headers=\"tableHeaders\"\r\n                            :items=\"tableItems\"\r\n                            hide-default-footer\r\n                            class=\"pb-3\">\r\n\r\n\r\n\r\n                            <template v-slot:body=\"{ items, headers }\">\r\n                                <tbody>\r\n                                    <template v-for=\"header in headers\">\r\n                                        <td v-if=\"header.text === 'Budget'\">\r\n                                            <v-text-field\r\n                                                type=\"number\"\r\n                                                dense\r\n                                                hide-details\r\n                                                class=\"shrink rounded-0\"\r\n                                                outlined>\r\n                                            </v-text-field>\r\n                                        </td>\r\n                                        <td v-if=\"header.value.substring(0, 7) === 'checked'\">\r\n                                            <v-checkbox></v-checkbox>\r\n                                        </td>\r\n                                        <td v-else>{{ header.value }}</td>\r\n                                    </template>\r\n\r\n                                    <tr v-for=\"(item, itemIndex) in items\" :key=\"itemIndex\">\r\n                                        <td>\r\n                                            {{ item.channelCode }}\r\n                                        </td>\r\n                                        <template v-for=\"(labels, labelIndex) in tableItemLabels\">\r\n                                            <td>\r\n                                                <v-checkbox\r\n                                                    v-model=\"item[labels.checked]\"\r\n                                                    color=\"secondary\"\r\n                                                    dense\r\n                                                    hide-details\r\n                                                    @change=\"checkBoxChange(item, labels, labelIndex, itemIndex)\"></v-checkbox>\r\n                                            </td>\r\n                                            <td>\r\n                                                <v-text-field\r\n                                                    :disabled=\"!item[labels.checked]\"\r\n                                                    v-model=\"item[labels.budget]\"\r\n                                                    @input=\"budgetFieldChange(item, labelIndex, $event)\"\r\n                                                    label=\"Budget\"\r\n                                                    type=\"number\"\r\n                                                    dense\r\n                                                    hide-details\r\n                                                    class=\"shrink rounded-0\"\r\n                                                    outlined>\r\n                                                </v-text-field>\r\n                                            </td>\r\n                                        </template>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </template>\r\n                        </v-data-table>\r\n                    </v-sheet>\r\n                </v-card-text>\r\n                <v-card-actions>\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn\r\n                        class=\"grey lighten-1 mr-3 rounded-0 text-capitalize\"\r\n                        light\r\n                        depressed\r\n                        @click=\"show = false\">\r\n                        Cancel\r\n                    </v-btn>\r\n                    <v-btn\r\n                        class=\"mr-3 success rounded-0 text-capitalize\"\r\n                        depressed\r\n                        @click=\"save\">\r\n                        Save\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n    </v-form>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    props: {\r\n        value: Boolean,\r\n        strategy: Object,\r\n    },\r\n    data() {\r\n        return {\r\n            tableHeaders: [],\r\n            tableItems: [],\r\n            tableItemLabels: [],\r\n            budgetValues: [],\r\n            countryChannelData: [],\r\n        }\r\n    },\r\n    computed: {\r\n        show: {\r\n            get() {\r\n                return this.value\r\n            },\r\n            set(value) {\r\n                this.$emit('input', value)\r\n            },\r\n        },\r\n        storedCountries: {\r\n            get() {\r\n                return this.$store.state.storedCountries\r\n            }\r\n        },\r\n        storedChannels: {\r\n            get() {\r\n                return this.$store.state.storedChannels\r\n            }\r\n        },\r\n        // Hack to set width of v-dialog\r\n        width: {\r\n            get() {\r\n                switch (this.$vuetify.breakpoint.name) {\r\n                    case 'xs': return 220\r\n                    case 'sm': return 600\r\n                    case 'md': return 800\r\n                    case 'lg': return 1200\r\n                    case 'xl': return 1600\r\n                }\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        // We need an unknown number of headers and data item columns - depends on the number of countries\r\n        // These functions create th ebespoke, unique headers / column names and data and capture the user choices in \r\n        // \"countryChannelData\" - which is then passed back to the parent to update the database    \r\n        this.createTableHeaders()\r\n        this.createTableItemLabels()\r\n        this.createDataItems()\r\n    },\r\n    methods: {\r\n        createTableHeaders() {\r\n            // Header 1: Create Channel Header\r\n            var channelCodeHeader = {\r\n                text: 'Channel',\r\n                align: 'start',\r\n                sortable: false,\r\n                value: 'channelCode',\r\n                class: \"secondary white--text text-subtitle-1 font-weight-bold\",\r\n            }\r\n            this.tableHeaders.push(channelCodeHeader)\r\n\r\n            // Headers 2 to nnn (2 header per country: \r\n            var index = 0\r\n            this.storedCountries.forEach((country) => {\r\n                // Create a header for each country - where we'll place a checkbox \r\n                var countryHeader = {\r\n                    text: country.code,\r\n                    align: 'start',\r\n                    sortable: false,\r\n                    value: 'checked' + country.code + index,\r\n                    class: \"secondary white--text text-subtitle-1 font-weight-bold\",\r\n                }\r\n                this.tableHeaders.push(countryHeader)\r\n\r\n                // Create a header for each country budget - where we'll place a budget field\r\n                var budgetHeader = {\r\n                    text: 'Budget',\r\n                    align: 'center',\r\n                    sortable: false,\r\n                    value: \"budget\" + country.code + index,\r\n                    class: \"secondary white--text text-subtitle-1 font-weight-bold\",\r\n                }\r\n                this.tableHeaders.push(budgetHeader)\r\n\r\n                // Increment the count used to make the value field name unique\r\n                // This must match the field name in the actual table row\r\n                index += 1\r\n            })\r\n            // console.log('tableHeaders: ', this.tableHeaders)\r\n        },\r\n        createTableItemLabels() {\r\n            // Create a label for each country and each country budget\r\n            // County Labels\r\n            // Used to unqiuely identify a country per channel - and the set the value of the checkbox when\r\n            // We create the data items\r\n            var index = 0\r\n            this.storedCountries.forEach((country) => {\r\n                var checkBoxBudgetLabel = {\r\n                    checked: 'checked' + country.code + index,\r\n                    budget: 'budget' + country.code + index\r\n                }\r\n                this.tableItemLabels.push(checkBoxBudgetLabel)\r\n\r\n                // Increment the count used to make the value field name unique\r\n                // This must match the field name in the header row\r\n                index += 1\r\n            })\r\n            // console.log('tableItemLabels: ', this.tableItemLabels)\r\n            // Reset count for every country\r\n            index = 0\r\n        },\r\n        createDataItems() {\r\n            // Table Data\r\n            // Cycle through each country for every channel - creating:\r\n            // Value 1 per channel and a value per\r\n            // Value 2 & 2+1 per country (checkbox - with the checkboxValue label e.g. checkedDE01, checkedGB01)\r\n            this.storedChannels.forEach((channel) => {\r\n                // Value 1: Channel\r\n                var item = {\r\n                    'channelCode': channel.code,\r\n                }\r\n                // Values 2 to nnn: Country check box AND budget field for each channel / country combination\r\n                var index = 0\r\n                this.storedCountries.forEach((country) => {\r\n\r\n                    // Set country / channel checkbox value\r\n                    item = Object.assign({\r\n                        [this.tableItemLabels[index].checked]: false,\r\n                    }, item)\r\n\r\n                    // Set country / channel budget value\r\n                    item = Object.assign({\r\n                        [this.tableItemLabels[index].budget]: '',\r\n                    }, item)\r\n\r\n                    index += 1\r\n                })\r\n                this.tableItems.push(item)\r\n            })\r\n            // console.log('tableItems: ', this.tableItems)\r\n        },\r\n        checkBoxChange(currentItem, labels, labelIndex, itemIndex) {\r\n            if (currentItem[labels.checked]) {\r\n                var countryChannelObj = {\r\n                    channelId: this.storedChannels[itemIndex].id,\r\n                    channelCode: currentItem.channelCode,\r\n                    channelName: this.storedChannels[itemIndex].name,\r\n                    countryId: this.storedCountries[labelIndex].id,\r\n                    countryCode: this.storedCountries[labelIndex].code,\r\n                    countryName: this.storedCountries[labelIndex].name,\r\n                    countryChannelBudget: 0,\r\n                }\r\n                this.countryChannelData.push(countryChannelObj)\r\n            } else {\r\n                let currentCountry = this.storedCountries[index].code\r\n                this.countryChannelData = this.countryChannelData.filter(function (savedItem) {\r\n                    return !(savedItem.channelCode === currentItem.channelCode && savedItem.countryCode === currentCountry)\r\n                })\r\n            }\r\n            this.displayChanges()\r\n        },\r\n        budgetFieldChange(currentItem, index, event) {\r\n            let currentCountryCode = this.storedCountries[index].code\r\n            let savedObj = this.countryChannelData.find((savedItem) =>\r\n                savedItem.channelCode === currentItem.channelCode && savedItem.countryCode === currentCountryCode)\r\n            savedObj.countryChannelBudget = +event\r\n            this.displayChanges()\r\n        },\r\n        save() {\r\n            // Build array of countries\r\n            var selectedCountries = []\r\n            this.countryChannelData.forEach((item) => {\r\n                var countryObj = {\r\n                    id: item.countryId,\r\n                }\r\n                selectedCountries.push(countryObj)\r\n            })\r\n            var selectedChannels = []\r\n            this.countryChannelData.forEach((item) => {\r\n                var countryChannelObj = {\r\n                    countryId: item.countryId,\r\n                    channelId: item.channelId,\r\n                    countryChannelBudget: item.countryChannelBudget\r\n                }\r\n                selectedChannels.push(countryChannelObj)\r\n            })\r\n            var savePayload = {\r\n                strategy: this.strategy,\r\n                countryChannelData: this.countryChannelData,\r\n            }\r\n            this.$emit('update-strategy-country-channel', savePayload)\r\n        },\r\n        displayChanges() {\r\n            console.log('# items: ', this.countryChannelData.length)\r\n            this.countryChannelData.forEach((item) => {\r\n                console.log('item: ', item)\r\n            })\r\n        },\r\n    }\r\n\r\n}\r\n</script>\r\n<style scoped>\r\n/* @media screen and (max-width: 1200px) {\r\n    .theme--light.v-data-table thead tr:last-child th,\r\n    .theme--light.v-data-table tbody tr:not(:last-child) td:last-child,\r\n    .theme--light.v-data-table tbody tr td,\r\n    .theme--light.v-data-table tbody tr:not(:last-child) td:not(.v-data-table__mobile-row) {\r\n        border-bottom: medium solid rgba(212, 7, 7, 0.957);\r\n    }\r\n} */\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}