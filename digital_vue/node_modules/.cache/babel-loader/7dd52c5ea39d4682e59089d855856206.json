{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PhaseCard from '@/components/phase/PhaseCard';\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog';\nimport axios from 'axios';\nexport default {\n  name: 'PhaseDetailView',\n  components: {\n    PhaseCard,\n    PhaseEditDialog\n  },\n  data() {\n    return {\n      menuItems: [{\n        text: \"Add Phase\"\n      }, {\n        text: \"Hide Phases\"\n      }],\n      showPhases: true,\n      plan: '',\n      isCreate: false,\n      tab: '',\n      isEdit: false,\n      open_dialog: false,\n      newPhase: {\n        id: -1,\n        name: '',\n        description: '',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10)\n      },\n      editPhase: {\n        id: 0,\n        name: '',\n        description: '',\n        start_date: '',\n        end_date: ''\n      }\n    };\n  },\n  computed: {\n    phases() {\n      get: {\n        return this.plan.phases;\n      }\n    },\n    numPhases() {\n      return this.plan.phases ? this.plan.phases.length : 0;\n    }\n  },\n  mounted() {\n    this.getPlan();\n  },\n  methods: {\n    async getPlan() {\n      const plan_slug = this.$route.params.plan_slug;\n      await axios.get(`/api/v1/plan/${plan_slug}`).then(response => {\n        this.plan = response.data;\n        document.title = this.plan.name + ' | Digital Wave';\n      }).catch(error => {\n        console.log(error);\n      });\n      if (this.isCreate) {\n        this.tab = this.plan.phases[0].slug;\n        this.isCreate = false;\n      }\n    },\n    async updatePhase(updatePhase) {\n      // Find phase by matching id and replace it with updated one\n      this.plan.phases.forEach((item, index) => {\n        if (item.id === updatePhase.id) {\n          this.$set(this.plan.phases, index, updatePhase);\n        }\n      });\n      await axios.put(`api/v1/plans/${this.plan.id}/`, this.plan).catch(error => {\n        console.log(error);\n      });\n      this.refresh('Successfully updated', updatePhase.name);\n    },\n    async createPhase(createPhase) {\n      // Using the plan update serializer which either updates a phase or create a new one if no phase id\n\n      this.$delete(createPhase, 'id'); // get rid of the plan's id field as we want to update the plan\n      this.plan.phases.push(createPhase); // add the phase to the plan then update the plan\n\n      await axios.put(`api/v1/plans/${this.plan.id}/`, this.plan).catch(error => {\n        console.log(error);\n      });\n      this.isCreate = true;\n      this.refresh('Successfully created', createPhase.name);\n    },\n    async deletePhase(deletePhase) {\n      await axios.delete(`api/v1/phases/${deletePhase.id}/`).catch(error => {\n        console.log(error);\n      });\n      this.refresh('Successfully delete', deletePhase.name);\n    },\n    refresh(message, name) {\n      this.getPlan();\n      const payload = {\n        text: `${message} ${name}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.commit('showSnackBar', payload);\n    },\n    openEditPhaseDialog(editPhase) {\n      this.editPhase = editPhase;\n      this.open_dialog = true;\n    },\n    openNewPhaseDialog() {\n      this.editPhase = this.newPhase;\n      this.open_dialog = true;\n    }\n  }\n};","map":{"version":3,"mappings":";AA2FA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EAEA;EACAC;IACA;MACAC,YACA;QAAAC;MAAA,GACA;QAAAA;MAAA,EACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAd;QACAe;QACAC;QACAC;MACA;MACAC;QACAJ;QACAd;QACAe;QACAC;QACAC;MACA;IACA;EACA;EACAE;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACA;EACA;EACAC;IACA;MACA;MACA,YACAH,iCACAI;QACA;QACAC;MACA,GACAC;QACAC;MACA;MAEA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;QACA;UACA;QACA;MACA;MACA,YACAC,gDACAF;QACAC;MACA;MACA;IACA;IACA;MACA;;MAEA;MACA;;MAEA,YACAC,gDACAF;QACAC;MACA;MACA;MACA;IACA;IACA;MACA,YACAE,2CACAH;QACAC;MACA;MACA;IACA;IACAG;MACA;MACA;QAAAzB;QAAA0B;QAAAC;MAAA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;EACA;AACA","names":["name","components","PhaseCard","PhaseEditDialog","data","menuItems","text","showPhases","plan","isCreate","tab","isEdit","open_dialog","newPhase","id","description","start_date","end_date","editPhase","computed","phases","get","numPhases","mounted","methods","then","document","catch","console","put","delete","refresh","alerttype","contentclass","openEditPhaseDialog","openNewPhaseDialog"],"sourceRoot":"src/views","sources":["PlanDetailView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-row class=\"mt-3 mx-4\">\r\n            <v-col\r\n                md=\"12\"\r\n                sm=\"12\"\r\n                class=\"align-center\">\r\n                <v-toolbar\r\n                    flat\r\n                    dense\r\n                    outlined\r\n                    class=\"secondary darken-3 rounded-0 text-h3 white--text\">\r\n                    <v-toolbar-title>{{ plan.name }}: Phases</v-toolbar-title>\r\n                    <v-spacer></v-spacer>\r\n                    <v-menu\r\n                        bottom\r\n                        left>\r\n                        <template v-slot:activator=\"{ on, attrs }\">\r\n                            <v-btn\r\n                                dark\r\n                                icon\r\n                                v-bind=\"attrs\"\r\n                                v-on=\"on\">\r\n                                <v-app-bar-nav-icon dark></v-app-bar-nav-icon>\r\n                            </v-btn>\r\n                        </template>\r\n                        <v-list>\r\n                            <v-list-item-title\r\n                                v-for=\"(menuItem, i) in menuItems\"\r\n                                :key=\"i\">\r\n                                <v-btn text class=\"text-capitalize\">{{ menuItem.text }}</v-btn>\r\n                            </v-list-item-title>\r\n                        </v-list>\r\n                    </v-menu>\r\n                    <v-icon\r\n                        v-if=\"showPhases\"\r\n                        @click=\"showPhases = !showPhases\"\r\n                        dark>mdi-chevron-up</v-icon>\r\n                    <v-icon\r\n                        v-else\r\n                        @click=\"showPhases = !showPhases\"\r\n                        dark>mdi-chevron-down</v-icon>\r\n                </v-toolbar>\r\n                <v-card v-if=\"showPhases\">\r\n                    <v-tabs\r\n                        background-color=\"grey\"\r\n                        v-model=\"tab\"\r\n                        show-arrows\r\n                        class=\"mt-3 elevation-0 rounded-0\"\r\n                        slider-size=6\r\n                        center-active>\r\n                        <v-tabs-slider color=\"white\"></v-tabs-slider>\r\n                        <v-tab\r\n                            v-for=\"phase in phases\"\r\n                            :key=\"phase.id\"\r\n                            class=\"secondary text-capitalize\"\r\n                            :href=\"'#' + phase.slug\">\r\n                            {{ phase.name }}\r\n                        </v-tab>\r\n                        <v-spacer></v-spacer>\r\n                    </v-tabs>\r\n                </v-card>\r\n\r\n                <v-tabs-items\r\n                    v-if=\"showPhases\"\r\n                    v-model=\"tab\">\r\n                    <v-tab-item\r\n                        v-for=\"(phase, index) in phases\"\r\n                        :key=\"index\"\r\n                        :id=\"phase.slug\">\r\n\r\n                        <PhaseCard\r\n                            :phase=\"phase\"\r\n                            @open-editphase-dialog=\"openEditPhaseDialog(phase)\"\r\n                            @open-newphase-dialog=\"openNewPhaseDialog()\" />\r\n\r\n                    </v-tab-item>\r\n                </v-tabs-items>\r\n            </v-col>\r\n        </v-row>\r\n\r\n        <PhaseEditDialog\r\n            v-model=\"open_dialog\"\r\n            :phase=\"editPhase\"\r\n            @create-phase=\"createPhase\"\r\n            @update-phase=\"updatePhase\"\r\n            @delete-phase=\"deletePhase\" />\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport PhaseCard from '@/components/phase/PhaseCard'\r\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'PhaseDetailView',\r\n    components: {\r\n        PhaseCard,\r\n        PhaseEditDialog,\r\n\r\n    },\r\n    data() {\r\n        return {\r\n            menuItems: [\r\n                { text: \"Add Phase\" },\r\n                { text: \"Hide Phases\" },\r\n            ],\r\n            showPhases: true,\r\n            plan: '',\r\n            isCreate: false,\r\n            tab: '',\r\n            isEdit: false,\r\n            open_dialog: false,\r\n            newPhase: {\r\n                id: -1,\r\n                name: '',\r\n                description: '',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n            },\r\n            editPhase: {\r\n                id: 0,\r\n                name: '',\r\n                description: '',\r\n                start_date: '',\r\n                end_date: '',\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        phases() {\r\n            get: {\r\n                return this.plan.phases\r\n            }\r\n        },\r\n        numPhases() {\r\n            return this.plan.phases ? this.plan.phases.length : 0\r\n        },\r\n    },\r\n    mounted() {\r\n        this.getPlan()\r\n    },\r\n    methods: {\r\n        async getPlan() {\r\n            const plan_slug = this.$route.params.plan_slug\r\n            await axios\r\n                .get(`/api/v1/plan/${plan_slug}`)\r\n                .then(response => {\r\n                    this.plan = response.data\r\n                    document.title = this.plan.name + ' | Digital Wave'\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n\r\n            if (this.isCreate) {\r\n                this.tab = this.plan.phases[0].slug\r\n                this.isCreate = false\r\n            }\r\n        },\r\n        async updatePhase(updatePhase) {\r\n            // Find phase by matching id and replace it with updated one\r\n            this.plan.phases.forEach((item, index) => {\r\n                if (item.id === updatePhase.id) {\r\n                    this.$set(this.plan.phases, index, updatePhase)\r\n                }\r\n            })\r\n            await axios\r\n                .put(`api/v1/plans/${this.plan.id}/`, this.plan)\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n            this.refresh('Successfully updated', updatePhase.name)\r\n        },\r\n        async createPhase(createPhase) {\r\n            // Using the plan update serializer which either updates a phase or create a new one if no phase id\r\n\r\n            this.$delete(createPhase, 'id') // get rid of the plan's id field as we want to update the plan\r\n            this.plan.phases.push(createPhase) // add the phase to the plan then update the plan\r\n\r\n            await axios\r\n                .put(`api/v1/plans/${this.plan.id}/`, this.plan)\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n            this.isCreate = true\r\n            this.refresh('Successfully created', createPhase.name)\r\n        },\r\n        async deletePhase(deletePhase) {\r\n            await axios\r\n                .delete(`api/v1/phases/${deletePhase.id}/`)\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n            this.refresh('Successfully delete', deletePhase.name)\r\n        },\r\n        refresh(message, name) {\r\n            this.getPlan()\r\n            const payload = { text: `${message} ${name}`, alerttype: \"success\", contentclass: 'white--text' }\r\n            this.$store.commit('showSnackBar', payload)\r\n        },\r\n        openEditPhaseDialog(editPhase) {\r\n            this.editPhase = editPhase\r\n            this.open_dialog = true\r\n        },\r\n        openNewPhaseDialog() {\r\n            this.editPhase = this.newPhase\r\n            this.open_dialog = true\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.v-tab {\r\n    text-transform: none !important;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}