{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PlanCard from '@/components/plan/PlanCard';\nimport PlanEditDialog from '@/components/dialogs/PlanEditDialog';\nimport axios from 'axios';\nexport default {\n  name: 'HomeView',\n  components: {\n    PlanCard,\n    PlanEditDialog\n  },\n  data() {\n    return {\n      // initialPhase: {\n      //     name: 'Phase name',\n      //     description: 'Phase description',\n      //     start_date: new Date().toISOString().substring(0, 10),\n      //     end_date: new Date().toISOString().substring(0, 10),\n      //     strategies: [\n      //         {\n      //             name: 'Strategy name',\n      //             description: 'Strategy description',\n      //             start_date: new Date().toISOString().substring(0, 10),\n      //             end_date: new Date().toISOString().substring(0, 10),\n      //             countries: []\n      //         }\n      //     ]\n      // },\n      plans: [],\n      open_dialog: false,\n      newPlan: {\n        id: -1,\n        name: '',\n        description: ''\n      },\n      editPlan: {\n        id: 0,\n        name: '',\n        description: ''\n      },\n      initialPhase: {\n        name: 'Phase name',\n        description: 'Phase description',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        strategies: this.initialStrategy\n      },\n      initialStrategy: [{\n        name: 'Strategy name',\n        description: 'Strategy description',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        countries: []\n      }]\n    };\n  },\n  computed: {\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    }\n  },\n  mounted() {\n    this.getPlans();\n    document.title = 'Home | Digital Wave';\n  },\n  methods: {\n    async getPlans() {\n      var response = '';\n      try {\n        response = await axios.get('api/v1/plans/');\n      } catch (error) {\n        console.log(error);\n      }\n      this.plans = response.data;\n      console.log('plan data:', this.plans);\n      this.$store.dispatch('selectPlan', this.plans[0]);\n    },\n    async getPlan(id) {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/plan/${id}`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('selectPlan', response.data);\n    },\n    async updatePlan(updatePlan) {\n      var response = '';\n      var planPayload = {\n        name: updatePlan.name,\n        description: updatePlan.description\n      };\n      try {\n        response = await axios.patch(`api/v1/plan/${updatePlan.id}/`, planPayload);\n      } catch (error) {\n        console.log(error);\n      }\n      this.getPlans();\n      const payload = {\n        text: `Successfully updated ${updatePlan.name}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    async createPlan(createPlan) {\n      var response = '';\n      var newPlan = {};\n      newPlan = {\n        name: createPlan.name,\n        description: createPlan.description,\n        phases: [this.initialPhase]\n      };\n      console.log('newPlan: ', newPlan);\n      try {\n        response = await axios.post(`api/v1/plans/`, newPlan);\n      } catch (error) {\n        console.log(error);\n      }\n      this.getPlans();\n      const payload = {\n        text: `Successfully created ${newPlan.name} - Initial Phase Added`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    async deletePlan(deletePlan) {\n      var response = '';\n      try {\n        response = await axios.delete(`api/v1/plan/${deletePlan.id}/`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.getPlans();\n      const payload = {\n        text: `Successfully deleted ${deletePlan.name}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    openEditPlanDialog(editPlan) {\n      this.editPlan = editPlan;\n      this.open_dialog = true;\n    },\n    openNewPlanDialog() {\n      this.editPlan = this.newPlan;\n      this.open_dialog = true;\n    },\n    viewPlanDetails(plan) {\n      // Save the plan to the Store\n      this.$store.dispatch('selectPlan', plan);\n\n      // Save phase selection (the first one) to the Store\n      var phasePayload = {\n        phase: this.selectedPlan.phases[0],\n        index: 0\n      };\n      this.$store.dispatch('selectPhaseData', phasePayload);\n\n      // Save strategy selection (the first one) to the Store\n      var strategyPayload = {\n        strategy: this.selectedPhase.strategies[0],\n        index: 0\n      };\n      this.$store.dispatch('selectStrategyData', strategyPayload);\n\n      // Display the PlanDetailView\n      document.title = this.selectedPlan.name + ' | Digital Wave';\n      var url = this.selectedPhase.get_absolute_url + this.selectedStrategy.slug;\n      console.log('url: ', url);\n      this.$router.push(url);\n      // this.$router.push(this.selectedPhase.get_absolute_url)\n    }\n  }\n};","map":{"version":3,"mappings":";AAqDA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC;MACAC;MACAC;QACAC;QACAR;QACAS;MACA;MACAC;QACAF;QACAR;QACAS;MACA;MACAE;QACAX;QACAS;QACAG;QACAC;QACAC;MACA;MACAC;QACAf;QACAS;QACAG;QACAC;QACAG;MACA;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;EACA;EACAI;IACA;IACAC;EACA;EACAC;IACA;MACA;MACA;QACAC;MACA,EACA;QACAC;MACA;MACA;MACAA;MACA;IACA;IACA;MACA;MACA;QACAD;MACA,EACA;QACAC;MACA;MACA;IACA;IACA;MACA;MACA;QAAA3B;QAAAS;MAAA;MACA;QACAiB;MACA,EACA;QACAC;MACA;MACA;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;IACA;MACA;MACA;MACAvB;QACAP;QACAS;QACAsB;MACA;MACAJ;MACA;QACAD;MACA,EACA;QACAC;MACA;MACA;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;IACA;MACA;MACA;QACAJ;MACA,EACA;QACAC;MACA;MACA;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;IACAE;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;;MAEA;MACA;QAAAC;QAAAC;MAAA;MACA;;MAEA;MACA;QAAAC;QAAAD;MAAA;MACA;;MAEA;MACAZ;MAEA;MACAG;MACA;MACA;IACA;EACA;AACA","names":["name","components","PlanCard","PlanEditDialog","data","plans","open_dialog","newPlan","id","description","editPlan","initialPhase","start_date","end_date","strategies","initialStrategy","countries","computed","selectedPlan","get","selectedPhase","selectedPhaseIndex","selectedStrategy","mounted","document","methods","response","console","text","alerttype","contentclass","phases","openEditPlanDialog","openNewPlanDialog","viewPlanDetails","phase","index","strategy"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n    <div>\n        <v-row\n            class=\"mt-2 primary--text font-weight-black text-h3\">\n            <v-col\n                class=\"text-center\"\n                md=\"6\"\n                offset=\"3\">\n                <span>Plans</span>\n            </v-col>\n            <v-spacer></v-spacer>\n            <v-col\n                class=\"text-right\"\n                cols=\"2\">\n                <v-btn\n                    class=\"mr-4 primary rounded-0 text-capitalize text-body-1\"\n                    dark\n                    @click=\"openNewPlanDialog\"\n                    depressed>\n                    <v-icon small class=\"mr-2\">mdi-plus</v-icon>\n                    New Plan\n                </v-btn>\n            </v-col>\n        </v-row>\n        <br />\n        <br />\n        <br />\n        <v-row class=\"mb-0 mx-4\">\n            <v-col\n                v-for=\"(plan, index) in plans\" :key=\"plan.id\"\n                lg=\"3\"\n                md=\"4\"\n                sm=12\n                class=\"px-3 py-0\">\n    \n                <PlanCard\n                    :plan=\"plan\"\n                    @open-dialog=\"openEditPlanDialog(plan)\"\n                    @view-details=\"viewPlanDetails(plan)\" />\n    \n            </v-col>\n        </v-row>\n    \n        <PlanEditDialog\n            v-model=\"open_dialog\"\n            :plan=\"editPlan\"\n            @create-plan=\"createPlan\"\n            @update-plan=\"updatePlan\"\n            @delete-plan=\"deletePlan\" />\n    \n    </div>\n</template>\n<script>\nimport PlanCard from '@/components/plan/PlanCard'\nimport PlanEditDialog from '@/components/dialogs/PlanEditDialog'\nimport axios from 'axios'\n\nexport default {\n    name: 'HomeView',\n    components: {\n        PlanCard,\n        PlanEditDialog,\n    },\n    data() {\n        return {\n            // initialPhase: {\n            //     name: 'Phase name',\n            //     description: 'Phase description',\n            //     start_date: new Date().toISOString().substring(0, 10),\n            //     end_date: new Date().toISOString().substring(0, 10),\n            //     strategies: [\n            //         {\n            //             name: 'Strategy name',\n            //             description: 'Strategy description',\n            //             start_date: new Date().toISOString().substring(0, 10),\n            //             end_date: new Date().toISOString().substring(0, 10),\n            //             countries: []\n            //         }\n            //     ]\n            // },\n            plans: [],\n            open_dialog: false,\n            newPlan: {\n                id: -1,\n                name: '',\n                description: '',\n            },\n            editPlan: {\n                id: 0,\n                name: '',\n                description: '',\n            },\n            initialPhase: {\n                name: 'Phase name',\n                description: 'Phase description',\n                start_date: new Date().toISOString().substring(0, 10),\n                end_date: new Date().toISOString().substring(0, 10),\n                strategies: this.initialStrategy\n            },\n            initialStrategy: [{\n                name: 'Strategy name',\n                description: 'Strategy description',\n                start_date: new Date().toISOString().substring(0, 10),\n                end_date: new Date().toISOString().substring(0, 10),\n                countries: []\n            }]\n        }\n    },\n    computed: {\n        selectedPlan: {\n            get() {\n                return this.$store.state.selectedPlan\n            }\n        },\n        selectedPhase: {\n            get() {\n                return this.$store.state.selectedPhaseData.phase\n            }\n        },\n        selectedPhaseIndex: {\n            get() {\n                return this.$store.state.selectedPhaseData.index\n            }\n        },\n        selectedStrategy: {\n            get() {\n                return this.$store.state.selectedStrategyData.strategy\n            }\n        },\n    },\n    mounted() {\n        this.getPlans()\n        document.title = 'Home | Digital Wave'\n    },\n    methods: {\n        async getPlans() {\n            var response = ''\n            try {\n                response = await axios.get('api/v1/plans/')\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.plans = response.data\n            console.log('plan data:', this.plans)\n            this.$store.dispatch('selectPlan', this.plans[0])\n        },\n        async getPlan(id) {\n            var response = ''\n            try {\n                response = await axios.get(`/api/v1/plan/${id}`)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.$store.dispatch('selectPlan', response.data)\n        },\n        async updatePlan(updatePlan) {\n            var response = ''\n            var planPayload = { name: updatePlan.name, description: updatePlan.description }\n            try {\n                response = await axios.patch(`api/v1/plan/${updatePlan.id}/`, planPayload)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.getPlans()\n            const payload = { text: `Successfully updated ${updatePlan.name}`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n        },\n        async createPlan(createPlan) {\n            var response = ''\n            var newPlan = {}\n            newPlan = {\n                name: createPlan.name,\n                description: createPlan.description,\n                phases: [this.initialPhase]\n            }\n            console.log('newPlan: ', newPlan)\n            try {\n                response = await axios.post(`api/v1/plans/`, newPlan)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.getPlans()\n            const payload = { text: `Successfully created ${newPlan.name} - Initial Phase Added`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n        },\n        async deletePlan(deletePlan) {\n            var response = ''\n            try {\n                response = await axios.delete(`api/v1/plan/${deletePlan.id}/`)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.getPlans()\n            const payload = { text: `Successfully deleted ${deletePlan.name}`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n        },\n        openEditPlanDialog(editPlan) {\n            this.editPlan = editPlan\n            this.open_dialog = true\n        },\n        openNewPlanDialog() {\n            this.editPlan = this.newPlan\n            this.open_dialog = true\n        },\n        viewPlanDetails(plan) {\n            // Save the plan to the Store\n            this.$store.dispatch('selectPlan', plan)\n\n            // Save phase selection (the first one) to the Store\n            var phasePayload = { phase: this.selectedPlan.phases[0], index: 0 }\n            this.$store.dispatch('selectPhaseData', phasePayload)\n\n            // Save strategy selection (the first one) to the Store\n            var strategyPayload = { strategy: this.selectedPhase.strategies[0], index: 0 }\n            this.$store.dispatch('selectStrategyData', strategyPayload)\n\n            // Display the PlanDetailView\n            document.title = this.selectedPlan.name + ' | Digital Wave'\n\n            var url = this.selectedPhase.get_absolute_url + this.selectedStrategy.slug\n            console.log('url: ', url)\n            this.$router.push(url)\n            // this.$router.push(this.selectedPhase.get_absolute_url)\n        },\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}