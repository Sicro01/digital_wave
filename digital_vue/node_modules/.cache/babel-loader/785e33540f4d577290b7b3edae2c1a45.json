{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog';\nimport axios from 'axios';\nexport default {\n  name: \"PlanDetailCalendarView\",\n  props: {\n    showPlanCalendar: Boolean\n  },\n  components: {\n    PhaseEditDialog\n  },\n  data() {\n    return {\n      show: false,\n      editPhase: {},\n      selectedEvent: {},\n      selectedElement: null,\n      selectedOpen: false,\n      phaseEvents: [],\n      focus: \"\",\n      startDate: \"2022-11-01\",\n      calendarStartDates: [],\n      menuItems: [{\n        text: \"Add Phase\",\n        click() {\n          this.$emit(\"open-dialog\");\n        }\n      }, {\n        text: \"Hide/Show Phases\",\n        click() {\n          this.$emit(\"show\");\n        }\n      }]\n    };\n  },\n  computed: {\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    }\n  },\n  mounted() {\n    this.calcStartDates();\n    this.loadEvents();\n    let phaseDataPayload = {\n      phase: this.selectedPlan.phases[0],\n      index: 0\n    };\n    this.$store.dispatch('selectPhaseData', phaseDataPayload);\n  },\n  methods: {\n    loadEvents() {\n      const events = [];\n      let index = 0;\n      this.selectedPlan.phases.forEach(phase => {\n        const eventObj = {\n          name: phase.name,\n          start: phase.start_date,\n          end: phase.end_date,\n          color: \"green\",\n          phase: phase,\n          index: index\n        };\n        events.push(eventObj);\n        index += 1;\n      });\n      this.phaseEvents = events;\n      console.log(\"phaseEvents: \", this.phaseEvents);\n    },\n    calcStartDates() {\n      var startDate = new Date(this.startDate);\n      this.calendarStartDates = [];\n      var n = 0;\n      for (let i = 0; i < 6; i++) {\n        this.calendarStartDates.push(new Date(startDate.setMonth(startDate.getMonth() + n)));\n        n = 1;\n      }\n    },\n    prev() {\n      var startDate = new Date(this.startDate);\n      this.startDate = new Date(startDate.setMonth(startDate.getMonth() - 1));\n      this.calcStartDates();\n    },\n    next() {\n      var startDate = new Date(this.startDate);\n      this.startDate = new Date(startDate.setMonth(startDate.getMonth() + 1));\n      this.calcStartDates();\n    },\n    showEvent({\n      nativeEvent,\n      event\n    }) {\n      console.log(event.phase);\n      console.log(event.index);\n      const open = () => {\n        let phaseDataPayload = {\n          phase: event.phase,\n          index: event.index\n        };\n        this.$store.dispatch('selectPhaseData', phaseDataPayload);\n        this.selectedEvent = event;\n        this.selectedElement = nativeEvent.target;\n        requestAnimationFrame(() => requestAnimationFrame(() => this.show = true));\n      };\n      if (this.show) {\n        this.show = false;\n        requestAnimationFrame(() => requestAnimationFrame(() => open()));\n      } else {\n        open();\n      }\n      nativeEvent.stopPropagation();\n    },\n    async getPlan() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/plan/${this.selectedPlan.id}`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('selectPlan', response.data);\n    },\n    async updatePhase(updatePayload) {\n      updatePayload.phase.plan = this.selectedPlan.id;\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/phase/${updatePayload.phase.id}/`, updatePayload.phase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success', updatePayload.changeRoute);\n    },\n    async createPhase(createPhase) {\n      // Add current plan to new phase\n      createPhase.plan = this.selectedPlan.id;\n      var response = '';\n      try {\n        response = await axios.post(`api/v1/phases/`, createPhase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBProcessing(0, `Successfully created Phase \"${response.data.name}\"`);\n    },\n    async deletePhase(deletePhase) {\n      // A pLan must have at least one Phase\n      if (this.selectedPlan.phases.length === 1) {\n        // Display Snackbar message\n        this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text');\n      } else {\n        var response = '';\n        try {\n          response = await axios.delete(`api/v1/phase/${deletePhase.id}/`);\n        } catch (error) {\n          console.log(error);\n        }\n        // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n        this.endDBProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`);\n      }\n    },\n    async endDBProcessing(phaseIndex, message, alertType = 'success', changeRoute = true) {\n      // Refresh updated Plan and save phase to store\n      await this.getPlan();\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[phaseIndex],\n        index: phaseIndex\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Display Snackbar message\n      this.showSnackBar(message, alertType);\n\n      // Change route to selected phase\n      // changeRoute ? this.$router.push(this.selectedPhase.get_absolute_url) : ''\n      this.loadEvents();\n    },\n    showSnackBar(message, alertType, text_color = 'white--text') {\n      const payload = {\n        text: `${message}`,\n        alerttype: alertType,\n        contentclass: text_color\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    viewMore(event) {},\n    getEventColor(event) {\n      return event.color;\n    },\n    calendar1Change() {\n      // console.log('firing cal1 change')\n    },\n    clickDate(event, x) {},\n    getMonthName(index) {\n      const date = new Date(this.calendarStartDates[index]);\n      if (date.toString() !== \"Invalid Date\") return date.toLocaleString(\"en-us\", {\n        month: \"long\"\n      });else return \"December\";\n    },\n    menuActionClick(index) {\n      this.menuItems[index].click.call(this);\n    }\n  }\n};","map":{"version":3,"mappings":";AA4EA;AACA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC,YACA;QAAAC;QAAAC;UAAA;QAAA;MAAA,GACA;QAAAD;QAAAC;UAAA;QAAA;MAAA;IAEA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;EACA;EACAG;IACA;IACA;IACA;MAAAC;MAAAC;IAAA;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;QACA;UACA3B;UACA4B;UACAC;UACAC;UACAN;UACAC;QACA;QACAM;QACAN;MACA;MACA;MACAO;IACA;IACAC;MACA;MACA;MACA;MACA;QACA;QACAC;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MAAAC;MAAAC;IAAA;MACAP;MACAA;MACA;QACA;UAAAR;UAAAC;QAAA;QACA;QACA;QACA;QACAe;MACA;MACA;QACA;QACAA;MACA,OACA;QACAC;MACA;MACAH;IACA;IACA;MACA;MACA;QACAI;MACA,EACA;QACAV;MACA;MACA;IACA;IACA;MACAW;MACA;MACA;QACAD;MACA,EACA;QACAV;MACA;MACA;MACA;IACA;IACA;MACA;MACAY;MAEA;MACA;QACAF;MACA,EACA;QACAV;MACA;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;UACAU;QACA,EACA;UACAV;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;MACA;QAAAR;QAAAC;MAAA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;IACA;IACAoB;MACA;QAAA7B;QAAA8B;QAAAC;MAAA;MACA;IACA;IACAC,iBAEA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC,qBACA;IACAC;MACA;MACA,wCACA;QAAAC;MAAA,QAEA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","props","showPlanCalendar","components","PhaseEditDialog","data","show","editPhase","selectedEvent","selectedElement","selectedOpen","phaseEvents","focus","startDate","calendarStartDates","menuItems","text","click","computed","selectedPlan","get","selectedPhase","selectedPhaseIndex","mounted","phase","index","methods","loadEvents","start","end","color","events","console","calcStartDates","n","prev","next","showEvent","nativeEvent","event","requestAnimationFrame","open","response","updatePayload","createPhase","showSnackBar","alerttype","contentclass","viewMore","getEventColor","calendar1Change","clickDate","getMonthName","month","menuActionClick"],"sourceRoot":"src/components/plan","sources":["PlanCalendar.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"showPlanCalendar\">\r\n        <v-row>\r\n            <v-col cols=\"12\" class=\" secondary darken-4 white--text\">\r\n                bob\r\n                <!-- <v-card-title class=\"pa-0\">{{ selectedPlan.name }} : Phases and Strategies</v-card-title> -->\r\n            </v-col>\r\n        </v-row>\r\n        <v-row>\r\n            <v-col cols=12></v-col>\r\n            <v-card\r\n                flat\r\n                tile\r\n                outlined\r\n                class=\"mt-5 elevation-1\">\r\n\r\n                <v-card-text class=\"px-2 pt-2\">\r\n                    <!-- <v-row>\r\n                    <v-cols cols=\"12\" class=\"d-flex justify-center secondary darken-4 white--text\"> -->\r\n                    <!-- <v-card-title class=\"pa-0\">{{ selectedPlan.name }} : Phases and Strategies</v-card-title> -->\r\n                    <!-- {{ selectedPlan.name }} : Phases and Strategies -->\r\n                    <!-- </v-cols>\r\n                </v-row> -->\r\n                    <v-row class=\"\">\r\n                        <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                            <div>\r\n                                <h3 class=\"text-center\">\r\n                                    {{ getMonthName(0) }}\r\n                                </h3>\r\n                                <v-calendar\r\n                                    :events=\"phaseEvents\"\r\n                                    ref=\"calendar1\"\r\n                                    type=\"month\"\r\n                                    @click:event=\"showEvent\"\r\n                                    :start=\"calendarStartDates[0]\"\r\n                                    @change=\"calendar1Change\">\r\n                                </v-calendar>\r\n                            </div>\r\n                        </v-col>\r\n                        <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                            <div>\r\n                                <h3 class=\"text-center\">\r\n                                    {{ getMonthName(1) }}\r\n                                </h3>\r\n                                <v-calendar\r\n                                    :events=\"phaseEvents\"\r\n                                    ref=\"calendar2\"\r\n                                    type=\"month\"\r\n                                    @click:event=\"showEvent\"\r\n                                    :start=\"calendarStartDates[1]\">\r\n                                </v-calendar>\r\n                            </div>\r\n                        </v-col>\r\n                    </v-row>\r\n                </v-card-text>\r\n                <v-card-actions>\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn icon @click=\"prev\">\r\n                        <v-icon>mdi-chevron-left</v-icon>\r\n                    </v-btn>\r\n                    <v-btn icon @click=\"next\">\r\n                        <v-icon>mdi-chevron-right</v-icon>\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-row>\r\n        <PhaseEditDialog\r\n            v-model=\"show\"\r\n            :phase=\"selectedPhase\"\r\n            @create=\"createPhase\"\r\n            @delete=\"deletePhase\"\r\n            @update=\"updatePhase\" />\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: \"PlanDetailCalendarView\",\r\n    props: {\r\n        showPlanCalendar: Boolean,\r\n    },\r\n    components: {\r\n        PhaseEditDialog\r\n    },\r\n    data() {\r\n        return {\r\n            show: false,\r\n            editPhase: {},\r\n            selectedEvent: {},\r\n            selectedElement: null,\r\n            selectedOpen: false,\r\n            phaseEvents: [],\r\n            focus: \"\",\r\n            startDate: \"2022-11-01\",\r\n            calendarStartDates: [],\r\n            menuItems: [\r\n                { text: \"Add Phase\", click() { this.$emit(\"open-dialog\"); } },\r\n                { text: \"Hide/Show Phases\", click() { this.$emit(\"show\"); } },\r\n            ],\r\n        };\r\n    },\r\n    computed: {\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan;\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase;\r\n            }\r\n        },\r\n        selectedPhaseIndex: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.index\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        this.calcStartDates();\r\n        this.loadEvents();\r\n        let phaseDataPayload = { phase: this.selectedPlan.phases[0], index: 0 }\r\n        this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n    },\r\n    methods: {\r\n        loadEvents() {\r\n            const events = [];\r\n            let index = 0;\r\n            this.selectedPlan.phases.forEach((phase) => {\r\n                const eventObj = {\r\n                    name: phase.name,\r\n                    start: phase.start_date,\r\n                    end: phase.end_date,\r\n                    color: \"green\",\r\n                    phase: phase,\r\n                    index: index,\r\n                };\r\n                events.push(eventObj);\r\n                index += 1;\r\n            });\r\n            this.phaseEvents = events;\r\n            console.log(\"phaseEvents: \", this.phaseEvents);\r\n        },\r\n        calcStartDates() {\r\n            var startDate = new Date(this.startDate);\r\n            this.calendarStartDates = [];\r\n            var n = 0;\r\n            for (let i = 0; i < 6; i++) {\r\n                this.calendarStartDates.push(new Date((startDate.setMonth(startDate.getMonth() + n))));\r\n                n = 1;\r\n            }\r\n        },\r\n        prev() {\r\n            var startDate = new Date(this.startDate);\r\n            this.startDate = new Date((startDate.setMonth(startDate.getMonth() - 1)));\r\n            this.calcStartDates();\r\n        },\r\n        next() {\r\n            var startDate = new Date(this.startDate);\r\n            this.startDate = new Date((startDate.setMonth(startDate.getMonth() + 1)));\r\n            this.calcStartDates();\r\n        },\r\n        showEvent({ nativeEvent, event }) {\r\n            console.log(event.phase);\r\n            console.log(event.index);\r\n            const open = () => {\r\n                let phaseDataPayload = { phase: event.phase, index: event.index }\r\n                this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n                this.selectedEvent = event;\r\n                this.selectedElement = nativeEvent.target;\r\n                requestAnimationFrame(() => requestAnimationFrame(() => this.show = true));\r\n            };\r\n            if (this.show) {\r\n                this.show = false;\r\n                requestAnimationFrame(() => requestAnimationFrame(() => open()));\r\n            }\r\n            else {\r\n                open();\r\n            }\r\n            nativeEvent.stopPropagation();\r\n        },\r\n        async getPlan() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/plan/${this.selectedPlan.id}`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('selectPlan', response.data)\r\n        },\r\n        async updatePhase(updatePayload) {\r\n            updatePayload.phase.plan = this.selectedPlan.id\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/phase/${updatePayload.phase.id}/`, updatePayload.phase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success', updatePayload.changeRoute)\r\n        },\r\n        async createPhase(createPhase) {\r\n            // Add current plan to new phase\r\n            createPhase.plan = this.selectedPlan.id\r\n\r\n            var response = ''\r\n            try {\r\n                response = await axios.post(`api/v1/phases/`, createPhase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBProcessing(0, `Successfully created Phase \"${response.data.name}\"`)\r\n        },\r\n        async deletePhase(deletePhase) {\r\n            // A pLan must have at least one Phase\r\n            if (this.selectedPlan.phases.length === 1) {\r\n                // Display Snackbar message\r\n                this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text')\r\n            } else {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.delete(`api/v1/phase/${deletePhase.id}/`)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n                // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n                this.endDBProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`)\r\n            }\r\n        },\r\n        async endDBProcessing(phaseIndex, message, alertType = 'success', changeRoute = true) {\r\n            // Refresh updated Plan and save phase to store\r\n            await this.getPlan()\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[phaseIndex], index: phaseIndex }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar(message, alertType)\r\n\r\n            // Change route to selected phase\r\n            // changeRoute ? this.$router.push(this.selectedPhase.get_absolute_url) : ''\r\n            this.loadEvents()\r\n        },\r\n        showSnackBar(message, alertType, text_color = 'white--text') {\r\n            const payload = { text: `${message}`, alerttype: alertType, contentclass: text_color }\r\n            this.$store.dispatch('showSnackBar', payload)\r\n        },\r\n        viewMore(event) {\r\n\r\n        },\r\n        getEventColor(event) {\r\n            return event.color;\r\n        },\r\n        calendar1Change() {\r\n            // console.log('firing cal1 change')\r\n        },\r\n        clickDate(event, x) {\r\n        },\r\n        getMonthName(index) {\r\n            const date = new Date(this.calendarStartDates[index]);\r\n            if (date.toString() !== \"Invalid Date\")\r\n                return date.toLocaleString(\"en-us\", { month: \"long\" });\r\n            else\r\n                return \"December\";\r\n        },\r\n        menuActionClick(index) {\r\n            this.menuItems[index].click.call(this);\r\n        }\r\n    },\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}