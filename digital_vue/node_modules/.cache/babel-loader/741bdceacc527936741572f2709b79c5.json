{"ast":null,"code":"import CardIcons from '@/components/shared/CardIcons';\nimport TargetChannelTabs from '@/components/targetchannel/TargetChannelTabs';\nimport axios from 'axios';\nexport default {\n  name: 'TargetCountryCard',\n  components: {\n    CardIcons,\n    TargetChannelTabs\n  },\n  data() {\n    return {\n      tableHeaders: [],\n      tableItems: [],\n      tableItemLabels: [],\n      budgetValues: [],\n      countryChannelData: [],\n      locked: true,\n      valid: false,\n      rules: {\n        required: v => !!v || \"Required\",\n        notEmpty: v => v.toString().length > 0 || \"Budget should be between 0 and 10,000,000\",\n        inRange: v => Number.isInteger(Number(v)) && v >= 0 && v <= 10000000 || \"Budget should be between 0 and 10,000,000\"\n      }\n    };\n  },\n  computed: {\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    },\n    storedTargetCountries: {\n      get() {\n        return this.$store.state.storedTargetCountries;\n      }\n    },\n    storedTargetChannels: {\n      get() {\n        return this.$store.state.storedTargetChannels;\n      }\n    },\n    storedCountries: {\n      get() {\n        return this.$store.state.storedCountries;\n      }\n    },\n    storedChannels: {\n      get() {\n        return this.$store.state.storedChannels;\n      }\n    },\n    numberCountriesSelected: {\n      get() {\n        let count = 0;\n        this.items.forEach(item => {\n          item.include ? count++ : null;\n        });\n        console.log('count: ', count);\n        return count;\n      }\n    },\n    targetCountriesLastEdited: {\n      get() {\n        return new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified))));\n      }\n    }\n  },\n  watch: {\n    async storedTargetCountries(newValue) {\n      console.log('TargetChannelcard:watch: storedTargetCountries');\n    }\n  },\n  mounted() {\n    this.getChannels();\n  },\n  methods: {\n    async getChannels() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/channels/`);\n      } catch (error) {\n        console.log(error);\n      }\n      console.log('PlanDetail:getChannels:response.data: ', response.data);\n      this.$store.dispatch('storeChannels', response.data);\n    }\n  }\n};","map":{"version":3,"mappings":"AAoBA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;MACA;IACA;IACAK;MACAL;QACA;MACA;IACA;IACAM;MACAN;QACA;QACA;UACAO;QACA;QACAC;QACA;MACA;IACA;IACAC;MACAT;QACA;MACA;IACA;EACA;EACAU;IACA;MACAF;IACA;EACA;EACAG;IACA;EAEA;EACAC;IACA;MACA;MACA;QACAC;MACA,EACA;QACAL;MACA;MACAA;MACA;IACA;EAEA;AACA","names":["name","components","CardIcons","TargetChannelTabs","data","tableHeaders","tableItems","tableItemLabels","budgetValues","countryChannelData","locked","valid","rules","required","notEmpty","inRange","computed","selectedPhase","get","selectedStrategy","storedTargetCountries","storedTargetChannels","storedCountries","storedChannels","numberCountriesSelected","item","console","targetCountriesLastEdited","watch","mounted","methods","response"],"sourceRoot":"src/components/targetchannel","sources":["TargetChannelCard.vue"],"sourcesContent":["<template>\r\n    <v-form\r\n        ref=\"form\"\r\n        v-model=\"valid\">\r\n        <v-card\r\n            class=\"mt-3 mx-3\"\r\n            flat\r\n            outlined\r\n            tile>\r\n            <v-card-title class=\"py-0\">\r\n                Select Channels and Set Budgets for Target Countries\r\n            </v-card-title>\r\n            <v-divider></v-divider>\r\n\r\n            <TargetChannelTabs />\r\n\r\n        </v-card>\r\n    </v-form>\r\n</template>\r\n<script>\r\nimport CardIcons from '@/components/shared/CardIcons'\r\nimport TargetChannelTabs from '@/components/targetchannel/TargetChannelTabs'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'TargetCountryCard',\r\n    components: {\r\n        CardIcons,\r\n        TargetChannelTabs,\r\n    },\r\n    data() {\r\n        return {\r\n            tableHeaders: [],\r\n            tableItems: [],\r\n            tableItemLabels: [],\r\n            budgetValues: [],\r\n            countryChannelData: [],\r\n            locked: true,\r\n            valid: false,\r\n            rules: {\r\n                required: (v => !!v || \"Required\"),\r\n                notEmpty: (v => (v.toString().length > 0) || \"Budget should be between 0 and 10,000,000\"),\r\n                inRange: (v => (Number.isInteger(Number(v)) && v >= 0 && v <= 10000000) || \"Budget should be between 0 and 10,000,000\"),\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedStrategy: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.strategy\r\n            }\r\n        },\r\n        storedTargetCountries: {\r\n            get() {\r\n                return this.$store.state.storedTargetCountries\r\n            }\r\n        },\r\n        storedTargetChannels: {\r\n            get() {\r\n                return this.$store.state.storedTargetChannels\r\n            }\r\n        },\r\n        storedCountries: {\r\n            get() {\r\n                return this.$store.state.storedCountries\r\n            }\r\n        },\r\n        storedChannels: {\r\n            get() {\r\n                return this.$store.state.storedChannels\r\n            }\r\n        },\r\n        numberCountriesSelected: {\r\n            get() {\r\n                let count = 0\r\n                this.items.forEach((item) => {\r\n                    item.include ? count++ : null\r\n                })\r\n                console.log('count: ', count)\r\n                return count\r\n            }\r\n        },\r\n        targetCountriesLastEdited: {\r\n            get() {\r\n                return new Date(Math.max(...this.storedTargetChannels.map(e => new Date(e.date_modified))));\r\n            }\r\n        },\r\n    },\r\n    watch: {\r\n        async storedTargetCountries(newValue) {\r\n            console.log('TargetChannelcard:watch: storedTargetCountries')\r\n        },\r\n    },\r\n    mounted() {\r\n        this.getChannels()\r\n\r\n    },\r\n    methods: {\r\n        async getChannels() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/channels/`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            console.log('PlanDetail:getChannels:response.data: ', response.data)\r\n            this.$store.dispatch('storeChannels', response.data)\r\n        },\r\n\r\n    }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}