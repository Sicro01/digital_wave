{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'PlanDetailCalendarView',\n  data() {\n    return {\n      myDate: '2022-11-01',\n      phaseEvents: [],\n      focus: '',\n      type: 'month',\n      focus: '',\n      startDate: '2022-11-01',\n      calendarStartDates: [],\n      menuItems: [{\n        text: \"Add Phase\",\n        click() {\n          this.$emit(\"open-dialog\");\n        }\n      }, {\n        text: \"Hide/Show Phases\",\n        click() {\n          this.$emit(\"show\");\n        }\n      }],\n      dummyEvents: [],\n      colors: ['blue', 'indigo', 'deep-purple', 'cyan', 'green', 'orange', 'grey darken-1'],\n      names: ['Meeting', 'Holiday', 'PTO', 'Travel', 'Event', 'Birthday', 'Conference', 'Party'],\n      createdEvents: []\n    };\n  },\n  computed: {\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    }\n  },\n  mounted() {\n    this.createDummyEvents();\n    // this.loadPhaseEvents()\n    this.calcStartDates();\n    // this.loadEvents()\n  },\n\n  methods: {\n    createDummyEvents() {\n      const start_date = \"2022-11-01\";\n      const end_date = \"2022-11-30\";\n      const events = [];\n      const number_phases = this.selectedPlan.phases.length;\n      const phases = this.selectedPlan.phases;\n      const min = new Date(`${start_date}T00:00:00`);\n      const max = new Date(`${end_date}T23:59:59`);\n      const days = (max.getTime() - min.getTime()) / 86400000;\n      const eventCount = this.rnd(days, days + 20);\n      for (let i = 0; i < number_phases; i++) {\n        const pstart = str(phases[i].start_date);\n        console.log(pstart);\n        const allDay = this.rnd(0, 3) === 0;\n        const firstTimestamp = this.rnd(min.getTime(), max.getTime());\n        // const first = new Date(firstTimestamp - (firstTimestamp % 900000))\n        const first = min;\n        // const secondTimestamp = this.rnd(2, allDay ? 288 : 8) * 900000\n        const secondTimestamp = 259200000;\n        const second = new Date(first.getTime() + secondTimestamp);\n        name: this.names[this.rnd(0, this.names.length - 1)], events.push({\n          name: phases[i].name,\n          start: start_date,\n          end: end_date,\n          color: this.colors[this.rnd(0, this.colors.length - 1)],\n          timed: false\n        });\n      }\n      this.createdEvents = events;\n      console.log('this.createdEvents: ', this.createdEvents);\n    },\n    rnd(a, b) {\n      return Math.floor((b - a + 1) * Math.random()) + a;\n    },\n    loadPhaseEvents() {\n      // console.log(this.selectedPlan.phases.length)\n      const number_phases = this.selectedPlan.phases.length;\n      const start_date = \"2022-11-01\";\n      const end_date = \"2022-11-30\";\n      const phaseEvents = [];\n      const min = new Date(`${start_date}T00:00:00`);\n      const max = new Date(`${end_date}T23:59:59`);\n      const days = (max.getTime() - min.getTime()) / 86400000;\n      const eventCount = this.rnd(days, days + 20);\n      for (let i = 0; i < number_phases; i++) {\n        // this.plan.phases.forEach((item, index) => {\n        // this.selectedPlan.phases.forEach((phase) => {\n        const allDay = this.rnd(0, 3) === 0;\n        const firstTimestamp = this.rnd(min.getTime(), max.getTime());\n        const first = new Date(firstTimestamp - firstTimestamp % 900000);\n        const secondTimestamp = this.rnd(2, allDay ? 288 : 8) * 900000;\n        const second = new Date(first.getTime() + secondTimestamp);\n        phaseEvents.push({\n          name: this.names[this.rnd(0, this.names.length - 1)],\n          start: first,\n          end: second,\n          color: this.colors[this.rnd(0, this.colors.length - 1)],\n          timed: !allDay\n        });\n      }\n      this.createdEvents = phaseEvents;\n      console.log('this.createdEvents: ', this.createdEvents);\n    },\n    loadEvents() {\n      const number_phases = this.selectedPlan.phases.length;\n      const phases = this.selectedPlan.phases;\n      // const start_date = \"2022-11-01\"\n      // const end_date = \"2022-11-30\"\n      const events = [];\n\n      // const min = new Date(`${start_date}T00:00:00`)\n      // const max = new Date(`${end_date}T23:59:59`)\n      // const days = (max.getTime() - min.getTime()) / 86400000\n\n      // const allDay = true\n\n      // const firstTimestamp = this.rnd(min.getTime(), max.getTime())\n      // const first = new Date(firstTimestamp - (firstTimestamp % 900000))\n      // const secondTimestamp = this.rnd(2, allDay ? 288 : 8) * 900000\n      // const second = new Date(first.getTime() + secondTimestamp)\n      // const start = new Date(`${phase.start_date}T00:00:00`)\n      // const end = new Date(`${phase.end_date}T23:59:59`)\n      const color = 'red';\n      for (let i = 0; i < number_phases; i++) {\n        const name = phases[i].name;\n        console.log(name);\n        const start = phases[i].start_date;\n        const end = phases[i].end_date;\n        events.push({\n          name: name,\n          start: start,\n          end: end,\n          timed: false,\n          color: color\n        });\n      }\n      // ev.push({\n      //     name: 'bob',\n      //     start: first,\n      //     end: second,\n      //     color: 'red',\n      //     timed: false,\n      // })\n      this.phaseEvents = events;\n\n      // if (this.phaseEvents[0].name === this.dummyEvents[0].name) { console.log('name is the same') }\n      // if (this.phaseEvents[0].start === this.dummyEvents[0].start) { console.log('start is the same') }\n      // if (this.phaseEvents[0].end === this.dummyEvents[0].end) { console.log('end is the same') }\n      console.log('phaseEvents: ', this.phaseEvents);\n      // console.log('dummyEvents: ', this.dummyEvents)\n\n      const dummyEvents = [];\n      const aname = 'Phase name';\n      const astart = new Date('2022-11-13');\n      const aend = new Date('2022-11-27');\n      const atimed = false;\n      const acolor = 'blue';\n      dummyEvents.push({\n        name: aname,\n        start: astart,\n        end: aend,\n        timed: atimed\n      });\n      this.dummyEvents = dummyEvents;\n      // this.dummyEvents.push(dummy2)\n    },\n\n    calcStartDates() {\n      var startDate = new Date(this.startDate);\n      this.calendarStartDates = [];\n      var n = 0;\n      for (let i = 0; i < 6; i++) {\n        this.calendarStartDates.push(new Date(startDate.setMonth(startDate.getMonth() + n)));\n        n = 1;\n      }\n      // console.log('calendarStartDates: ', this.calendarStartDates)\n    },\n\n    prev() {\n      var startDate = new Date(this.startDate);\n      this.startDate = new Date(startDate.setMonth(startDate.getMonth() - 1));\n      this.calcStartDates();\n      // this.loadEvents()\n    },\n\n    next() {\n      var startDate = new Date(this.startDate);\n      this.startDate = new Date(startDate.setMonth(startDate.getMonth() + 1));\n      this.calcStartDates();\n      // this.loadEvents()\n    },\n\n    showEvent({\n      nativeEvent,\n      event\n    }) {\n      console.log('event: ', event);\n      console.log('nativeEvent.target: ', nativeEvent.target);\n    },\n    viewMore(event) {\n      console.log('click:', event);\n      console.log('click date:', event.date);\n      // console.log('cal index:', index)\n      // this.focus[index] = date\n      // this.type = 'day'\n    },\n\n    getEventColor(event) {\n      return event.color;\n    },\n    calendar1Change() {\n      // console.log('firing cal1 change')\n    },\n    clickDate(event, x) {},\n    getMonthName(index) {\n      const date = new Date(this.calendarStartDates[index]);\n      if (date.toString() !== 'Invalid Date') return date.toLocaleString('en-us', {\n        month: 'long'\n      });else return 'December';\n    },\n    menuActionClick(index) {\n      this.menuItems[index].click.call(this);\n    }\n  }\n};","map":{"version":3,"mappings":";AAsGA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAD;MACAE;MACAC;MACAC,YACA;QAAAC;QAAAC;UAAA;QAAA;MAAA,GACA;QAAAD;QAAAC;UAAA;QAAA;MAAA,EACA;MACAC,eAEA;MACAC;MACAC,0FACA;MACAC;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;EACA;EACAE;IACA;IACA;IACA;IACA;EACA;;EACAC;IACAC;MAEA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MAEA;QACA;QACAC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAtB,sDACAuB;UACAvB;UACAwB;UACAC;UACAC;UACAC;QACA;MACA;MACA;MACAL;IACA;IACAM;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA1B;UACAH;UACAwB;UACAC;UACAC;UACAC;QACA;MACA;MACA;MACAL;IACA;IACAQ;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;QACAR;QACA;QACA;QACAC;UACAvB;UACAwB;UACAC;UACAE;UACAD;QACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACAJ;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MAEAX;QACAX;QACAwB;QACAC;QACAE;MACA;MACA;MACA;IACA;;IACAI;MACA;MACA;MACA;MACA;QACA;QACAC;MACA;MACA;IACA;;IACAC;MACA;MACA;MACA;MACA;IACA;;IACAC;MACA;MACA;MACA;MACA;IACA;;IACAC;MAAAC;MAAAC;IAAA;MACAf;MACAA;IAEA;IACAgB;MACAhB;MACAA;MACA;MACA;MACA;IACA;;IACAiB;MACA;IACA;IACAC;MACA;IACA;IACAC,qBAEA;IACAC;MACA;MACA,wCACA;QAAAC;MAAA,QAEA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","data","myDate","phaseEvents","focus","type","startDate","calendarStartDates","menuItems","text","click","dummyEvents","colors","names","createdEvents","computed","selectedPlan","get","selectedPhase","mounted","methods","createDummyEvents","console","events","start","end","color","timed","rnd","loadPhaseEvents","loadEvents","calcStartDates","n","prev","next","showEvent","nativeEvent","event","viewMore","getEventColor","calendar1Change","clickDate","getMonthName","month","menuActionClick"],"sourceRoot":"src/views","sources":["PlanDetailCalendarView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-card\r\n            flat\r\n            tile\r\n            outlined\r\n            class=\"mt-5 mx-3\">\r\n            <v-card-title class=\"pa-0\">\r\n                <v-toolbar\r\n                    flat\r\n                    dense\r\n                    outlined\r\n                    class=\"secondary darken-3 rounded-0 text-h3 white--text\">\r\n                    <v-spacer></v-spacer>\r\n                    <v-toolbar-title class=\"ml-0\">\r\n                        <v-btn icon @click=\"prev\">\r\n                            <v-icon class=\"white--text\">mdi-chevron-left</v-icon>\r\n                        </v-btn>\r\n                        <v-btn icon @click=\"next\">\r\n                            <v-icon class=\"white--text\">mdi-chevron-right</v-icon>\r\n                        </v-btn>\r\n                    </v-toolbar-title>\r\n                    <v-menu\r\n                        left\r\n                        offset-y>\r\n                        <template v-slot:activator=\"{ on, attrs }\">\r\n                            <v-btn\r\n                                dark\r\n                                icon\r\n                                v-bind=\"attrs\"\r\n                                v-on=\"on\">\r\n                                <v-icon>mdi-dots-vertical</v-icon>\r\n                            </v-btn>\r\n                        </template>\r\n                        <v-list>\r\n                            <v-list-item\r\n                                v-for=\"(menuItem, i) in menuItems\"\r\n                                :key=\"i\"\r\n                                @click=\"menuActionClick(i)\">\r\n                                <v-btn text class=\"text-capitalize\">{{ menuItem.text }}</v-btn>\r\n                            </v-list-item>\r\n                        </v-list>\r\n                    </v-menu>\r\n                </v-toolbar>\r\n            </v-card-title>\r\n            <v-card-text class=\"px-0\">\r\n                <v-row class=\"ma-0\">\r\n                    <v-col\r\n                        lg=\"4\"\r\n                        md=\"3\"\r\n                        sm=\"12\"\r\n                        class=\"px-1\">\r\n                        <h3 class=\"text-center\">\r\n                            {{ getMonthName(0) }}\r\n                        </h3>\r\n                        <!-- @click:more=\"viewMore(date, index)\" -->\r\n                        <!-- @click:more=\"(event, index) => viewMore(event, index)\" -->\r\n                        <v-calendar\r\n                            v-model=\"focus\"\r\n                            :events=\"createdEvents\"\r\n                            ref=\"calendar1\"\r\n                            type=\"month\"\r\n                            @click:event=\"showEvent\"\r\n                            :start=\"startDate\"\r\n                            @click:day=\"viewMore\"\r\n                            @change=\"calendar1Change\"\r\n                            event-color=\"blue\">\r\n                        </v-calendar>\r\n\r\n                    </v-col>\r\n                    <!-- <v-col\r\n                        lg=\"3\"\r\n                        md=\"3\"\r\n                        sm=\"12\"\r\n                        class=\"px-1\">\r\n                        <h3 class=\"text-center\">\r\n                            {{ getMonthName(1) }}\r\n                        </h3>\r\n                        <v-calendar\r\n                            :events=\"phaseEvents\"\r\n                            ref=\"calendar2\"\r\n                            :start=\"calendarStartDates[1]\"\r\n                            type=\"month\"\r\n                            @click:more=\"viewMore\">\r\n                        </v-calendar>\r\n                    </v-col> -->\r\n                </v-row>\r\n            </v-card-text>\r\n\r\n            <v-card-actions>\r\n                <v-spacer></v-spacer>\r\n                <v-btn\r\n                    class=\"mx-10 secondary darken-3 rounded-0 text-capitalize\"\r\n                    depressed>\r\n                    Button\r\n                </v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n    </div>\r\n</template>\r\n<script>\r\n\r\nexport default {\r\n    name: 'PlanDetailCalendarView',\r\n    data() {\r\n        return {\r\n            myDate: '2022-11-01',\r\n            phaseEvents: [],\r\n            focus: '',\r\n            type: 'month',\r\n            focus: '',\r\n            startDate: '2022-11-01',\r\n            calendarStartDates: [],\r\n            menuItems: [\r\n                { text: \"Add Phase\", click() { this.$emit(\"open-dialog\") } },\r\n                { text: \"Hide/Show Phases\", click() { this.$emit(\"show\") } },\r\n            ],\r\n            dummyEvents: [\r\n\r\n            ],\r\n            colors: ['blue', 'indigo', 'deep-purple', 'cyan', 'green', 'orange', 'grey darken-1'],\r\n            names: ['Meeting', 'Holiday', 'PTO', 'Travel', 'Event', 'Birthday', 'Conference', 'Party'\r\n            ],\r\n            createdEvents: [],\r\n        }\r\n    },\r\n    computed: {\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        this.createDummyEvents()\r\n        // this.loadPhaseEvents()\r\n        this.calcStartDates()\r\n        // this.loadEvents()\r\n    },\r\n    methods: {\r\n        createDummyEvents() {\r\n\r\n            const start_date = \"2022-11-01\"\r\n            const end_date = \"2022-11-30\"\r\n            const events = []\r\n            const number_phases = this.selectedPlan.phases.length\r\n            const phases = this.selectedPlan.phases\r\n\r\n            const min = new Date(`${start_date}T00:00:00`)\r\n            const max = new Date(`${end_date}T23:59:59`)\r\n            const days = (max.getTime() - min.getTime()) / 86400000\r\n            const eventCount = this.rnd(days, days + 20)\r\n\r\n            for (let i = 0; i < number_phases; i++) {\r\n                const pstart = str(phases[i].start_date)\r\n                console.log(pstart)\r\n                const allDay = this.rnd(0, 3) === 0\r\n                const firstTimestamp = this.rnd(min.getTime(), max.getTime())\r\n                // const first = new Date(firstTimestamp - (firstTimestamp % 900000))\r\n                const first = min\r\n                // const secondTimestamp = this.rnd(2, allDay ? 288 : 8) * 900000\r\n                const secondTimestamp = 259200000\r\n                const second = new Date(first.getTime() + secondTimestamp)\r\n                name: this.names[this.rnd(0, this.names.length - 1)],\r\n                    events.push({\r\n                        name: phases[i].name,\r\n                        start: start_date,\r\n                        end: end_date,\r\n                        color: this.colors[this.rnd(0, this.colors.length - 1)],\r\n                        timed: false,\r\n                    })\r\n            }\r\n            this.createdEvents = events\r\n            console.log('this.createdEvents: ', this.createdEvents)\r\n        },\r\n        rnd(a, b) {\r\n            return Math.floor((b - a + 1) * Math.random()) + a\r\n        },\r\n        loadPhaseEvents() {\r\n            // console.log(this.selectedPlan.phases.length)\r\n            const number_phases = this.selectedPlan.phases.length\r\n            const start_date = \"2022-11-01\"\r\n            const end_date = \"2022-11-30\"\r\n            const phaseEvents = []\r\n\r\n            const min = new Date(`${start_date}T00:00:00`)\r\n            const max = new Date(`${end_date}T23:59:59`)\r\n            const days = (max.getTime() - min.getTime()) / 86400000\r\n            const eventCount = this.rnd(days, days + 20)\r\n            for (let i = 0; i < number_phases; i++) {\r\n                // this.plan.phases.forEach((item, index) => {\r\n                // this.selectedPlan.phases.forEach((phase) => {\r\n                const allDay = this.rnd(0, 3) === 0\r\n                const firstTimestamp = this.rnd(min.getTime(), max.getTime())\r\n                const first = new Date(firstTimestamp - (firstTimestamp % 900000))\r\n                const secondTimestamp = this.rnd(2, allDay ? 288 : 8) * 900000\r\n                const second = new Date(first.getTime() + secondTimestamp)\r\n\r\n                phaseEvents.push({\r\n                    name: this.names[this.rnd(0, this.names.length - 1)],\r\n                    start: first,\r\n                    end: second,\r\n                    color: this.colors[this.rnd(0, this.colors.length - 1)],\r\n                    timed: !allDay,\r\n                })\r\n            }\r\n            this.createdEvents = phaseEvents\r\n            console.log('this.createdEvents: ', this.createdEvents)\r\n        },\r\n        loadEvents() {\r\n\r\n            const number_phases = this.selectedPlan.phases.length\r\n            const phases = this.selectedPlan.phases\r\n            // const start_date = \"2022-11-01\"\r\n            // const end_date = \"2022-11-30\"\r\n            const events = []\r\n\r\n            // const min = new Date(`${start_date}T00:00:00`)\r\n            // const max = new Date(`${end_date}T23:59:59`)\r\n            // const days = (max.getTime() - min.getTime()) / 86400000\r\n\r\n            // const allDay = true\r\n\r\n            // const firstTimestamp = this.rnd(min.getTime(), max.getTime())\r\n            // const first = new Date(firstTimestamp - (firstTimestamp % 900000))\r\n            // const secondTimestamp = this.rnd(2, allDay ? 288 : 8) * 900000\r\n            // const second = new Date(first.getTime() + secondTimestamp)\r\n            // const start = new Date(`${phase.start_date}T00:00:00`)\r\n            // const end = new Date(`${phase.end_date}T23:59:59`)\r\n            const color = 'red'\r\n            for (let i = 0; i < number_phases; i++) {\r\n                const name = phases[i].name\r\n                console.log(name)\r\n                const start = phases[i].start_date\r\n                const end = phases[i].end_date\r\n                events.push({\r\n                    name: name,\r\n                    start: start,\r\n                    end: end,\r\n                    timed: false,\r\n                    color: color,\r\n                })\r\n            }\r\n            // ev.push({\r\n            //     name: 'bob',\r\n            //     start: first,\r\n            //     end: second,\r\n            //     color: 'red',\r\n            //     timed: false,\r\n            // })\r\n            this.phaseEvents = events\r\n\r\n            // if (this.phaseEvents[0].name === this.dummyEvents[0].name) { console.log('name is the same') }\r\n            // if (this.phaseEvents[0].start === this.dummyEvents[0].start) { console.log('start is the same') }\r\n            // if (this.phaseEvents[0].end === this.dummyEvents[0].end) { console.log('end is the same') }\r\n            console.log('phaseEvents: ', this.phaseEvents)\r\n            // console.log('dummyEvents: ', this.dummyEvents)\r\n\r\n            const dummyEvents = []\r\n            const aname = 'Phase name'\r\n            const astart = new Date('2022-11-13')\r\n            const aend = new Date('2022-11-27')\r\n            const atimed = false\r\n            const acolor = 'blue'\r\n\r\n            dummyEvents.push({\r\n                name: aname,\r\n                start: astart,\r\n                end: aend,\r\n                timed: atimed\r\n            })\r\n            this.dummyEvents = dummyEvents\r\n            // this.dummyEvents.push(dummy2)\r\n        },\r\n        calcStartDates() {\r\n            var startDate = new Date(this.startDate)\r\n            this.calendarStartDates = []\r\n            var n = 0\r\n            for (let i = 0; i < 6; i++) {\r\n                this.calendarStartDates.push(new Date((startDate.setMonth(startDate.getMonth() + n))))\r\n                n = 1\r\n            }\r\n            // console.log('calendarStartDates: ', this.calendarStartDates)\r\n        },\r\n        prev() {\r\n            var startDate = new Date(this.startDate)\r\n            this.startDate = new Date((startDate.setMonth(startDate.getMonth() - 1)))\r\n            this.calcStartDates()\r\n            // this.loadEvents()\r\n        },\r\n        next() {\r\n            var startDate = new Date(this.startDate)\r\n            this.startDate = new Date((startDate.setMonth(startDate.getMonth() + 1)))\r\n            this.calcStartDates()\r\n            // this.loadEvents()\r\n        },\r\n        showEvent({ nativeEvent, event }) {\r\n            console.log('event: ', event)\r\n            console.log('nativeEvent.target: ', nativeEvent.target)\r\n\r\n        },\r\n        viewMore(event) {\r\n            console.log('click:', event)\r\n            console.log('click date:', event.date)\r\n            // console.log('cal index:', index)\r\n            // this.focus[index] = date\r\n            // this.type = 'day'\r\n        },\r\n        getEventColor(event) {\r\n            return event.color\r\n        },\r\n        calendar1Change() {\r\n            // console.log('firing cal1 change')\r\n        },\r\n        clickDate(event, x) {\r\n\r\n        },\r\n        getMonthName(index) {\r\n            const date = new Date(this.calendarStartDates[index])\r\n            if (date.toString() !== 'Invalid Date')\r\n                return date.toLocaleString('en-us', { month: 'long' })\r\n            else\r\n                return 'December'\r\n        },\r\n        menuActionClick(index) {\r\n            this.menuItems[index].click.call(this)\r\n        }\r\n    },\r\n}\r\n</script>\r\n<!-- events: [\r\n                {\r\n                    name: 'Phase 1',\r\n                    start: '2022-01-02',\r\n                    end: '2022-05-04',\r\n                    timed: false,\r\n                    color: 'blue',\r\n                },\r\n                {\r\n                    name: 'Event 2',\r\n                    start: '2022-04-05',\r\n                    end: '2022-04-07',\r\n                },\r\n                {\r\n                    name: 'Event 3',\r\n                    start: '2022-04-09T08:00:00',\r\n                    end: '2022-04-09T10:00:00',\r\n                    timed: true,\r\n                },\r\n            ], -->"]},"metadata":{},"sourceType":"module"}