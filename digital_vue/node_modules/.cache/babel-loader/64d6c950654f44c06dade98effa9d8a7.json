{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog';\nimport axios from 'axios';\nexport default {\n  name: \"PlanDetailCalendarView\",\n  props: {\n    showPlanCalendar: Boolean\n  },\n  components: {\n    PhaseEditDialog\n  },\n  data() {\n    return {\n      selectedEvent: {},\n      selectedElement: null,\n      selectedOpen: false,\n      phaseEvents: [],\n      focus: \"\",\n      startDate: \"2022-11-01\",\n      calendarStartDates: []\n    };\n  },\n  computed: {\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    }\n  },\n  watch: {\n    selectedPlan() {\n      this.loadEvents();\n    }\n  },\n  mounted() {\n    this.calcStartDates();\n    this.loadEvents();\n    let phaseDataPayload = {\n      phase: this.selectedPlan.phases[0],\n      index: 0\n    };\n    this.$store.dispatch('selectPhaseData', phaseDataPayload);\n  },\n  methods: {\n    loadEvents() {\n      const events = [];\n      let index = 0;\n      this.selectedPlan.phases.forEach(phase => {\n        const eventObj = {\n          name: phase.name,\n          start: phase.start_date,\n          end: phase.end_date,\n          color: \"green\",\n          phase: phase,\n          index: index\n        };\n        events.push(eventObj);\n        index += 1;\n      });\n      this.phaseEvents = events;\n    },\n    calcStartDates() {\n      var startDate = new Date(this.startDate);\n      this.calendarStartDates = [];\n      var n = 0;\n      for (let i = 0; i < 6; i++) {\n        this.calendarStartDates.push(new Date(startDate.setMonth(startDate.getMonth() + n)));\n        n = 1;\n      }\n    },\n    prev() {\n      var startDate = new Date(this.startDate);\n      this.startDate = new Date(startDate.setMonth(startDate.getMonth() - 1));\n      this.calcStartDates();\n    },\n    next() {\n      var startDate = new Date(this.startDate);\n      this.startDate = new Date(startDate.setMonth(startDate.getMonth() + 1));\n      this.calcStartDates();\n    },\n    // requestAnimationFrame(() => requestAnimationFrame(() => this.show = true));\n    showEvent({\n      nativeEvent,\n      event\n    }) {\n      const open = () => {\n        let phaseDataPayload = {\n          phase: event.phase,\n          index: event.index\n        };\n        this.$store.dispatch('selectPhaseData', phaseDataPayload);\n        this.selectedEvent = event;\n        this.selectedElement = nativeEvent.target;\n        requestAnimationFrame(() => requestAnimationFrame(() => this.$emit(\"open-editphase-dialog\", event.phase)));\n      };\n      if (this.show) {\n        this.show = false;\n        requestAnimationFrame(() => requestAnimationFrame(() => open()));\n      } else {\n        open();\n      }\n      nativeEvent.stopPropagation();\n    },\n    viewMore(event) {},\n    getEventColor(event) {\n      return event.color;\n    },\n    calendar1Change() {\n      // console.log('firing cal1 change')\n    },\n    clickDate(event, x) {},\n    getMonthName(index) {\n      const date = new Date(this.calendarStartDates[index]);\n      if (date.toString() !== \"Invalid Date\") return date.toLocaleString(\"en-us\", {\n        month: \"long\"\n      });else return \"December\";\n    }\n  }\n};","map":{"version":3,"mappings":";AAkIA;AACA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;EACA;EACAG;IACAJ;MACA;IACA;EACA;EACAK;IACA;IACA;IACA;MAAAC;MAAAC;IAAA;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;QACA;UACAvB;UACAwB;UACAC;UACAC;UACAN;UACAC;QACA;QACAM;QACAN;MACA;MACA;IACA;IACAO;MACA;MACA;MACA;MACA;QACA;QACAC;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACA;IACAC;MAAAC;MAAAC;IAAA;MACA;QACA;UAAAd;UAAAC;QAAA;QACA;QACA;QACA;QACAc;MACA;MACA;QACA;QACAA;MACA,OACA;QACAC;MACA;MACAH;IACA;IACAI,iBAEA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC,qBACA;IACAC;MACA;MACA,wCACA;QAAAC;MAAA,QAEA;IACA;EACA;AACA","names":["name","props","showPlanCalendar","components","PhaseEditDialog","data","selectedEvent","selectedElement","selectedOpen","phaseEvents","focus","startDate","calendarStartDates","computed","selectedPlan","get","selectedPhase","selectedPhaseIndex","watch","mounted","phase","index","methods","loadEvents","start","end","color","events","calcStartDates","n","prev","next","showEvent","nativeEvent","event","requestAnimationFrame","open","viewMore","getEventColor","calendar1Change","clickDate","getMonthName","month"],"sourceRoot":"src/components/plan","sources":["PlanCalendar.vue"],"sourcesContent":["<template>\r\n    <v-sheet\r\n        v-if=\"showPlanCalendar\"\r\n        class=\"secondary mt-3 elevation-2\"\r\n        outlined>\r\n        <v-card\r\n            flat\r\n            tile>\r\n            <v-card-title class=\"py-1\">\r\n                <v-text-field\r\n                    v-model=\"editPhase.end_date\"\r\n                    class=\"rounded-0\"\r\n                    label=\"End Date\"\r\n                    dense\r\n                    outlined>\r\n                    <template v-slot:append>\r\n                        <DatePicker v-model=\"editPhase.end_date\" />\r\n                    </template>\r\n                </v-text-field>\r\n                <v-spacer></v-spacer>\r\n                <span>Phases and Strategies</span>\r\n                <v-spacer></v-spacer>\r\n                <v-btn icon @click=\"prev\">\r\n                    <v-icon class=\"black--text\">mdi-chevron-left</v-icon>\r\n                </v-btn>\r\n                <v-btn icon @click=\"next\">\r\n                    <v-icon class=\"black--text\">mdi-chevron-right</v-icon>\r\n                </v-btn>\r\n            </v-card-title>\r\n            <v-divider></v-divider>\r\n            <v-row class=\"mt-1 mx-1\">\r\n                <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                    <div>\r\n                        <h4 class=\"text-center\">\r\n                            {{ getMonthName(0) }}\r\n                        </h4>\r\n                        <v-calendar\r\n                            :events=\"phaseEvents\"\r\n                            ref=\"calendar0\"\r\n                            type=\"month\"\r\n                            @click:event=\"showEvent\"\r\n                            :start=\"calendarStartDates[0]\"\r\n                            @change=\"calendar1Change\">\r\n                        </v-calendar>\r\n                    </div>\r\n                </v-col>\r\n                <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                    <div>\r\n                        <h4 class=\"text-center\">\r\n                            {{ getMonthName(1) }}\r\n                        </h4>\r\n                        <v-calendar\r\n                            :events=\"phaseEvents\"\r\n                            ref=\"calendar1\"\r\n                            type=\"month\"\r\n                            @click:event=\"showEvent\"\r\n                            :start=\"calendarStartDates[1]\">\r\n                        </v-calendar>\r\n                    </div>\r\n                </v-col>\r\n                <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                    <div>\r\n                        <h4 class=\"text-center\">\r\n                            {{ getMonthName(2) }}\r\n                        </h4>\r\n                        <v-calendar\r\n                            :events=\"phaseEvents\"\r\n                            ref=\"calendar2\"\r\n                            type=\"month\"\r\n                            @click:event=\"showEvent\"\r\n                            :start=\"calendarStartDates[2]\">\r\n                        </v-calendar>\r\n                    </div>\r\n                </v-col>\r\n                <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                    <div>\r\n                        <h4 class=\"text-center\">\r\n                            {{ getMonthName(3) }}\r\n                        </h4>\r\n                        <v-calendar\r\n                            :events=\"phaseEvents\"\r\n                            ref=\"calendar3\"\r\n                            type=\"month\"\r\n                            @click:event=\"showEvent\"\r\n                            :start=\"calendarStartDates[3]\">\r\n                        </v-calendar>\r\n                    </div>\r\n                </v-col>\r\n                <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                    <div>\r\n                        <h4 class=\"text-center\">\r\n                            {{ getMonthName(4) }}\r\n                        </h4>\r\n                        <v-calendar\r\n                            :events=\"phaseEvents\"\r\n                            ref=\"calendar4\"\r\n                            type=\"month\"\r\n                            @click:event=\"showEvent\"\r\n                            :start=\"calendarStartDates[4]\">\r\n                        </v-calendar>\r\n                    </div>\r\n                </v-col>\r\n                <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                    <div>\r\n                        <h4 class=\"text-center\">\r\n                            {{ getMonthName(5) }}\r\n                        </h4>\r\n                        <v-calendar\r\n                            :events=\"phaseEvents\"\r\n                            ref=\"calendar5\"\r\n                            type=\"month\"\r\n                            @click:event=\"showEvent\"\r\n                            :start=\"calendarStartDates[5]\">\r\n                        </v-calendar>\r\n                    </div>\r\n                </v-col>\r\n            </v-row>\r\n            <v-card-actions>\r\n                <v-spacer></v-spacer>\r\n                <v-btn icon @click=\"prev\">\r\n                    <v-icon class=\"black--text\">mdi-chevron-left</v-icon>\r\n                </v-btn>\r\n                <v-btn icon @click=\"next\">\r\n                    <v-icon class=\"black--text\">mdi-chevron-right</v-icon>\r\n                </v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n    </v-sheet>\r\n</template>\r\n<script>\r\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: \"PlanDetailCalendarView\",\r\n    props: {\r\n        showPlanCalendar: Boolean,\r\n    },\r\n    components: {\r\n        PhaseEditDialog\r\n    },\r\n    data() {\r\n        return {\r\n            selectedEvent: {},\r\n            selectedElement: null,\r\n            selectedOpen: false,\r\n            phaseEvents: [],\r\n            focus: \"\",\r\n            startDate: \"2022-11-01\",\r\n            calendarStartDates: [],\r\n        };\r\n    },\r\n    computed: {\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan;\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase;\r\n            }\r\n        },\r\n        selectedPhaseIndex: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.index\r\n            }\r\n        },\r\n    },\r\n    watch: {\r\n        selectedPlan() {\r\n            this.loadEvents()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.calcStartDates();\r\n        this.loadEvents();\r\n        let phaseDataPayload = { phase: this.selectedPlan.phases[0], index: 0 }\r\n        this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n    },\r\n    methods: {\r\n        loadEvents() {\r\n            const events = [];\r\n            let index = 0;\r\n            this.selectedPlan.phases.forEach((phase) => {\r\n                const eventObj = {\r\n                    name: phase.name,\r\n                    start: phase.start_date,\r\n                    end: phase.end_date,\r\n                    color: \"green\",\r\n                    phase: phase,\r\n                    index: index,\r\n                };\r\n                events.push(eventObj);\r\n                index += 1;\r\n            });\r\n            this.phaseEvents = events;\r\n        },\r\n        calcStartDates() {\r\n            var startDate = new Date(this.startDate);\r\n            this.calendarStartDates = [];\r\n            var n = 0;\r\n            for (let i = 0; i < 6; i++) {\r\n                this.calendarStartDates.push(new Date((startDate.setMonth(startDate.getMonth() + n))));\r\n                n = 1;\r\n            }\r\n        },\r\n        prev() {\r\n            var startDate = new Date(this.startDate);\r\n            this.startDate = new Date((startDate.setMonth(startDate.getMonth() - 1)));\r\n            this.calcStartDates();\r\n        },\r\n        next() {\r\n            var startDate = new Date(this.startDate);\r\n            this.startDate = new Date((startDate.setMonth(startDate.getMonth() + 1)));\r\n            this.calcStartDates();\r\n        },\r\n        // requestAnimationFrame(() => requestAnimationFrame(() => this.show = true));\r\n        showEvent({ nativeEvent, event }) {\r\n            const open = () => {\r\n                let phaseDataPayload = { phase: event.phase, index: event.index }\r\n                this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n                this.selectedEvent = event;\r\n                this.selectedElement = nativeEvent.target;\r\n                requestAnimationFrame(() => requestAnimationFrame(() => this.$emit(\"open-editphase-dialog\", event.phase)));\r\n            };\r\n            if (this.show) {\r\n                this.show = false;\r\n                requestAnimationFrame(() => requestAnimationFrame(() => open()));\r\n            }\r\n            else {\r\n                open();\r\n            }\r\n            nativeEvent.stopPropagation();\r\n        },\r\n        viewMore(event) {\r\n\r\n        },\r\n        getEventColor(event) {\r\n            return event.color;\r\n        },\r\n        calendar1Change() {\r\n            // console.log('firing cal1 change')\r\n        },\r\n        clickDate(event, x) {\r\n        },\r\n        getMonthName(index) {\r\n            const date = new Date(this.calendarStartDates[index]);\r\n            if (date.toString() !== \"Invalid Date\")\r\n                return date.toLocaleString(\"en-us\", { month: \"long\" });\r\n            else\r\n                return \"December\";\r\n        },\r\n    },\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}