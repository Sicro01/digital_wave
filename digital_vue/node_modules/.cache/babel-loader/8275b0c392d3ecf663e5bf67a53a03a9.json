{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PhaseCard from '@/components/phase/PhaseCard';\nimport PhaseToolbar from '@/components/phase/PhaseToolbar';\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog';\nimport axios from 'axios';\nimport store from '@/store';\nexport default {\n  name: 'PlanDetailView',\n  components: {\n    PhaseCard,\n    PhaseToolbar,\n    PhaseEditDialog\n  },\n  data() {\n    return {\n      plan: '',\n      isCreateOrDelete: false,\n      tab: '',\n      // activeName: '',\n      isEdit: false,\n      open_dialog: false,\n      newPhase: {\n        id: -1,\n        name: '',\n        description: '',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10)\n      },\n      editPhase: {\n        id: 0,\n        name: '',\n        description: '',\n        start_date: '',\n        end_date: ''\n      }\n    };\n  },\n  computed: {\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    },\n    show: {\n      get() {\n        return this.$store.state.phaseDisplay.show;\n      }\n    }\n  },\n  watch: {\n    tab(newTabURL, oldTabURL) {\n      // Set the name of the tab name variable to the first tab in the tablist when the tabs are first shown.\n      // oldTabURL will be empty as there will be no previous tab\n      if (!oldTabURL) {\n        const phaseDataPayload = {\n          phase: this.selectedPlan.phases[0],\n          index: 0\n        };\n        this.$store.dispatch('selectPhaseData', phaseDataPayload);\n      }\n    }\n  },\n  methods: {\n    async getPlan() {\n      var response = '';\n      const plan_slug = this.$route.params.plan_slug;\n      try {\n        response = await axios.get(`/api/v1/plan/${plan_slug}`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('selectPlan', response.data);\n\n      // If Created or Deleted a phase then reset focus to first tab\n      if (this.isCreateOrDelete) {\n        this.$router.push(this.selectedPlan.phases[0].get_absolute_url);\n        const phaseDataPayload = {\n          phase: this.selectedPlan.phases[0],\n          index: 0\n        };\n        this.$store.dispatch('selectPhaseData', phaseDataPayload);\n        this.isCreateOrDelete = false;\n      }\n    },\n    async updatePhase(updatePayload) {\n      // Unpack details from Edit Dialog\n      var phaseUpdate = updatePayload.editPhase;\n      phaseUpdate.plan = this.SelectedPlan.id;\n      console.log('phaseUpdate: ', phaseUpdate);\n      var isNameChanged = updatePayload.isNameChanged;\n\n      // Find phase by matching id and replace it in the Plan with updated one\n      // var phaseTabIndex = 0\n      // this.$store.state.selectedPlan.phases.forEach((item, index) => {\n      //     if (item.id === phaseUpdate.id) {\n      //         this.$set(this.selectedPlan.phases, index, phaseUpdate)\n      //         phaseTabIndex = index\n      //     }\n      // })\n      // // Update the Plan (now with the updated Phase)\n      // var response = ''\n      // try {\n      //     response = await axios.put(`api/v1/plans/${this.selectedPlan.id}/`, this.selectedPlan)\n      // }\n      // catch (error) {\n      //     console.log(error)\n      // }\n      try {\n        response = await axios.put(`api/v1/phase/${phaseUpdate.id}`, phaseUpdate);\n      } catch (error) {\n        console.log(error);\n      }\n\n      // Update Store with selected plan and phase\n      this.$store.dispatch('selectPlan', response.data);\n      const storePhasePayload = {\n        phase: response.data.phases[phaseTabIndex],\n        index: phaseTabIndex\n      };\n      this.$store.dispatch('selectPhaseData', storePhasePayload);\n\n      // Show snackbar\n      this.showSnackBar('updated');\n\n      // Change route if phase name has changed\n      isNameChanged ? this.$router.push(this.selectedPhase.get_absolute_url) : '';\n    },\n    async createPhase(createPhase) {\n      // Using the plan update serializer which either updates a phase or create a new one if no phase id\n      this.$delete(createPhase, 'id'); // get rid of the plan's id field as we want to update the plan\n      this.selectedPlan.phases.push(createPhase); // add the phase to the plan then update the plan\n\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/plans/${this.selectedPlan.id}/`, this.selectedPlan);\n      } catch (error) {\n        console.log(error);\n      }\n      // Update Store with selected plan and phase\n      this.$store.dispatch('selectPlan', response.data);\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[0],\n        index: 0\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Display Snackbar message\n      this.showSnackBar('created');\n\n      // Change route to selected phase\n      this.$router.push(this.selectedPhase.get_absolute_url);\n    },\n    async deletePhase(deletePhase) {\n      // Store index of phase being deleted - if it's 0 then we don't want to change navigation route else we get dup nav error\n      var indexOfDeletedPhase = this.selectedPhaseIndex;\n\n      // Delete the phase\n      var response = '';\n      try {\n        response = await axios.delete(`api/v1/phases/${deletePhase.id}/`);\n      } catch (error) {\n        console.log(error);\n      }\n      // Get updated version of the plan - this will also update the store plan\n      await this.getPlan();\n\n      // Update Store with selected phase\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[0],\n        index: 0\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Display Snackbar message\n      this.showSnackBar('deleted');\n\n      // Change route to selected phase\n      this.$router.push(this.selectedPhase.get_absolute_url);\n    },\n    showSnackBar(message) {\n      const payload = {\n        text: `Successfully ${message} ${this.selectedPhase.name}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    saveToStore(payload) {\n      // Unpack payload and save to store\n      var plan = payload.plan;\n      var phase = payload.phase;\n      var index = payload.index;\n      var phasePayload = {\n        phase: phase,\n        index: index\n      };\n      this.$store.dispatch('selectPlan', plan);\n      this.$store.dispatch('selectPhaseData', phasePayload);\n    },\n    openEditDialog(editPhase) {\n      this.editPhase = editPhase;\n      this.open_dialog = true;\n    },\n    openNewDialog() {\n      this.editPhase = this.newPhase;\n      this.open_dialog = true;\n    },\n    onTabClick(phase, index) {\n      const payload = {\n        phase: phase,\n        index: index\n      };\n      this.$store.dispatch('selectPhaseData', payload);\n    },\n    menuActionClick(index) {\n      this.menuItems[index].click.call(this);\n    }\n  }\n};","map":{"version":3,"mappings":";AAiEA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACA;MACAC;MACAC;MACAC;QACAC;QACAZ;QACAa;QACAC;QACAC;MACA;MACAC;QACAJ;QACAZ;QACAa;QACAC;QACAC;MACA;IACA;EACA;EACAE;IACAC;MACAC;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;EACA;EACAI;IACAf;MACA;MACA;MACA;QACA;UAAAgB;UAAAC;QAAA;QACA;MACA;IACA;EACA;EACAC;IACA;MACA;MACA;MACA;QACAC;MACA,EACA;QACAC;MACA;MACA;;MAEA;MACA;QACA;QACA;UAAAJ;UAAAC;QAAA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;MACAI;MACAD;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACAD;MACA,EACA;QACAC;MACA;;MAEA;MACA;MACA;QAAAJ;QAAAC;MAAA;MACA;;MAEA;MACA;;MAEA;MACAK;IACA;IACA;MACA;MACA;MACA;;MAEA;MACA;QACAH;MACA,EACA;QACAC;MACA;MACA;MACA;MACA;QAAAJ;QAAAC;MAAA;MACA;;MAEA;MACA;;MAEA;MACA;IACA;IACA;MACA;MACA;;MAEA;MACA;MACA;QACAE;MACA,EACA;QACAC;MACA;MACA;MACA;;MAEA;MACA;QAAAJ;QAAAC;MAAA;MACA;;MAGA;MACA;;MAEA;MACA;IACA;IACAM;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;QAAAX;QAAAC;MAAA;MACA;MACA;IACA;IACAW;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;QAAAd;QAAAC;MAAA;MACA;IACA;IACAc;MACA;IACA;EACA;AACA","names":["name","components","PhaseCard","PhaseToolbar","PhaseEditDialog","data","plan","isCreateOrDelete","tab","isEdit","open_dialog","newPhase","id","description","start_date","end_date","editPhase","computed","selectedPlan","get","selectedPhase","selectedPhaseIndex","show","watch","phase","index","methods","response","console","phaseUpdate","isNameChanged","showSnackBar","text","alerttype","contentclass","saveToStore","openEditDialog","openNewDialog","onTabClick","menuActionClick"],"sourceRoot":"src/views","sources":["PlanDetailView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-row class=\"mt-3 mx-4\">\r\n            <v-col\r\n                md=\"12\"\r\n                sm=\"12\"\r\n                class=\"align-center\">\r\n\r\n                <PhaseToolbar\r\n                    :activeName=\"selectedPhase.name\"\r\n                    @open-dialog=\"openNewDialog()\"\r\n                    @show=\"$store.dispatch('togglePhaseDisplay')\" />\r\n\r\n                <v-card\r\n                    v-if=\"show\"\r\n                    flat\r\n                    tile>\r\n                    <v-tabs\r\n                        v-model=\"tab\"\r\n                        class=\"mt-3 elevation-0 rounded-0\"\r\n                        background-color=\"grey lighten-3\"\r\n                        center-active\r\n                        show-arrows\r\n                        slider-size=6>\r\n                        <v-tabs-slider color=\"white\"></v-tabs-slider>\r\n                        <v-tab\r\n                            v-for=\"(phase, index) in selectedPlan.phases\"\r\n                            :key=\"phase.id\"\r\n                            :href=\"'#' + phase.slug\"\r\n                            :to=\"`${phase.get_absolute_url}`\"\r\n                            @click=\"onTabClick(phase, index)\"\r\n                            class=\"secondary darken-3 text-capitalize black--text font-weight-regular\">\r\n                            {{ phase.name }}\r\n                        </v-tab>\r\n                        <v-spacer></v-spacer>\r\n                    </v-tabs>\r\n                    <!-- v-for=\"(phase, index) in plan.phases\" -->\r\n\r\n                    <v-tabs-items\r\n                        v-model=\"tab\">\r\n                        <v-tab-item\r\n                            v-for=\"(phase, index) in selectedPlan.phases\"\r\n                            :key=\"index\"\r\n                            :id=\"phase.get_absolute_url\">\r\n                            <router-view v-if=\"tab === phase.slug\" />\r\n                            <PhaseCard\r\n                                :phase=\"phase\"\r\n                                @open-editphase-dialog=\"openEditDialog(phase)\" />\r\n\r\n                        </v-tab-item>\r\n                    </v-tabs-items>\r\n                </v-card>\r\n            </v-col>\r\n        </v-row>\r\n\r\n        <PhaseEditDialog\r\n            v-model=\"open_dialog\"\r\n            :phase=\"editPhase\"\r\n            @create=\"createPhase\"\r\n            @update=\"updatePhase\"\r\n            @delete=\"deletePhase\" />\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport PhaseCard from '@/components/phase/PhaseCard'\r\nimport PhaseToolbar from '@/components/phase/PhaseToolbar'\r\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog'\r\nimport axios from 'axios'\r\nimport store from '@/store'\r\n\r\nexport default {\r\n    name: 'PlanDetailView',\r\n    components: {\r\n        PhaseCard,\r\n        PhaseToolbar,\r\n        PhaseEditDialog,\r\n    },\r\n    data() {\r\n        return {\r\n            plan: '',\r\n            isCreateOrDelete: false,\r\n            tab: '',\r\n            // activeName: '',\r\n            isEdit: false,\r\n            open_dialog: false,\r\n            newPhase: {\r\n                id: -1,\r\n                name: '',\r\n                description: '',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n            },\r\n            editPhase: {\r\n                id: 0,\r\n                name: '',\r\n                description: '',\r\n                start_date: '',\r\n                end_date: '',\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedPhaseIndex: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.index\r\n            }\r\n        },\r\n        show: {\r\n            get() {\r\n                return this.$store.state.phaseDisplay.show\r\n            }\r\n        },\r\n    },\r\n    watch: {\r\n        tab(newTabURL, oldTabURL) {\r\n            // Set the name of the tab name variable to the first tab in the tablist when the tabs are first shown.\r\n            // oldTabURL will be empty as there will be no previous tab\r\n            if (!oldTabURL) {\r\n                const phaseDataPayload = { phase: this.selectedPlan.phases[0], index: 0 }\r\n                this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        async getPlan() {\r\n            var response = ''\r\n            const plan_slug = this.$route.params.plan_slug\r\n            try {\r\n                response = await axios.get(`/api/v1/plan/${plan_slug}`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('selectPlan', response.data)\r\n\r\n            // If Created or Deleted a phase then reset focus to first tab\r\n            if (this.isCreateOrDelete) {\r\n                this.$router.push(this.selectedPlan.phases[0].get_absolute_url)\r\n                const phaseDataPayload = { phase: this.selectedPlan.phases[0], index: 0 }\r\n                this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n                this.isCreateOrDelete = false\r\n            }\r\n        },\r\n        async updatePhase(updatePayload) {\r\n            // Unpack details from Edit Dialog\r\n            var phaseUpdate = updatePayload.editPhase\r\n            phaseUpdate.plan = this.SelectedPlan.id\r\n            console.log('phaseUpdate: ', phaseUpdate)\r\n            var isNameChanged = updatePayload.isNameChanged\r\n\r\n            // Find phase by matching id and replace it in the Plan with updated one\r\n            // var phaseTabIndex = 0\r\n            // this.$store.state.selectedPlan.phases.forEach((item, index) => {\r\n            //     if (item.id === phaseUpdate.id) {\r\n            //         this.$set(this.selectedPlan.phases, index, phaseUpdate)\r\n            //         phaseTabIndex = index\r\n            //     }\r\n            // })\r\n            // // Update the Plan (now with the updated Phase)\r\n            // var response = ''\r\n            // try {\r\n            //     response = await axios.put(`api/v1/plans/${this.selectedPlan.id}/`, this.selectedPlan)\r\n            // }\r\n            // catch (error) {\r\n            //     console.log(error)\r\n            // }\r\n            try {\r\n                response = await axios.put(`api/v1/phase/${phaseUpdate.id}`, phaseUpdate)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n\r\n            // Update Store with selected plan and phase\r\n            this.$store.dispatch('selectPlan', response.data)\r\n            const storePhasePayload = { phase: response.data.phases[phaseTabIndex], index: phaseTabIndex }\r\n            this.$store.dispatch('selectPhaseData', storePhasePayload)\r\n\r\n            // Show snackbar\r\n            this.showSnackBar('updated')\r\n\r\n            // Change route if phase name has changed\r\n            isNameChanged ? this.$router.push(this.selectedPhase.get_absolute_url) : ''\r\n        },\r\n        async createPhase(createPhase) {\r\n            // Using the plan update serializer which either updates a phase or create a new one if no phase id\r\n            this.$delete(createPhase, 'id') // get rid of the plan's id field as we want to update the plan\r\n            this.selectedPlan.phases.push(createPhase) // add the phase to the plan then update the plan\r\n\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/plans/${this.selectedPlan.id}/`, this.selectedPlan)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Update Store with selected plan and phase\r\n            this.$store.dispatch('selectPlan', response.data)\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[0], index: 0 }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar('created')\r\n\r\n            // Change route to selected phase\r\n            this.$router.push(this.selectedPhase.get_absolute_url)\r\n        },\r\n        async deletePhase(deletePhase) {\r\n            // Store index of phase being deleted - if it's 0 then we don't want to change navigation route else we get dup nav error\r\n            var indexOfDeletedPhase = this.selectedPhaseIndex\r\n\r\n            // Delete the phase\r\n            var response = ''\r\n            try {\r\n                response = await axios.delete(`api/v1/phases/${deletePhase.id}/`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Get updated version of the plan - this will also update the store plan\r\n            await this.getPlan()\r\n\r\n            // Update Store with selected phase\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[0], index: 0 }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar('deleted')\r\n\r\n            // Change route to selected phase\r\n            this.$router.push(this.selectedPhase.get_absolute_url)\r\n        },\r\n        showSnackBar(message) {\r\n            const payload = { text: `Successfully ${message} ${this.selectedPhase.name}`, alerttype: \"success\", contentclass: 'white--text' }\r\n            this.$store.dispatch('showSnackBar', payload)\r\n        },\r\n        saveToStore(payload) {\r\n            // Unpack payload and save to store\r\n            var plan = payload.plan\r\n            var phase = payload.phase\r\n            var index = payload.index\r\n            var phasePayload = { phase: phase, index: index }\r\n            this.$store.dispatch('selectPlan', plan)\r\n            this.$store.dispatch('selectPhaseData', phasePayload)\r\n        },\r\n        openEditDialog(editPhase) {\r\n            this.editPhase = editPhase\r\n            this.open_dialog = true\r\n        },\r\n        openNewDialog() {\r\n            this.editPhase = this.newPhase\r\n            this.open_dialog = true\r\n        },\r\n        onTabClick(phase, index) {\r\n            const payload = { phase: phase, index: index }\r\n            this.$store.dispatch('selectPhaseData', payload)\r\n        },\r\n        menuActionClick(index) {\r\n            this.menuItems[index].click.call(this)\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped lang='scss'>\r\n.v-tab--active {\r\n    color: white !important;\r\n}\r\n\r\n.v-tab {\r\n    text-transform: none !important;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}