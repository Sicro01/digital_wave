{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog';\nexport default {\n  name: \"PlanDetailCalendarView\",\n  components: PhaseEditDialog,\n  data() {\n    return {\n      show: false,\n      selectedPhase: {},\n      selectedEvent: {},\n      selectedElement: null,\n      selectedOpen: false,\n      phaseEvents: [],\n      focus: \"\",\n      startDate: \"2022-11-01\",\n      calendarStartDates: [],\n      menuItems: [{\n        text: \"Add Phase\",\n        click() {\n          this.$emit(\"open-dialog\");\n        }\n      }, {\n        text: \"Hide/Show Phases\",\n        click() {\n          this.$emit(\"show\");\n        }\n      }]\n    };\n  },\n  computed: {\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    }\n  },\n  mounted() {\n    this.calcStartDates();\n    this.loadEvents();\n  },\n  methods: {\n    loadEvents() {\n      const events = [];\n      this.selectedPlan.phases.forEach(phase => {\n        const eventObj = {\n          name: phase.name,\n          start: phase.start_date,\n          end: phase.end_date,\n          color: \"red\",\n          phase: phase\n        };\n        events.push(eventObj);\n      });\n      this.phaseEvents = events;\n      console.log(\"phaseEvents: \", this.phaseEvents);\n    },\n    calcStartDates() {\n      var startDate = new Date(this.startDate);\n      this.calendarStartDates = [];\n      var n = 0;\n      for (let i = 0; i < 6; i++) {\n        this.calendarStartDates.push(new Date(startDate.setMonth(startDate.getMonth() + n)));\n        n = 1;\n      }\n    },\n    prev() {\n      var startDate = new Date(this.startDate);\n      this.startDate = new Date(startDate.setMonth(startDate.getMonth() - 1));\n      this.calcStartDates();\n    },\n    next() {\n      var startDate = new Date(this.startDate);\n      this.startDate = new Date(startDate.setMonth(startDate.getMonth() + 1));\n      this.calcStartDates();\n    },\n    showEvent({\n      nativeEvent,\n      event\n    }) {\n      console.log(event.phase);\n      const open = () => {\n        this.selectedPhase = event.phase;\n        this.selectedEvent = event;\n        this.selectedElement = nativeEvent.target;\n        requestAnimationFrame(() => requestAnimationFrame(() => this.selectedOpen = true));\n      };\n      if (this.selectedOpen) {\n        this.selectedOpen = false;\n        requestAnimationFrame(() => requestAnimationFrame(() => open()));\n      } else {\n        open();\n      }\n      nativeEvent.stopPropagation();\n    },\n    viewMore(event) {},\n    getEventColor(event) {\n      return event.color;\n    },\n    calendar1Change() {\n      // console.log('firing cal1 change')\n    },\n    clickDate(event, x) {},\n    getMonthName(index) {\n      const date = new Date(this.calendarStartDates[index]);\n      if (date.toString() !== \"Invalid Date\") return date.toLocaleString(\"en-us\", {\n        month: \"long\"\n      });else return \"December\";\n    },\n    menuActionClick(index) {\n      this.menuItems[index].click.call(this);\n    }\n  },\n  components: {\n    PhaseEditDialog\n  }\n};","map":{"version":3,"mappings":";AAuHA;AAEA;EACAA;EACAC;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC,YACA;QAAAC;QAAAC;UAAA;QAAA;MAAA,GACA;QAAAD;QAAAC;UAAA;QAAA;MAAA;IAEA;EACA;EACAC;IACAC;MACAC;QACA;MACA;IACA;IACAb;MACAa;QACA;MACA;IACA;EACA;EACAC;IACA;IACA;EACA;EACAC;IACAC;MACA;MACA;QACA;UACApB;UACAqB;UACAC;UACAC;UACAC;QACA;QACAC;MACA;MACA;MACAC;IACA;IACAC;MACA;MACA;MACA;MACA;QACA;QACAC;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MAAAC;MAAAC;IAAA;MACAP;MACA;QACA;QACA;QACA;QACAQ;MACA;MACA;QACA;QACAA;MACA,OACA;QACAC;MACA;MACAH;IACA;IACAI,iBAEA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC,qBACA;IACAC;MACA;MACA,wCACA;QAAAC;MAAA,QAEA;IACA;IACAC;MACA;IACA;EACA;EACAzC;IAAA0C;EAAA;AACA","names":["name","components","data","show","selectedPhase","selectedEvent","selectedElement","selectedOpen","phaseEvents","focus","startDate","calendarStartDates","menuItems","text","click","computed","selectedPlan","get","mounted","methods","loadEvents","start","end","color","phase","events","console","calcStartDates","n","prev","next","showEvent","nativeEvent","event","requestAnimationFrame","open","viewMore","getEventColor","calendar1Change","clickDate","getMonthName","month","menuActionClick","PhaseEditDialog"],"sourceRoot":"src/views","sources":["PlanDetailCalendarView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-card\r\n            flat\r\n            tile\r\n            outlined\r\n            class=\"mt-5 mx-3\">\r\n            <v-card-title class=\"pa-0\">\r\n                <v-toolbar\r\n                    flat\r\n                    dense\r\n                    outlined\r\n                    class=\"secondary darken-3 rounded-0 text-h3 white--text\">\r\n                    <v-spacer></v-spacer>\r\n                    <v-toolbar-title class=\"ml-0\">\r\n                        <v-btn icon @click=\"prev\">\r\n                            <v-icon class=\"white--text\">mdi-chevron-left</v-icon>\r\n                        </v-btn>\r\n                        <v-btn icon @click=\"next\">\r\n                            <v-icon class=\"white--text\">mdi-chevron-right</v-icon>\r\n                        </v-btn>\r\n                    </v-toolbar-title>\r\n                    <v-menu\r\n                        left\r\n                        offset-y>\r\n                        <template v-slot:activator=\"{ on, attrs }\">\r\n                            <v-btn\r\n                                dark\r\n                                icon\r\n                                v-bind=\"attrs\"\r\n                                v-on=\"on\">\r\n                                <v-icon>mdi-dots-vertical</v-icon>\r\n                            </v-btn>\r\n                        </template>\r\n                        <v-list>\r\n                            <v-list-item\r\n                                v-for=\"(menuItem, i) in menuItems\"\r\n                                :key=\"i\"\r\n                                @click=\"menuActionClick(i)\">\r\n                                <v-btn text class=\"text-capitalize\">{{ menuItem.text }}</v-btn>\r\n                            </v-list-item>\r\n                        </v-list>\r\n                    </v-menu>\r\n                </v-toolbar>\r\n            </v-card-title>\r\n            <v-card-text class=\"px-0\">\r\n                <v-row class=\"ma-0\">\r\n                    <v-col lg=\"2\" md=\"4\" sm=\"12\">\r\n                        <div>\r\n                            <h3 class=\"text-center\">\r\n                                {{ getMonthName(0) }}\r\n                            </h3>\r\n                            <v-calendar\r\n                                :events=\"phaseEvents\"\r\n                                ref=\"calendar1\"\r\n                                type=\"month\"\r\n                                @click:event=\"showEvent\"\r\n                                :start=\"calendarStartDates[0]\"\r\n                                @change=\"calendar1Change\"\r\n                                event-color=\"blue\">\r\n                            </v-calendar>\r\n                        </div>\r\n                    </v-col>\r\n\r\n\r\n\r\n                </v-row>\r\n            </v-card-text>\r\n\r\n            <v-card-actions>\r\n                <v-spacer></v-spacer>\r\n                <v-btn\r\n                    class=\"mx-10 secondary darken-3 rounded-0 text-capitalize\"\r\n                    depressed>\r\n                    Button\r\n                </v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n        <v-menu\r\n            v-model=\"selectedOpen\"\r\n            :close-on-content-click=\"false\"\r\n            :activator=\"selectedElement\"\r\n            offset-x>\r\n            <v-card\r\n                color=\"grey lighten-4\"\r\n                min-width=\"350px\"\r\n                flat>\r\n                <v-toolbar\r\n                    :color=\"selectedEvent.color\"\r\n                    dark>\r\n                    <v-btn icon>\r\n                        <v-icon>mdi-pencil</v-icon>\r\n                    </v-btn>\r\n                    <v-toolbar-title v-html=\"selectedEvent.name\"></v-toolbar-title>\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn icon>\r\n                        <v-icon>mdi-heart</v-icon>\r\n                    </v-btn>\r\n                    <v-btn icon>\r\n                        <v-icon>mdi-dots-vertical</v-icon>\r\n                    </v-btn>\r\n                </v-toolbar>\r\n                <v-card-text>\r\n                    <span v-html=\"selectedEvent.details\"></span>\r\n                </v-card-text>\r\n                <v-card-actions>\r\n                    <v-btn\r\n                        text\r\n                        color=\"secondary\"\r\n                        @click=\"selectedOpen = false\">\r\n                        Cancel\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-menu>\r\n        <PhaseEditDialog v-model=\"show\" :phase=\"selectedPhase\" />\r\n    </div>\r\n</template>\r\n<script>\r\nimport PhaseEditDialog from '@/components/dialogs/PhaseEditDialog'\r\n\r\nexport default {\r\n    name: \"PlanDetailCalendarView\",\r\n    components: PhaseEditDialog,\r\n    data() {\r\n        return {\r\n            show: false,\r\n            selectedPhase: {},\r\n            selectedEvent: {},\r\n            selectedElement: null,\r\n            selectedOpen: false,\r\n            phaseEvents: [],\r\n            focus: \"\",\r\n            startDate: \"2022-11-01\",\r\n            calendarStartDates: [],\r\n            menuItems: [\r\n                { text: \"Add Phase\", click() { this.$emit(\"open-dialog\"); } },\r\n                { text: \"Hide/Show Phases\", click() { this.$emit(\"show\"); } },\r\n            ],\r\n        };\r\n    },\r\n    computed: {\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan;\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase;\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        this.calcStartDates();\r\n        this.loadEvents();\r\n    },\r\n    methods: {\r\n        loadEvents() {\r\n            const events = [];\r\n            this.selectedPlan.phases.forEach((phase) => {\r\n                const eventObj = {\r\n                    name: phase.name,\r\n                    start: phase.start_date,\r\n                    end: phase.end_date,\r\n                    color: \"red\",\r\n                    phase: phase\r\n                };\r\n                events.push(eventObj);\r\n            });\r\n            this.phaseEvents = events;\r\n            console.log(\"phaseEvents: \", this.phaseEvents);\r\n        },\r\n        calcStartDates() {\r\n            var startDate = new Date(this.startDate);\r\n            this.calendarStartDates = [];\r\n            var n = 0;\r\n            for (let i = 0; i < 6; i++) {\r\n                this.calendarStartDates.push(new Date((startDate.setMonth(startDate.getMonth() + n))));\r\n                n = 1;\r\n            }\r\n        },\r\n        prev() {\r\n            var startDate = new Date(this.startDate);\r\n            this.startDate = new Date((startDate.setMonth(startDate.getMonth() - 1)));\r\n            this.calcStartDates();\r\n        },\r\n        next() {\r\n            var startDate = new Date(this.startDate);\r\n            this.startDate = new Date((startDate.setMonth(startDate.getMonth() + 1)));\r\n            this.calcStartDates();\r\n        },\r\n        showEvent({ nativeEvent, event }) {\r\n            console.log(event.phase);\r\n            const open = () => {\r\n                this.selectedPhase = event.phase;\r\n                this.selectedEvent = event;\r\n                this.selectedElement = nativeEvent.target;\r\n                requestAnimationFrame(() => requestAnimationFrame(() => this.selectedOpen = true));\r\n            };\r\n            if (this.selectedOpen) {\r\n                this.selectedOpen = false;\r\n                requestAnimationFrame(() => requestAnimationFrame(() => open()));\r\n            }\r\n            else {\r\n                open();\r\n            }\r\n            nativeEvent.stopPropagation();\r\n        },\r\n        viewMore(event) {\r\n\r\n        },\r\n        getEventColor(event) {\r\n            return event.color;\r\n        },\r\n        calendar1Change() {\r\n            // console.log('firing cal1 change')\r\n        },\r\n        clickDate(event, x) {\r\n        },\r\n        getMonthName(index) {\r\n            const date = new Date(this.calendarStartDates[index]);\r\n            if (date.toString() !== \"Invalid Date\")\r\n                return date.toLocaleString(\"en-us\", { month: \"long\" });\r\n            else\r\n                return \"December\";\r\n        },\r\n        menuActionClick(index) {\r\n            this.menuItems[index].click.call(this);\r\n        }\r\n    },\r\n    components: { PhaseEditDialog }\r\n}\r\n</script>\r\n<!-- events: [\r\n                {\r\n                    name: 'Phase 1',\r\n                    start: '2022-01-02',\r\n                    end: '2022-05-04',\r\n                    timed: false,\r\n                    color: 'blue',\r\n                },\r\n                {\r\n                    name: 'Event 2',\r\n                    start: '2022-04-05',\r\n                    end: '2022-04-07',\r\n                },\r\n                {\r\n                    name: 'Event 3',\r\n                    start: '2022-04-09T08:00:00',\r\n                    end: '2022-04-09T10:00:00',\r\n                    timed: true,\r\n                },\r\n            ], -->"]},"metadata":{},"sourceType":"module"}