{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PlanCard from '@/components/plan/PlanCard';\nimport PlanEditDialog from '@/components/dialogs/PlanEditDialog';\nimport axios from 'axios';\nexport default {\n  name: 'HomeView',\n  components: {\n    PlanCard,\n    PlanEditDialog\n  },\n  data() {\n    return {\n      plans: [],\n      editPlan: {},\n      open_dialog: false,\n      initialStrategy: {\n        name: 'Strategy name',\n        description: 'Strategy description',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        budget: 0,\n        budget_allocated: 0,\n        auto_allocated: false\n      },\n      initialPhase: {\n        name: 'Phase name',\n        description: 'Phase description',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        budget: 0,\n        budget_allocated: 0,\n        auto_allocated: false\n      },\n      initialPlan: {\n        id: -1,\n        name: '',\n        description: '',\n        budget: 0,\n        auto_allocate: false\n      }\n    };\n  },\n  computed: {\n    newPlan: {\n      get() {\n        this.initialPhase.strategies = [this.initialStrategy];\n        this.initialPlan.phases = [this.initialPhase];\n        return this.initialPlan;\n      }\n    },\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    },\n    storedTargetCountries: {\n      get() {\n        return this.$store.state.storedTargetCountries;\n      }\n    }\n  },\n  mounted() {\n    this.getPlans();\n    document.title = 'Home | Digital Wave';\n  },\n  methods: {\n    async getPlans() {\n      var response = '';\n      try {\n        response = await axios.get('api/v1/plans/');\n      } catch (error) {\n        console.log(error);\n      }\n      if (response.data.length > 0) {\n        this.plans = response.data;\n        // console.log('plans: ', this.plans)\n        this.$store.dispatch('selectPlan', this.plans[0]);\n      }\n    },\n    async getPlan(id) {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/plan/${id}`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('selectPlan', response.data);\n    },\n    async updatePlan(updatePlan) {\n      var response = '';\n      // var planPayload = { name: updatePlan.name, description: updatePlan.description }\n      try {\n        response = await axios.patch(`api/v1/plan/${updatePlan.id}/`, updatePlan);\n      } catch (error) {\n        console.log(error);\n      }\n      this.getPlans();\n      const payload = {\n        text: `Successfully updated ${updatePlan.name}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    async createPlan(createPlan) {\n      console.log('createPlan', createPlan);\n      // Auto allocate budget \n      var createPlan = this.autoAllocateBudget(createPlan);\n\n      // Save plan to DB\n      var response = '';\n      console.log('createPlan: ', createPlan);\n      try {\n        response = await axios.post(`api/v1/plans/`, createPlan);\n      } catch (error) {\n        console.log(error);\n      }\n      this.getPlans();\n      const payload = {\n        text: `Successfully created ${createPlan.name} - Initial Phase Added`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    async deletePlan(deletePlan) {\n      var response = '';\n      try {\n        response = await axios.delete(`api/v1/plan/${deletePlan.id}/`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.getPlans();\n      const payload = {\n        text: `Successfully deleted ${deletePlan.name}`,\n        alerttype: \"success\",\n        contentclass: 'white--text'\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    },\n    async getTargetCountries() {\n      console.log('HomeView: getTargetCountries: selectedStrategy', this.selectedStrategy.id);\n      var response = '';\n      try {\n        response = await axios.get(`api/v1/targetcountries`, {\n          params: {\n            strategy: this.selectedStrategy.id\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh Strategy's Stored  Target Country data\n      this.$store.dispatch('storeTargetCountries', response.data);\n      return response.data;\n    },\n    async getTargetChannels() {\n      var storedTargetChannels = [];\n      console.log('HomeView: getTargetChannels: storedTargetCountries', this.storedTargetCountries);\n      this.storedTargetCountries.forEach(country => {\n        var response = '';\n        try {\n          response = axios.get(`api/v1/targetchannels`, {\n            params: {\n              target_country: country\n            }\n          });\n        } catch (error) {\n          console.log(error);\n        }\n        storedTargetChannels.push(response.data);\n      });\n      this.$store.dispatch('storeTargetChannels', storedTargetChannels);\n    },\n    autoAllocateBudget(plan) {\n      if (plan.auto_allocate) console.log('auto allocate budget into phase and strategy');\n      return plan;\n    },\n    openEditPlanDialog(editPlan) {\n      this.editPlan = editPlan;\n      this.open_dialog = true;\n    },\n    openNewPlanDialog() {\n      console.log('newPlan:', this.newPlan);\n      this.editPlan = this.newPlan;\n      this.open_dialog = true;\n    },\n    async viewPlanDetails(plan) {\n      // Save the plan to the Store\n      this.$store.dispatch('selectPlan', plan);\n\n      // Save phase selection (the first one) to the Store\n      var phasePayload = {\n        phase: this.selectedPlan.phases[0],\n        index: 0\n      };\n      this.$store.dispatch('selectPhaseData', phasePayload);\n\n      // Save strategy selection (the first one) to the Store\n      var strategyPayload = {\n        strategy: this.selectedPhase.strategies[0],\n        index: 0\n      };\n      this.$store.dispatch('selectStrategyData', strategyPayload);\n\n      // Get target countries for the selected strategy\n      await this.getTargetCountries().then(data => {\n        this.getTargetChannels();\n      });\n\n      // Get target channels for the selected target countries\n      // await this.getTargetChannels()\n\n      // Display the PlanDetailView\n      document.title = this.selectedPlan.name + ' | Digital Wave';\n      // this.$router.push(this.selectedPhase.get_absolute_url)\n      this.$router.push('/plan');\n    }\n  }\n};","map":{"version":3,"mappings":";AAoDA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;QACAR;QACAS;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAf;QACAS;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAE;QACAC;QACAjB;QACAS;QACAG;QACAM;MACA;IACA;EACA;EACAC;IACAC;MACAC;QACA;QACA;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;MACA;IACA;IACAK;MACAL;QACA;MACA;IACA;EACA;EACAM;IACA;IACAC;EACA;EACAC;IACA;MACA;MACA;QACAC;MACA,EACA;QACAC;MACA;MACA;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;QACAD;MACA,EACA;QACAC;MACA;MACA;IACA;IACA;MACA;MACA;MACA;QACAD;MACA,EACA;QACAC;MACA;MACA;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;IACA;MACAH;MACA;MACA;;MAEA;MACA;MACAA;MACA;QACAD;MACA,EACA;QACAC;MACA;MACA;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;IACA;MACA;MACA;QACAJ;MACA,EACA;QACAC;MACA;MACA;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;IACA;MACAH;MACA;MACA;QACAD;UACAK;YACAC;UACA;QACA;MACA,EACA;QACAL;MACA;MACA;MACA;MACA;IACA;IACA;MACA;MACAA;MACA;QACA;QACA;UACAD;YACAK;cACAE;YACA;UACA;QACA,EACA;UACAN;QACA;QACAO;MACA;MACA;IACA;IACAC;MACA,wBACAR;MACA;IACA;IACAS;MACA;MACA;IACA;IACAC;MACAV;MACA;MACA;IACA;IACA;MACA;MACA;;MAEA;MACA;QAAAW;QAAAC;MAAA;MACA;;MAEA;MACA;QAAAP;QAAAO;MAAA;MACA;;MAEA;MACA;QACA;MACA;;MAEA;MACA;;MAEA;MACAf;MACA;MACA;IACA;EACA;AACA","names":["name","components","PlanCard","PlanEditDialog","data","plans","editPlan","open_dialog","initialStrategy","description","start_date","end_date","budget","budget_allocated","auto_allocated","initialPhase","initialPlan","id","auto_allocate","computed","newPlan","get","selectedPlan","selectedPhase","selectedPhaseIndex","selectedStrategy","storedTargetCountries","mounted","document","methods","response","console","text","alerttype","contentclass","params","strategy","target_country","storedTargetChannels","autoAllocateBudget","openEditPlanDialog","openNewPlanDialog","phase","index"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n    <div>\n        <v-row\n            class=\"mt-2 primary--text font-weight-black text-h3\">\n            <v-col\n                class=\"text-center\"\n                md=\"6\"\n                offset=\"3\">\n                <span>Plans</span>\n            </v-col>\n            <v-spacer></v-spacer>\n            <v-col\n                class=\"text-right\"\n                cols=\"2\">\n                <v-btn\n                    class=\"mr-4 primary rounded-0 text-capitalize text-body-1\"\n                    dark\n                    @click=\"openNewPlanDialog\"\n                    depressed>\n                    <v-icon small class=\"mr-2\">mdi-plus</v-icon>\n                    New Plan\n                </v-btn>\n            </v-col>\n        </v-row>\n        <br />\n        <br />\n        <br />\n        <v-row class=\"mb-0 mx-4\">\n            <v-col\n                v-for=\"(plan, index) in plans\" :key=\"plan.id\"\n                lg=\"3\"\n                md=\"4\"\n                sm=12\n                class=\"px-3 py-0\">\n<PlanCard\n    :plan=\"plan\"\n    @open-dialog=\"openEditPlanDialog(plan)\"\n    @view-details=\"viewPlanDetails(plan)\" />\n\n</v-col>\n</v-row>\n\n<PlanEditDialog\n    v-model=\"open_dialog\"\n    :plan=\"editPlan\"\n    @create-plan=\"createPlan\"\n    @update-plan=\"updatePlan\"\n    @delete-plan=\"deletePlan\" />\n\n    </div>\n</template>\n<script>\nimport PlanCard from '@/components/plan/PlanCard'\nimport PlanEditDialog from '@/components/dialogs/PlanEditDialog'\nimport axios from 'axios'\n\nexport default {\n    name: 'HomeView',\n    components: {\n        PlanCard,\n        PlanEditDialog,\n    },\n    data() {\n        return {\n            plans: [],\n            editPlan: {},\n            open_dialog: false,\n            initialStrategy: {\n                name: 'Strategy name',\n                description: 'Strategy description',\n                start_date: new Date().toISOString().substring(0, 10),\n                end_date: new Date().toISOString().substring(0, 10),\n                budget: 0,\n                budget_allocated: 0,\n                auto_allocated: false,\n            },\n            initialPhase: {\n                name: 'Phase name',\n                description: 'Phase description',\n                start_date: new Date().toISOString().substring(0, 10),\n                end_date: new Date().toISOString().substring(0, 10),\n                budget: 0,\n                budget_allocated: 0,\n                auto_allocated: false,\n            },\n            initialPlan: {\n                id: -1,\n                name: '',\n                description: '',\n                budget: 0,\n                auto_allocate: false,\n            },\n        }\n    },\n    computed: {\n        newPlan: {\n            get() {\n                this.initialPhase.strategies = [this.initialStrategy]\n                this.initialPlan.phases = [this.initialPhase]\n                return this.initialPlan\n            }\n        },\n        selectedPlan: {\n            get() {\n                return this.$store.state.selectedPlan\n            }\n        },\n        selectedPhase: {\n            get() {\n                return this.$store.state.selectedPhaseData.phase\n            }\n        },\n        selectedPhaseIndex: {\n            get() {\n                return this.$store.state.selectedPhaseData.index\n            }\n        },\n        selectedStrategy: {\n            get() {\n                return this.$store.state.selectedStrategyData.strategy\n            }\n        },\n        storedTargetCountries: {\n            get() {\n                return this.$store.state.storedTargetCountries\n            }\n        },\n    },\n    mounted() {\n        this.getPlans()\n        document.title = 'Home | Digital Wave'\n    },\n    methods: {\n        async getPlans() {\n            var response = ''\n            try {\n                response = await axios.get('api/v1/plans/')\n            }\n            catch (error) {\n                console.log(error)\n            }\n            if (response.data.length > 0) {\n                this.plans = response.data\n                // console.log('plans: ', this.plans)\n                this.$store.dispatch('selectPlan', this.plans[0])\n            }\n        },\n        async getPlan(id) {\n            var response = ''\n            try {\n                response = await axios.get(`/api/v1/plan/${id}`)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.$store.dispatch('selectPlan', response.data)\n        },\n        async updatePlan(updatePlan) {\n            var response = ''\n            // var planPayload = { name: updatePlan.name, description: updatePlan.description }\n            try {\n                response = await axios.patch(`api/v1/plan/${updatePlan.id}/`, updatePlan)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.getPlans()\n            const payload = { text: `Successfully updated ${updatePlan.name}`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n        },\n        async createPlan(createPlan) {\n            console.log('createPlan', createPlan)\n            // Auto allocate budget \n            var createPlan = this.autoAllocateBudget(createPlan)\n\n            // Save plan to DB\n            var response = ''\n            console.log('createPlan: ', createPlan)\n            try {\n                response = await axios.post(`api/v1/plans/`, createPlan)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.getPlans()\n            const payload = { text: `Successfully created ${createPlan.name} - Initial Phase Added`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n        },\n        async deletePlan(deletePlan) {\n            var response = ''\n            try {\n                response = await axios.delete(`api/v1/plan/${deletePlan.id}/`)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            this.getPlans()\n            const payload = { text: `Successfully deleted ${deletePlan.name}`, alerttype: \"success\", contentclass: 'white--text' }\n            this.$store.dispatch('showSnackBar', payload)\n        },\n        async getTargetCountries() {\n            console.log('HomeView: getTargetCountries: selectedStrategy', this.selectedStrategy.id)\n            var response = ''\n            try {\n                response = await axios.get(`api/v1/targetcountries`, {\n                    params: {\n                        strategy: this.selectedStrategy.id,\n                    }\n                })\n            }\n            catch (error) {\n                console.log(error)\n            }\n            // Refresh Strategy's Stored  Target Country data\n            this.$store.dispatch('storeTargetCountries', response.data)\n            return response.data\n        },\n        async getTargetChannels() {\n            var storedTargetChannels = []\n            console.log('HomeView: getTargetChannels: storedTargetCountries', this.storedTargetCountries)\n            this.storedTargetCountries.forEach((country) => {\n                var response = ''\n                try {\n                    response = axios.get(`api/v1/targetchannels`, {\n                        params: {\n                            target_country: country,\n                        }\n                    })\n                }\n                catch (error) {\n                    console.log(error)\n                }\n                storedTargetChannels.push(response.data)\n            })\n            this.$store.dispatch('storeTargetChannels', storedTargetChannels)\n        },\n        autoAllocateBudget(plan) {\n            if (plan.auto_allocate)\n                console.log('auto allocate budget into phase and strategy')\n            return plan\n        },\n        openEditPlanDialog(editPlan) {\n            this.editPlan = editPlan\n            this.open_dialog = true\n        },\n        openNewPlanDialog() {\n            console.log('newPlan:', this.newPlan)\n            this.editPlan = this.newPlan\n            this.open_dialog = true\n        },\n        async viewPlanDetails(plan) {\n            // Save the plan to the Store\n            this.$store.dispatch('selectPlan', plan)\n\n            // Save phase selection (the first one) to the Store\n            var phasePayload = { phase: this.selectedPlan.phases[0], index: 0 }\n            this.$store.dispatch('selectPhaseData', phasePayload)\n\n            // Save strategy selection (the first one) to the Store\n            var strategyPayload = { strategy: this.selectedPhase.strategies[0], index: 0 }\n            this.$store.dispatch('selectStrategyData', strategyPayload)\n\n            // Get target countries for the selected strategy\n            await this.getTargetCountries().then(data => {\n                this.getTargetChannels()\n            })\n\n            // Get target channels for the selected target countries\n            // await this.getTargetChannels()\n\n            // Display the PlanDetailView\n            document.title = this.selectedPlan.name + ' | Digital Wave'\n            // this.$router.push(this.selectedPhase.get_absolute_url)\n            this.$router.push('/plan')\n        },\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}