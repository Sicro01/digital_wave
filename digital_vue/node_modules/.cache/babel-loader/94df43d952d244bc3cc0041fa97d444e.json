{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  props: {\n    value: Boolean,\n    strategy: Object\n  },\n  data() {\n    return {\n      checkBox: [],\n      tableHeaders: [],\n      tableItems: [],\n      tableItemLabels: [],\n      checkboxValues: [],\n      budgetValues: [],\n      selectedcheckbox: [],\n      headers: [{\n        text: 'Dessert (100g serving)',\n        align: 'start',\n        sortable: false,\n        value: 'name'\n      }, {\n        text: 'Calories',\n        value: 'calories'\n      }, {\n        text: 'Fat (g)',\n        value: 'fat'\n      }, {\n        text: 'Carbs (g)',\n        value: 'carbs'\n      }, {\n        text: 'Protein (g)',\n        value: 'protein'\n      }, {\n        text: 'Iron (%)',\n        value: 'iron'\n      }],\n      desserts: [{\n        calories: 159,\n        fat: 6.0,\n        carbs: 24,\n        name: 'Frozen Yogurt',\n        protein: 4.0,\n        iron: '1%'\n      }, {\n        name: 'Ice cream sandwich',\n        calories: 237,\n        fat: 9.0,\n        carbs: 37,\n        protein: 4.3,\n        iron: '1%'\n      }, {\n        name: 'Eclair',\n        calories: 262,\n        fat: 16.0,\n        carbs: 23,\n        protein: 6.0,\n        iron: '7%'\n      }, {\n        name: 'Cupcake',\n        calories: 305,\n        fat: 3.7,\n        carbs: 67,\n        protein: 4.3,\n        iron: '8%'\n      }, {\n        name: 'Gingerbread',\n        calories: 356,\n        fat: 16.0,\n        carbs: 49,\n        protein: 3.9,\n        iron: '16%'\n      }, {\n        name: 'Jelly bean',\n        calories: 375,\n        fat: 0.0,\n        carbs: 94,\n        protein: 0.0,\n        iron: '0%'\n      }, {\n        name: 'Lollipop',\n        calories: 392,\n        fat: 0.2,\n        carbs: 98,\n        protein: 0,\n        iron: '2%'\n      }, {\n        name: 'Honeycomb',\n        calories: 408,\n        fat: 3.2,\n        carbs: 87,\n        protein: 6.5,\n        iron: '45%'\n      }, {\n        name: 'Donut',\n        calories: 452,\n        fat: 25.0,\n        carbs: 51,\n        protein: 4.9,\n        iron: '22%'\n      }, {\n        name: 'KitKat',\n        calories: 518,\n        fat: 26.0,\n        carbs: 65,\n        protein: 7,\n        iron: '6%'\n      }]\n    };\n  },\n  computed: {\n    show: {\n      get() {\n        return this.value;\n      },\n      set(value) {\n        this.$emit('input', value);\n      }\n    },\n    storedCountries: {\n      get() {\n        return this.$store.state.storedCountries;\n      }\n    },\n    storedChannels: {\n      get() {\n        return this.$store.state.storedChannels;\n      }\n    },\n    width: {\n      get() {\n        switch (this.$vuetify.breakpoint.name) {\n          case 'xs':\n            return 220;\n          case 'sm':\n            return 600;\n          case 'md':\n            return 800;\n          case 'lg':\n            return 1200;\n          case 'xl':\n            return 1600;\n        }\n      }\n    }\n  },\n  mounted() {\n    this.getCountries();\n    this.getChannels();\n    this.createTableHeaders();\n    this.createTableItemLabels();\n    this.createDataItems();\n  },\n  methods: {\n    async getCountries() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/countries`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('storeCountries', response.data);\n    },\n    async getChannels() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/channels`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('storeChannels', response.data);\n    },\n    createTableHeaders() {\n      // Header 1: Create Channel Header\n      var header = {\n        text: 'Channel',\n        align: 'start',\n        sortable: false,\n        value: 'channelCode'\n      };\n      this.tableHeaders.push(header);\n\n      // Headers 2 to nnn (2 header per country: \n\n      var index = 0;\n      this.storedCountries.forEach(country => {\n        // Create a header for each country - where we'll place a checkbox \n        var countryHeader = {\n          text: country.code,\n          align: 'center',\n          sortable: false,\n          value: 'checked' + country.code + index\n        };\n        this.tableHeaders.push(countryHeader);\n\n        // Create a header for each country budget - where we'll place a budget field\n        var budgetHeader = {\n          text: 'Budget',\n          align: 'center',\n          sortable: false,\n          value: \"budget\" + country.code + index\n        };\n        // value: 'budgetAmount' + index\n        this.tableHeaders.push(budgetHeader);\n\n        // Increment the count used to make the value field name unique\n        // This must match the field name in the actual table row\n        index += 1;\n      });\n      console.log('tableHeaders: ', this.tableHeaders);\n    },\n    createTableItemLabels() {\n      // Create a label for each country and each country budget\n      // County Labels\n      // Used to unqiuely identify a country per channel - and the set the value of the checkbox when\n      // We create the data items\n      var index = 0;\n      this.storedCountries.forEach(country => {\n        var checkBoxBudgetLabel = {\n          checked: 'checked' + country.code + index,\n          budget: 'budget' + country.code + index\n        };\n        this.tableItemLabels.push(checkBoxBudgetLabel);\n        index += 1;\n      });\n      // console.log('tableItemLabels: ', this.tableItemLabels)\n      index = 0;\n      // this.tableItemLabels.forEach((label) => {\n      // console.log('label checked: ', label['checked'])\n      // console.log('label budget: ', label['budget'])\n      // })\n    },\n\n    createDataItems() {\n      // Table Data\n      // Cycle through each country for every channel - creating:\n      // Value 1 per channel and a value per\n      // Value 2 & 2+1 per country (checkbox - with the checkboxValue label e.g. checkedDE01, checkedGB01)\n      this.storedChannels.forEach(channel => {\n        // Value 1: Channel\n        var item = {\n          'channelCode': channel.code\n        };\n        // Values 2 to nnn: Country check box AND budget field for each channel / country combination\n        var index = 0;\n        this.storedCountries.forEach(country => {\n          // Set country / channel checkbox value\n          item = Object.assign({\n            [this.tableItemLabels[index].checked]: false\n          }, item);\n\n          // Set country / channel budget value\n          item = Object.assign({\n            [this.tableItemLabels[index].budget]: ''\n          }, item);\n          index += 1;\n        });\n        this.tableItems.push(item);\n      });\n      console.log('tableItems: ', this.tableItems);\n      // console.log('checkboxValues: ', this.checkboxValues)\n      // this.tableItems.forEach((item) => {\n      //     var index = 0\n      //     this.tableItemLabels.forEach((label) => {\n      //         console.log('item: ', item)\n      //         console.log('label: ', label['budget'])\n      //         console.log('item[label]: ', item[label['checked']])\n      //         console.log('item[label]: ', item[label['budget']])\n      //         index += 1\n      //         // console.log('label budget: ', label['budget'])s\n      //     })\n\n      // })\n    },\n\n    checkBoxClick(item, labels, index) {\n      // console.log('checkBox clicked labels:', labels)\n      // var checkObj = {\n      //     channel: item.channelCode,\n      //     country: this.storedCountries[index].code\n      // }\n      // this.checked.push(checkObj)\n      // console.log('Channel: ', item.channelCode)\n      // console.log('Country: ', this.storedCountries[index].code)\n    },\n    checkBoxChange(item, labels, index, event) {\n      // if (item[labels.checked] != event) {\n      //     console.log('new value: ', item[labels.checked], event)\n      // } else {\n      //     console.log('NOT new value: ', item[labels.checked], event)\n      // }\n      // item[labels.checked] = event\n      console.log(item.channelCode);\n      console.log(this.storedCountries[index].code);\n      // this.displayItems()\n      if (item[labels.checked]) {\n        var checkObj = {\n          type: 'checkBox',\n          channel: item.channelCode,\n          country: this.storedCountries[index].code\n        };\n        this.selectedcheckbox.push(checkObj);\n      } else {\n        let x = this.storedCountries[index].code;\n        this.selectedcheckbox = this.selectedcheckbox.filter(function (o) {\n          return !(o.channel === item.channelCode && o.country === x);\n        });\n        this.displayChanges();\n        console.log('this.selectedcheckbox AFTER REMOVE: ', this.selectedcheckbox);\n      }\n    },\n    budgetFieldChange(item, labels, index, event) {\n      // console.log('budgetFieldChange: ', event)\n      // item[labels.budget] = +event\n      this.displayChanges();\n    },\n    save() {\n      Object.keys(this.$refs.form.inputs).forEach(item => {\n        console.log('form item: ', item);\n      });\n    },\n    displayChanges() {\n      this.selectedcheckbox.forEach(item => {\n        console.log('item: ', item);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAgGA;AAEA;EACAA;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC,UACA;QACAC;QACAC;QACAC;QACAb;MACA,GACA;QAAAW;QAAAX;MAAA,GACA;QAAAW;QAAAX;MAAA,GACA;QAAAW;QAAAX;MAAA,GACA;QAAAW;QAAAX;MAAA,GACA;QAAAW;QAAAX;MAAA,EACA;MACAc,WACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA,GACA;QACAF;QACAH;QACAC;QACAC;QACAE;QACAC;MACA;IAEA;EACA;EACAC;IACAC;MACAC;QACA;MACA;MACAC;QACA;MACA;IACA;IACAC;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;UACA;YAAA;UACA;YAAA;UACA;YAAA;UACA;YAAA;UACA;YAAA;QAAA;MAEA;IACA;EACA;EACAK;IACA;IACA;IACA;IACA;IACA;EACA;EACAC;IACA;MACA;MACA;QACAC;MACA,EACA;QACAC;MACA;MACA;IACA;IACA;MACA;MACA;QACAD;MACA,EACA;QACAC;MACA;MACA;IACA;IACAC;MACA;MACA;QACArB;QACAC;QACAC;QACAb;MAEA;MACA;;MAEA;;MAEA;MACA;QACA;QACA;UACAW;UACAC;UACAC;UACAb;QAEA;QACA;;QAEA;QACA;UACAW;UACAC;UACAC;UACAb;QAEA;QACA;QACA;;QAEA;QACA;QACAia;MACA;MACA;MACA;IACA;IACAC;MACAC;QACAf;MACA;IACA;IACAgB;MACA;QACAhB;MACA;IACA;EACA;AAEA","names":["props","value","strategy","data","checkBox","tableHeaders","tableItems","tableItemLabels","checkboxValues","budgetValues","selectedcheckbox","headers","text","align","sortable","desserts","calories","fat","carbs","name","protein","iron","computed","show","get","set","storedCountries","storedChannels","width","mounted","methods","response","console","createTableHeaders","index","createTableItemLabels","checked","budget","createDataItems","item","checkBoxClick","checkBoxChange","type","channel","country","budgetFieldChange","save","Object","displayChanges"],"sourceRoot":"src/components/dialogs","sources":["CountryChannelEditDialog.vue"],"sourcesContent":["<template>\r\n    <v-form\r\n        ref=\"form\">\r\n        <v-dialog\r\n            v-model=\"show\"\r\n            persistent\r\n            :width=\"width\">\r\n            <v-card>\r\n                <v-card-title>\r\n                    Select Country / Channel combinations\r\n                </v-card-title>\r\n                <v-card-text>\r\n                    <v-sheet\r\n                        class=\"mb-3 black elevation-2\"\r\n                        outlined>\r\n                        <!-- <v-data-table\r\n                            :headers=\"headers\"\r\n                            :items=\"desserts\">\r\n                        </v-data-table> -->\r\n\r\n                        <v-data-table\r\n                            :headers=\"tableHeaders\"\r\n                            :items=\"tableItems\"\r\n\r\n                            hide-default-footer\r\n                            class=\"pb-3\">\r\n\r\n                            <!-- <template v-slot:header=\"{ props: { headers } }\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th v-for=\"(h, i) in headers\" :class=\"{ 'text-center': h.text === 'Budget' }\">\r\n                                            <span>{{ h.text }}</span>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                            </template> -->\r\n\r\n                            <template v-slot:body=\"{ items }\">\r\n                                <tbody>\r\n                                    <tr v-for=\"(item, itemIndex) in items\" :key=\"itemIndex\">\r\n                                        <td>\r\n                                            {{ item.channelCode }}\r\n                                        </td>\r\n\r\n                                        <template v-for=\"(labels, labelIndex) in tableItemLabels\">\r\n                                            <td>\r\n                                                <v-checkbox\r\n                                                    v-model=\"item[labels.checked]\"\r\n                                                    color=\"secondary\"\r\n                                                    dense\r\n                                                    hide-details\r\n                                                    @change=\"checkBoxChange(item, labels, labelIndex, $event)\"\r\n                                                    @click=\"checkBoxClick(item, labels, labelIndex)\"></v-checkbox>\r\n                                            </td>\r\n                                            <td>\r\n                                                <v-text-field\r\n                                                    :disabled=\"!item[labels.checked]\"\r\n                                                    v-model=\"item[labels.budget]\"\r\n                                                    @input=\"budgetFieldChange(item, labels, labelIndex, $event)\"\r\n                                                    label=\"Budget\"\r\n                                                    type=\"number\"\r\n                                                    dense\r\n                                                    hide-details\r\n                                                    class=\"shrink rounded-0\"\r\n                                                    outlined>\r\n                                                </v-text-field>\r\n                                            </td>\r\n                                        </template>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </template>\r\n                        </v-data-table>\r\n                    </v-sheet>\r\n                </v-card-text>\r\n                <v-card-actions>\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn\r\n                        class=\"grey lighten-1 mr-3 rounded-0 text-capitalize\"\r\n                        light\r\n                        depressed\r\n                        @click=\"show = false\">\r\n                        Cancel\r\n                    </v-btn>\r\n                    <v-btn\r\n                        class=\"mr-3 success rounded-0 text-capitalize\"\r\n                        depressed\r\n                        @click=\"save\">\r\n                        Save\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n    </v-form>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    props: {\r\n        value: Boolean,\r\n        strategy: Object,\r\n    },\r\n    data() {\r\n        return {\r\n            checkBox: [],\r\n            tableHeaders: [],\r\n            tableItems: [],\r\n            tableItemLabels: [],\r\n            checkboxValues: [],\r\n            budgetValues: [],\r\n            selectedcheckbox: [],\r\n            headers: [\r\n                {\r\n                    text: 'Dessert (100g serving)',\r\n                    align: 'start',\r\n                    sortable: false,\r\n                    value: 'name',\r\n                },\r\n                { text: 'Calories', value: 'calories' },\r\n                { text: 'Fat (g)', value: 'fat' },\r\n                { text: 'Carbs (g)', value: 'carbs' },\r\n                { text: 'Protein (g)', value: 'protein' },\r\n                { text: 'Iron (%)', value: 'iron' },\r\n            ],\r\n            desserts: [\r\n                {\r\n                    calories: 159,\r\n                    fat: 6.0,\r\n                    carbs: 24,\r\n                    name: 'Frozen Yogurt',\r\n                    protein: 4.0,\r\n                    iron: '1%',\r\n                },\r\n                {\r\n                    name: 'Ice cream sandwich',\r\n                    calories: 237,\r\n                    fat: 9.0,\r\n                    carbs: 37,\r\n                    protein: 4.3,\r\n                    iron: '1%',\r\n                },\r\n                {\r\n                    name: 'Eclair',\r\n                    calories: 262,\r\n                    fat: 16.0,\r\n                    carbs: 23,\r\n                    protein: 6.0,\r\n                    iron: '7%',\r\n                },\r\n                {\r\n                    name: 'Cupcake',\r\n                    calories: 305,\r\n                    fat: 3.7,\r\n                    carbs: 67,\r\n                    protein: 4.3,\r\n                    iron: '8%',\r\n                },\r\n                {\r\n                    name: 'Gingerbread',\r\n                    calories: 356,\r\n                    fat: 16.0,\r\n                    carbs: 49,\r\n                    protein: 3.9,\r\n                    iron: '16%',\r\n                },\r\n                {\r\n                    name: 'Jelly bean',\r\n                    calories: 375,\r\n                    fat: 0.0,\r\n                    carbs: 94,\r\n                    protein: 0.0,\r\n                    iron: '0%',\r\n                },\r\n                {\r\n                    name: 'Lollipop',\r\n                    calories: 392,\r\n                    fat: 0.2,\r\n                    carbs: 98,\r\n                    protein: 0,\r\n                    iron: '2%',\r\n                },\r\n                {\r\n                    name: 'Honeycomb',\r\n                    calories: 408,\r\n                    fat: 3.2,\r\n                    carbs: 87,\r\n                    protein: 6.5,\r\n                    iron: '45%',\r\n                },\r\n                {\r\n                    name: 'Donut',\r\n                    calories: 452,\r\n                    fat: 25.0,\r\n                    carbs: 51,\r\n                    protein: 4.9,\r\n                    iron: '22%',\r\n                },\r\n                {\r\n                    name: 'KitKat',\r\n                    calories: 518,\r\n                    fat: 26.0,\r\n                    carbs: 65,\r\n                    protein: 7,\r\n                    iron: '6%',\r\n                },\r\n            ],\r\n        }\r\n    },\r\n    computed: {\r\n        show: {\r\n            get() {\r\n                return this.value\r\n            },\r\n            set(value) {\r\n                this.$emit('input', value)\r\n            },\r\n        },\r\n        storedCountries: {\r\n            get() {\r\n                return this.$store.state.storedCountries\r\n            }\r\n        },\r\n        storedChannels: {\r\n            get() {\r\n                return this.$store.state.storedChannels\r\n            }\r\n        },\r\n        width: {\r\n            get() {\r\n                switch (this.$vuetify.breakpoint.name) {\r\n                    case 'xs': return 220\r\n                    case 'sm': return 600\r\n                    case 'md': return 800\r\n                    case 'lg': return 1200\r\n                    case 'xl': return 1600\r\n                }\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        this.getCountries()\r\n        this.getChannels()\r\n        this.createTableHeaders()\r\n        this.createTableItemLabels()\r\n        this.createDataItems()\r\n    },\r\n    methods: {\r\n        async getCountries() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/countries`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('storeCountries', response.data)\r\n        },\r\n        async getChannels() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/channels`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('storeChannels', response.data)\r\n        },\r\n        createTableHeaders() {\r\n            // Header 1: Create Channel Header\r\n            var header = {\r\n                text: 'Channel',\r\n                align: 'start',\r\n                sortable: false,\r\n                value: 'channelCode',\r\n\r\n            }\r\n            this.tableHeaders.push(header)\r\n\r\n            // Headers 2 to nnn (2 header per country: \r\n\r\n            var index = 0\r\n            this.storedCountries.forEach((country) => {\r\n                // Create a header for each country - where we'll place a checkbox \r\n                var countryHeader = {\r\n                    text: country.code,\r\n                    align: 'center',\r\n                    sortable: false,\r\n                    value: 'checked' + country.code + index,\r\n\r\n                }\r\n                this.tableHeaders.push(countryHeader)\r\n\r\n                // Create a header for each country budget - where we'll place a budget field\r\n                var budgetHeader = {\r\n                    text: 'Budget',\r\n                    align: 'center',\r\n                    sortable: false,\r\n                    value: \"budget\" + country.code + index,\r\n\r\n                }\r\n                // value: 'budgetAmount' + index\r\n                this.tableHeaders.push(budgetHeader)\r\n\r\n                // Increment the count used to make the value field name unique\r\n                // This must match the field name in the actual table row\r\n                index += 1\r\n            })\r\n            console.log('tableHeaders: ', this.tableHeaders)\r\n        },\r\n        createTableItemLabels() {\r\n            // Create a label for each country and each country budget\r\n            // County Labels\r\n            // Used to unqiuely identify a country per channel - and the set the value of the checkbox when\r\n            // We create the data items\r\n            var index = 0\r\n            this.storedCountries.forEach((country) => {\r\n                var checkBoxBudgetLabel = {\r\n                    checked: 'checked' + country.code + index,\r\n                    budget: 'budget' + country.code + index\r\n                }\r\n                this.tableItemLabels.push(checkBoxBudgetLabel)\r\n                index += 1\r\n            })\r\n            // console.log('tableItemLabels: ', this.tableItemLabels)\r\n            index = 0\r\n            // this.tableItemLabels.forEach((label) => {\r\n            // console.log('label checked: ', label['checked'])\r\n            // console.log('label budget: ', label['budget'])\r\n            // })\r\n        },\r\n        createDataItems() {\r\n            // Table Data\r\n            // Cycle through each country for every channel - creating:\r\n            // Value 1 per channel and a value per\r\n            // Value 2 & 2+1 per country (checkbox - with the checkboxValue label e.g. checkedDE01, checkedGB01)\r\n            this.storedChannels.forEach((channel) => {\r\n                // Value 1: Channel\r\n                var item = {\r\n                    'channelCode': channel.code,\r\n                }\r\n                // Values 2 to nnn: Country check box AND budget field for each channel / country combination\r\n                var index = 0\r\n                this.storedCountries.forEach((country) => {\r\n\r\n                    // Set country / channel checkbox value\r\n                    item = Object.assign({\r\n                        [this.tableItemLabels[index].checked]: false,\r\n                    }, item)\r\n\r\n                    // Set country / channel budget value\r\n                    item = Object.assign({\r\n                        [this.tableItemLabels[index].budget]: '',\r\n                    }, item)\r\n\r\n                    index += 1\r\n                })\r\n                this.tableItems.push(item)\r\n            })\r\n            console.log('tableItems: ', this.tableItems)\r\n            // console.log('checkboxValues: ', this.checkboxValues)\r\n            // this.tableItems.forEach((item) => {\r\n            //     var index = 0\r\n            //     this.tableItemLabels.forEach((label) => {\r\n            //         console.log('item: ', item)\r\n            //         console.log('label: ', label['budget'])\r\n            //         console.log('item[label]: ', item[label['checked']])\r\n            //         console.log('item[label]: ', item[label['budget']])\r\n            //         index += 1\r\n            //         // console.log('label budget: ', label['budget'])s\r\n            //     })\r\n\r\n            // })\r\n        },\r\n        checkBoxClick(item, labels, index) {\r\n            // console.log('checkBox clicked labels:', labels)\r\n            // var checkObj = {\r\n            //     channel: item.channelCode,\r\n            //     country: this.storedCountries[index].code\r\n            // }\r\n            // this.checked.push(checkObj)\r\n            // console.log('Channel: ', item.channelCode)\r\n            // console.log('Country: ', this.storedCountries[index].code)\r\n        },\r\n        checkBoxChange(item, labels, index, event) {\r\n            // if (item[labels.checked] != event) {\r\n            //     console.log('new value: ', item[labels.checked], event)\r\n            // } else {\r\n            //     console.log('NOT new value: ', item[labels.checked], event)\r\n            // }\r\n            // item[labels.checked] = event\r\n            console.log(item.channelCode)\r\n            console.log(this.storedCountries[index].code)\r\n            // this.displayItems()\r\n            if (item[labels.checked]) {\r\n                var checkObj = {\r\n                    type: 'checkBox',\r\n                    channel: item.channelCode,\r\n                    country: this.storedCountries[index].code\r\n                }\r\n                this.selectedcheckbox.push(checkObj)\r\n            } else {\r\n                let x = this.storedCountries[index].code\r\n                this.selectedcheckbox = this.selectedcheckbox.filter(function (o) {\r\n                    return !(o.channel === item.channelCode && o.country === x)\r\n                })\r\n                this.displayChanges()\r\n                console.log('this.selectedcheckbox AFTER REMOVE: ', this.selectedcheckbox)\r\n            }\r\n        },\r\n        budgetFieldChange(item, labels, index, event) {\r\n            // console.log('budgetFieldChange: ', event)\r\n            // item[labels.budget] = +event\r\n            this.displayChanges()\r\n        },\r\n        save() {\r\n            Object.keys(this.$refs.form.inputs).forEach((item) => {\r\n                console.log('form item: ', item)\r\n            })\r\n        },\r\n        displayChanges() {\r\n            this.selectedcheckbox.forEach((item) => {\r\n                console.log('item: ', item)\r\n            })\r\n        },\r\n    }\r\n\r\n}\r\n</script>\r\n<style scoped>\r\n/* @media screen and (max-width: 1200px) {\r\n\r\n    .theme--light.v-data-table thead tr:last-child th,\r\n    .theme--light.v-data-table tbody tr:not(:last-child) td:last-child,\r\n    .theme--light.v-data-table tbody tr td,\r\n    .theme--light.v-data-table tbody tr:not(:last-child) td:not(.v-data-table__mobile-row) {\r\n        border-bottom: medium solid rgba(212, 7, 7, 0.957);\r\n    }\r\n} */\r\n\r\n/* @media screen and (max-width: 1200px) {\r\n\r\n    .v-data-table.theme--light tbody>thead>tr {\r\n        border-bottom: medium solid rgba(212, 7, 7, 0.957) !important;\r\n    }\r\n} */\r\n\r\n/* bob {\r\n    .theme--light.v-data-table border-spacing: 0.5rem !important;\r\n} */\r\n\r\n.theme--light.v-data-table>.v-data-table__wrapper>table>thead>tr:last-child>th {\r\n    /* border-bottom: medium solid rgba(212, 7, 7, 0.957) !important; */\r\n    background-color: var(--v-secondary-darken1);\r\n    font-weight: bold;\r\n    font-size: medium;\r\n    color: white;\r\n}\r\n\r\ntbody tr:nth-of-type(odd) {\r\n    background-color: rgba(0, 0, 0, .05);\r\n}\r\n\r\n\r\n.theme--light.v-data-table>.v-data-table__wrapper>table>tbody>tr:not(:last-child)>th:not(.v-data-table__mobile-row) {\r\n    border-right: thin solid rgba(0, 0, 0, 0.12);\r\n    border: thin solid rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n/* var(--v-primary-base) */\r\n/* .theme--light.v-data-table {\r\n    border-bottom: medium solid rgba(212, 7, 7, 0.957) !important;\r\n} */\r\n\r\n.mytable>tr {\r\n    border-bottom: medium solid rgba(212, 7, 7, 0.957) !important;\r\n}\r\n\r\n::v-deep .v-data-table-header {\r\n    background-color: var(--v-secondary-darken1);\r\n}\r\n</style>\r\n\r\n<!-- <template v-for=\"(country, countryIndex) in storedCountries\">\r\n                                            <td>\r\n                                                <v-checkbox\r\n                                                    :value=\"item[tableItemLabels[countryIndex].checked]\"\r\n                                                    @change=\"checkChange(item, checked, labelIndex, $event)\"\r\n                                                    @click=\"checkClick(item, checked, labelIndex)\"></v-checkbox>\r\n                                            </td>\r\n                                            <td>\r\n                                                <v-text-field\r\n                                                    :value=\"item[tableItemLabels[countryIndex].budget]\"\r\n                                                    @input=\"$emit('input', $event)\"\r\n                                                    label=\"Budget\"\r\n                                                    dense\r\n                                                    hide-details\r\n                                                    class=\"shrink rounded-0\"\r\n                                                    outlined>\r\n                                                </v-text-field>\r\n                                            </td>\r\n                                        </template> -->"]},"metadata":{},"sourceType":"module"}