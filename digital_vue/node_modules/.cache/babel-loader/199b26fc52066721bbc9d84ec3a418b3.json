{"ast":null,"code":"import PhaseMenu from '@/components/phase/PhaseMenu';\nimport PhaseCard from '@/components/phase/PhaseCard';\nimport PhaseNewDialog from '@/components/dialogs/PhaseNewDialog';\nimport StrategyMenu from '@/components/strategy/StrategyMenu';\nimport StrategyCard from '@/components/strategy/StrategyCard';\nimport StrategyNewDialog from '@/components/dialogs/StrategyNewDialog';\nimport axios from 'axios';\nexport default {\n  name: 'PlanDetailView',\n  components: {\n    PhaseMenu,\n    PhaseCard,\n    PhaseNewDialog,\n    StrategyMenu,\n    StrategyCard,\n    StrategyNewDialog\n  },\n  data() {\n    return {\n      showPhase: false,\n      showNewPhaseDialog: false,\n      showStrategy: false,\n      showNewStrategyDialog: false,\n      newPhase: {\n        name: '',\n        description: '',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        budget: 0,\n        budget_allocated: 0,\n        auto_allocate: false\n      },\n      initialStrategy: {\n        name: 'Strategy name',\n        description: 'Strategy description',\n        start_date: new Date().toISOString().substring(0, 10),\n        end_date: new Date().toISOString().substring(0, 10),\n        budget: 0,\n        budget_allocated: 0,\n        auto_allocate: false\n      }\n    };\n  },\n  computed: {\n    newPhaseStrategyData: {\n      get() {\n        this.newPhase.strategies = [this.initialStrategy];\n        return this.newPhase;\n      }\n    },\n    selectedPlan: {\n      get() {\n        return this.$store.state.selectedPlan;\n      }\n    },\n    selectedPhase: {\n      get() {\n        return this.$store.state.selectedPhaseData.phase;\n      }\n    },\n    selectedPhaseIndex: {\n      get() {\n        return this.$store.state.selectedPhaseData.index;\n      }\n    },\n    selectedStrategy: {\n      get() {\n        return this.$store.state.selectedStrategyData.strategy;\n      }\n    },\n    planNumberStrategies: {\n      get() {\n        let count = 0;\n        this.selectedPlan.phases.forEach(phase => {\n          phase.strategies.forEach(strategy => {\n            count++;\n          });\n        });\n        console.log(count);\n        return count;\n      }\n    }\n  },\n  methods: {\n    openPhaseCard(phase, index) {\n      // Show Phase Card\n      this.showPhase = true;\n\n      // Update selected Phase\n      const phaseDataPayload = {\n        phase: phase,\n        index: index\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Update selected Strategy\n      const strategyDataPayload = {\n        strategy: this.selectedPhase.strategies[0],\n        index: 0\n      };\n      this.$store.dispatch('selectStrategyData', strategyDataPayload);\n    },\n    openStrategyCard(strategy, index) {\n      // Show Phase Card\n      this.showStrategy = true;\n\n      // Update selected Strategy\n      const strategyDataPayload = {\n        strategy: strategy,\n        index: index\n      };\n      this.$store.dispatch('selectStrategyData', strategyDataPayload);\n    },\n    async getPlan() {\n      var response = '';\n      try {\n        response = await axios.get(`/api/v1/plan/${this.selectedPlan.id}`);\n      } catch (error) {\n        console.log(error);\n      }\n      this.$store.dispatch('selectPlan', response.data);\n    },\n    async updatePhase() {\n      this.selectedPhase.plan = this.selectedPlan.id;\n      console.log('selectedPhase:', this.selectedPhase);\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/phase/${this.selectedPhase.id}/`, this.selectedPhase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBPhaseProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success');\n    },\n    async createPhase(createPhase) {\n      // Add current plan to new phase\n      createPhase.plan = this.selectedPlan.id;\n      console.log('newPhase:', createPhase);\n      var response = '';\n      try {\n        response = await axios.post(`api/v1/phases/`, createPhase);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n      this.endDBPhaseProcessing(0, `Successfully created Phase \"${response.data.name}\"`);\n    },\n    async deletePhase(deletePhase) {\n      // A pLan must have at least one Phase\n      if (this.selectedPlan.phases.length === 1) {\n        // Display Snackbar message\n        this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text');\n      } else {\n        var response = '';\n        try {\n          response = await axios.delete(`api/v1/phase/${deletePhase.id}/`);\n        } catch (error) {\n          console.log(error);\n        }\n        // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\n        this.endDBPhaseProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`);\n      }\n    },\n    async endDBPhaseProcessing(phaseIndex, message, alertType = 'success') {\n      // Refresh updated Plan and save phase to store\n      await this.getPlan();\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[phaseIndex],\n        index: phaseIndex\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Display Snackbar message\n      this.showSnackBar(message, alertType);\n    },\n    async updateStrategy() {\n      console.log('updatePayload.strategy: ', this.selectedStrategy);\n      var response = '';\n      try {\n        response = await axios.put(`api/v1/strategy/${this.selectedStrategy.id}/`, this.selectedStrategy);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n      this.endDBStrategyProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success');\n    },\n    async createStrategy(createStrategy) {\n      // Add current plan to new strategy\n      createStrategy.phase = this.selectedPhase.id;\n      var response = '';\n      try {\n        response = await axios.post(`api/v1/strategies/`, createStrategy);\n      } catch (error) {\n        console.log(error);\n      }\n      // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n      this.endDBStrategyProcessing(0, `Successfully created Strategy \"${response.data.name}\"`);\n    },\n    async deleteStrategy(deleteStrategy) {\n      // A pLan must have at least one Strategy\n      if (this.selectedPhase.strategies.length === 1) {\n        // Display Snackbar message\n        this.showSnackBar(`Unable to delete Strategy \"${this.selectedStrategy.name}\" - a Phase must have at least 1 Strategy`, 'warning', 'black--text');\n      } else {\n        var response = '';\n        try {\n          response = await axios.delete(`api/v1/strategy/${deleteStrategy.id}/`);\n        } catch (error) {\n          console.log(error);\n        }\n        // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\n        this.endDBStrategyProcessing(0, `Succesfully deleted Strategy \"${this.selectedStrategy.name}\"`);\n      }\n    },\n    async endDBStrategyProcessing(strategyIndex, message, alertType = 'success') {\n      // Refresh updated Plan and save strategy to store\n      await this.getPlan();\n\n      // Refresh Stored Phase data\n      const phaseDataPayload = {\n        phase: this.selectedPlan.phases[this.selectedPhaseIndex],\n        index: this.selectedPhaseIndex\n      };\n      this.$store.dispatch('selectPhaseData', phaseDataPayload);\n\n      // Refresh Stored Strategy data\n      const strategyDataPayload = {\n        strategy: this.selectedPhase.strategies[strategyIndex],\n        index: strategyIndex\n      };\n      this.$store.dispatch('selectStrategyData', strategyDataPayload);\n      console.log(this.selectedStrategy);\n\n      // Display Snackbar message\n      this.showSnackBar(message, alertType);\n    },\n    showSnackBar(message, alertType, text_color = 'white--text') {\n      const payload = {\n        text: `${message}`,\n        alerttype: alertType,\n        contentclass: text_color\n      };\n      this.$store.dispatch('showSnackBar', payload);\n    }\n  }\n};","map":{"version":3,"mappings":"AA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAb;QACAc;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACApB;QACAc;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAE;IACAC;MACAC;QACA;QACA;MACA;IACA;IACAC;MACAD;QACA;MACA;IACA;IACAE;MACAF;QACA;MACA;IACA;IACAG;MACAH;QACA;MACA;IACA;IACAI;MACAJ;QACA;MACA;IACA;IACAK;MACAL;QACA;QACA;UACAM;YACAC;UACA;QACA;QACAC;QACA;MACA;IACA;EACA;EACAC;IACAC;MACA;MACA;;MAEA;MACA;QAAAJ;QAAAK;MAAA;MACA;;MAEA;MACA;QAAAC;QAAAD;MAAA;MACA;IACA;IACAE;MACA;MACA;;MAEA;MACA;QAAAD;QAAAD;MAAA;MACA;IACA;IACA;MACA;MACA;QACAG;MACA,EACA;QACAN;MACA;MACA;IACA;IACA;MACA;MACAA;MAEA;MACA;QACAM;MACA,EACA;QACAN;MACA;MACA;MACA;IACA;IACA;MACA;MACAO;MACAP;MACA;MACA;QACAM;MACA,EACA;QACAN;MACA;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;UACAM;QACA,EACA;UACAN;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;MACA;QAAAF;QAAAK;MAAA;MACA;;MAEA;MACA;IACA;IACA;MACAH;MACA;MACA;QACAM;MACA,EACA;QACAN;MACA;MACA;MACA;IACA;IACA;MACA;MACAQ;MACA;MACA;QACAF;MACA,EACA;QACAN;MACA;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;UACAM;QACA,EACA;UACAN;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;;MAEA;MACA;QAAAF;QAAAK;MAAA;MACA;;MAEA;MACA;QAAAC;QAAAD;MAAA;MACA;MACAH;;MAEA;MACA;IACA;IACAS;MACA;QAAAC;QAAAC;QAAAC;MAAA;MACA;IACA;EACA;AACA","names":["name","components","PhaseMenu","PhaseCard","PhaseNewDialog","StrategyMenu","StrategyCard","StrategyNewDialog","data","showPhase","showNewPhaseDialog","showStrategy","showNewStrategyDialog","newPhase","description","start_date","end_date","budget","budget_allocated","auto_allocate","initialStrategy","computed","newPhaseStrategyData","get","selectedPlan","selectedPhase","selectedPhaseIndex","selectedStrategy","planNumberStrategies","phase","count","console","methods","openPhaseCard","index","strategy","openStrategyCard","response","createPhase","createStrategy","showSnackBar","text","alerttype","contentclass"],"sourceRoot":"src/views","sources":["PlanDetailView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <v-row\r\n            class=\"ma-0 white d-flex align-center\">\r\n            <v-col\r\n                class=\"ma-0 pa-0 black--text\"\r\n                cols=\"auto\">\r\n                <v-tooltip\r\n                    bottom>\r\n                    <template v-slot:activator=\"{ on, attrs }\">\r\n                        <v-btn\r\n                            class=\"ml-2\"\r\n                            icon\r\n                            v-bind=\"attrs\"\r\n                            v-on=\"on\">\r\n                            <v-icon\r\n                                @click=\"$router.push('/')\"\r\n                                color=\"primary\"\r\n                                size=\"50\">mdi-clipboard-list-outline</v-icon>\r\n                        </v-btn>\r\n                    </template>\r\n                    <span>Plans home</span>\r\n                </v-tooltip>\r\n            </v-col>\r\n\r\n            <v-col cols=\"11\" class=\"pa-0 black--text\">\r\n\r\n                <v-row class=\"ml-2 my-1 d-flex align-center\">\r\n                    {{ selectedPlan.name }}\r\n                    <v-spacer></v-spacer>\r\n                    <v-chip small outlined class=\"primary black mr-2\">\r\n                        <v-icon small class=\"black--text\">mdi-alpha-p-circle-outline</v-icon>\r\n                        {{ selectedPlan.phases.length }}\r\n                    </v-chip>\r\n                    <v-chip small outlined class=\" primary ml-1 black mr-2\">\r\n                        <v-icon small class=\"black--text\">mdi-alpha-s-circle-outline</v-icon>\r\n                        {{ planNumberStrategies }}\r\n                    </v-chip>\r\n                    <div class=\"text-caption\">\r\n                        <span>Last edit:{{ new Date(selectedPlan.date_modified).toLocaleDateString((\"en-GB\")) }}</span>\r\n                        <span> {{ new Date(selectedPlan.date_modified).toLocaleTimeString((\"en-GB\")) }}</span>\r\n                    </div>\r\n                </v-row>\r\n\r\n                <v-row class=\"ml-2 my-1\">{{ selectedPhase.name }} : {{ selectedStrategy.name }}</v-row>\r\n\r\n                <v-row class=\"ma-0\">\r\n                    <v-col cols=\"auto\" class=\"pa-0\">\r\n                        <v-toolbar dense flat>\r\n                            <PhaseMenu\r\n                                @open-phase-card='openPhaseCard'\r\n                                @open-createphase-dialog=\"showNewPhaseDialog = true\" />\r\n                        </v-toolbar>\r\n                    </v-col>\r\n                    <v-col cols=\"auto\" class=\"pa-0\">\r\n                        <v-toolbar dense flat>\r\n                            <StrategyMenu\r\n                                @open-strategy-card='openStrategyCard'\r\n                                @open-createstrategy-dialog=\"showNewStrategyDialog = true\" />\r\n                        </v-toolbar>\r\n                    </v-col>\r\n                </v-row>\r\n\r\n            </v-col>\r\n        </v-row>\r\n\r\n        <v-divider></v-divider>\r\n\r\n        <PhaseCard\r\n            v-if=\"showPhase\"\r\n            @hide-phase-card=\"showPhase = false\"\r\n            @create-phase=\"createPhase\"\r\n            @update-phase=\"updatePhase\"\r\n            @delete-phase=\"deletePhase\" />\r\n        <PhaseNewDialog\r\n            v-model=\"showNewPhaseDialog\"\r\n            :phase=\"newPhaseStrategyData\"\r\n            @create-phase=\"createPhase\" />\r\n\r\n        <StrategyCard\r\n            v-if=\"showStrategy\"\r\n            @hide-strategy-card=\"showStrategy = false\"\r\n            @create-strategy=\"createStrategy\"\r\n            @update-strategy=\"updateStrategy\"\r\n            @delete-strategy=\"deleteStrategy\" />\r\n        <StrategyNewDialog\r\n            v-model=\"showNewStrategyDialog\"\r\n            :strategy=\"initialStrategy\"\r\n            @create-strategy=\"createStrategy\" />\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport PhaseMenu from '@/components/phase/PhaseMenu'\r\nimport PhaseCard from '@/components/phase/PhaseCard'\r\nimport PhaseNewDialog from '@/components/dialogs/PhaseNewDialog'\r\nimport StrategyMenu from '@/components/strategy/StrategyMenu'\r\nimport StrategyCard from '@/components/strategy/StrategyCard'\r\nimport StrategyNewDialog from '@/components/dialogs/StrategyNewDialog'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'PlanDetailView',\r\n    components: {\r\n        PhaseMenu,\r\n        PhaseCard,\r\n        PhaseNewDialog,\r\n        StrategyMenu,\r\n        StrategyCard,\r\n        StrategyNewDialog,\r\n    },\r\n    data() {\r\n        return {\r\n            showPhase: false,\r\n            showNewPhaseDialog: false,\r\n            showStrategy: false,\r\n            showNewStrategyDialog: false,\r\n            newPhase: {\r\n                name: '',\r\n                description: '',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n                budget: 0,\r\n                budget_allocated: 0,\r\n                auto_allocate: false,\r\n            },\r\n            initialStrategy: {\r\n                name: 'Strategy name',\r\n                description: 'Strategy description',\r\n                start_date: new Date().toISOString().substring(0, 10),\r\n                end_date: new Date().toISOString().substring(0, 10),\r\n                budget: 0,\r\n                budget_allocated: 0,\r\n                auto_allocate: false,\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        newPhaseStrategyData: {\r\n            get() {\r\n                this.newPhase.strategies = [this.initialStrategy]\r\n                return this.newPhase\r\n            }\r\n        },\r\n        selectedPlan: {\r\n            get() {\r\n                return this.$store.state.selectedPlan\r\n            }\r\n        },\r\n        selectedPhase: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.phase\r\n            }\r\n        },\r\n        selectedPhaseIndex: {\r\n            get() {\r\n                return this.$store.state.selectedPhaseData.index\r\n            }\r\n        },\r\n        selectedStrategy: {\r\n            get() {\r\n                return this.$store.state.selectedStrategyData.strategy\r\n            }\r\n        },\r\n        planNumberStrategies: {\r\n            get() {\r\n                let count = 0;\r\n                this.selectedPlan.phases.forEach((phase) => {\r\n                    phase.strategies.forEach((strategy) => {\r\n                        count++\r\n                    });\r\n                })\r\n                console.log(count)\r\n                return count;\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        openPhaseCard(phase, index) {\r\n            // Show Phase Card\r\n            this.showPhase = true\r\n\r\n            // Update selected Phase\r\n            const phaseDataPayload = { phase: phase, index: index }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Update selected Strategy\r\n            const strategyDataPayload = { strategy: this.selectedPhase.strategies[0], index: 0 }\r\n            this.$store.dispatch('selectStrategyData', strategyDataPayload)\r\n        },\r\n        openStrategyCard(strategy, index) {\r\n            // Show Phase Card\r\n            this.showStrategy = true\r\n\r\n            // Update selected Strategy\r\n            const strategyDataPayload = { strategy: strategy, index: index }\r\n            this.$store.dispatch('selectStrategyData', strategyDataPayload)\r\n        },\r\n        async getPlan() {\r\n            var response = ''\r\n            try {\r\n                response = await axios.get(`/api/v1/plan/${this.selectedPlan.id}`)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            this.$store.dispatch('selectPlan', response.data)\r\n        },\r\n        async updatePhase() {\r\n            this.selectedPhase.plan = this.selectedPlan.id\r\n            console.log('selectedPhase:', this.selectedPhase)\r\n\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/phase/${this.selectedPhase.id}/`, this.selectedPhase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBPhaseProcessing(this.selectedPhaseIndex, `Successfully updated Phase \"${response.data.name}\"`, 'success')\r\n        },\r\n        async createPhase(createPhase) {\r\n            // Add current plan to new phase\r\n            createPhase.plan = this.selectedPlan.id\r\n            console.log('newPhase:', createPhase)\r\n            var response = ''\r\n            try {\r\n                response = await axios.post(`api/v1/phases/`, createPhase)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n            this.endDBPhaseProcessing(0, `Successfully created Phase \"${response.data.name}\"`)\r\n        },\r\n        async deletePhase(deletePhase) {\r\n            // A pLan must have at least one Phase\r\n            if (this.selectedPlan.phases.length === 1) {\r\n                // Display Snackbar message\r\n                this.showSnackBar(`Unable to delete Phase \"${this.selectedPhase.name}\" - a Plan must have at least 1 Phase`, 'warning', 'black--text')\r\n            } else {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.delete(`api/v1/phase/${deletePhase.id}/`)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n                // Refresh updated Plan and save phase to store, issue message aslert and change route to new tab\r\n                this.endDBPhaseProcessing(0, `Succesfully deleted Phase \"${this.selectedPhase.name}\"`)\r\n            }\r\n        },\r\n        async endDBPhaseProcessing(phaseIndex, message, alertType = 'success') {\r\n            // Refresh updated Plan and save phase to store\r\n            await this.getPlan()\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[phaseIndex], index: phaseIndex }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar(message, alertType)\r\n        },\r\n        async updateStrategy() {\r\n            console.log('updatePayload.strategy: ', this.selectedStrategy)\r\n            var response = ''\r\n            try {\r\n                response = await axios.put(`api/v1/strategy/${this.selectedStrategy.id}/`, this.selectedStrategy)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n            this.endDBStrategyProcessing(this.selectedStrategyIndex, `Successfully updated Strategy \"${response.data.name}\"`, 'success')\r\n        },\r\n        async createStrategy(createStrategy) {\r\n            // Add current plan to new strategy\r\n            createStrategy.phase = this.selectedPhase.id\r\n            var response = ''\r\n            try {\r\n                response = await axios.post(`api/v1/strategies/`, createStrategy)\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n            // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n            this.endDBStrategyProcessing(0, `Successfully created Strategy \"${response.data.name}\"`)\r\n        },\r\n        async deleteStrategy(deleteStrategy) {\r\n            // A pLan must have at least one Strategy\r\n            if (this.selectedPhase.strategies.length === 1) {\r\n                // Display Snackbar message\r\n                this.showSnackBar(`Unable to delete Strategy \"${this.selectedStrategy.name}\" - a Phase must have at least 1 Strategy`, 'warning', 'black--text')\r\n            } else {\r\n                var response = ''\r\n                try {\r\n                    response = await axios.delete(`api/v1/strategy/${deleteStrategy.id}/`)\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                }\r\n                // Refresh updated Plan and save strategy to store, issue message aslert and change route to new tab\r\n                this.endDBStrategyProcessing(0, `Succesfully deleted Strategy \"${this.selectedStrategy.name}\"`)\r\n            }\r\n        },\r\n        async endDBStrategyProcessing(strategyIndex, message, alertType = 'success') {\r\n            // Refresh updated Plan and save strategy to store\r\n            await this.getPlan()\r\n\r\n            // Refresh Stored Phase data\r\n            const phaseDataPayload = { phase: this.selectedPlan.phases[this.selectedPhaseIndex], index: this.selectedPhaseIndex }\r\n            this.$store.dispatch('selectPhaseData', phaseDataPayload)\r\n\r\n            // Refresh Stored Strategy data\r\n            const strategyDataPayload = { strategy: this.selectedPhase.strategies[strategyIndex], index: strategyIndex }\r\n            this.$store.dispatch('selectStrategyData', strategyDataPayload)\r\n            console.log(this.selectedStrategy)\r\n\r\n            // Display Snackbar message\r\n            this.showSnackBar(message, alertType)\r\n        },\r\n        showSnackBar(message, alertType, text_color = 'white--text') {\r\n            const payload = { text: `${message}`, alerttype: alertType, contentclass: text_color }\r\n            this.$store.dispatch('showSnackBar', payload)\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style>\r\ndiv.v-toolbar__content {\r\n    padding: 0px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}